{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\n\nvar RequestValidator =\n/** @class */\nfunction () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n\n\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n\n\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n\n\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    } // Remove any query parameters already included in SSO params\n\n\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    }); // remove empty string parameters\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    return Object.fromEntries(Object.entries(eQParams).filter(function (_a) {\n      var value = _a[1];\n      return value !== \"\";\n    }));\n  };\n\n  return RequestValidator;\n}();\n\nexport { RequestValidator };","map":{"version":3,"names":["StringUtils","ClientConfigurationError","CodeChallengeMethodValues","PromptValue","RequestValidator","validateRedirectUri","redirectUri","isEmpty","createRedirectUriEmptyError","validatePrompt","prompt","promptValues","value","push","indexOf","createInvalidPromptError","validateClaims","claims","JSON","parse","e","createInvalidClaimsRequestError","validateCodeChallengeParams","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","PLAIN","S256","createInvalidCodeChallengeMethodError","sanitizeEQParams","eQParams","queryParams","forEach","key","Object","fromEntries","entries","filter","_a"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/request/RequestValidator.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nvar RequestValidator = /** @class */ (function () {\r\n    function RequestValidator() {\r\n    }\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    RequestValidator.validateRedirectUri = function (redirectUri) {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    RequestValidator.validatePrompt = function (prompt) {\r\n        var promptValues = [];\r\n        for (var value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    };\r\n    RequestValidator.validateClaims = function (claims) {\r\n        try {\r\n            JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n        else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\r\n        if ([\r\n            CodeChallengeMethodValues.PLAIN,\r\n            CodeChallengeMethodValues.S256\r\n        ].indexOf(codeChallengeMethod) < 0) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    };\r\n    /**\r\n     * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach(function (value, key) {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n        // remove empty string parameters\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        return Object.fromEntries(Object.entries(eQParams).filter(function (_a) {\r\n            var value = _a[1];\r\n            return value !== \"\";\r\n        }));\r\n    };\r\n    return RequestValidator;\r\n}());\n\nexport { RequestValidator };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,WAAT,QAA4B,yBAA5B;AACA,SAASC,wBAAT,QAAyC,sCAAzC;AACA,SAASC,yBAAT,EAAoCC,WAApC,QAAuD,uBAAvD;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB;AAAG;AAAe,YAAY;EAC9C,SAASA,gBAAT,GAA4B,CAC3B;EACD;AACJ;AACA;AACA;;;EACIA,gBAAgB,CAACC,mBAAjB,GAAuC,UAAUC,WAAV,EAAuB;IAC1D,IAAIN,WAAW,CAACO,OAAZ,CAAoBD,WAApB,CAAJ,EAAsC;MAClC,MAAML,wBAAwB,CAACO,2BAAzB,EAAN;IACH;EACJ,CAJD;EAKA;AACJ;AACA;AACA;;;EACIJ,gBAAgB,CAACK,cAAjB,GAAkC,UAAUC,MAAV,EAAkB;IAChD,IAAIC,YAAY,GAAG,EAAnB;;IACA,KAAK,IAAIC,KAAT,IAAkBT,WAAlB,EAA+B;MAC3BQ,YAAY,CAACE,IAAb,CAAkBV,WAAW,CAACS,KAAD,CAA7B;IACH;;IACD,IAAID,YAAY,CAACG,OAAb,CAAqBJ,MAArB,IAA+B,CAAnC,EAAsC;MAClC,MAAMT,wBAAwB,CAACc,wBAAzB,CAAkDL,MAAlD,CAAN;IACH;EACJ,CARD;;EASAN,gBAAgB,CAACY,cAAjB,GAAkC,UAAUC,MAAV,EAAkB;IAChD,IAAI;MACAC,IAAI,CAACC,KAAL,CAAWF,MAAX;IACH,CAFD,CAGA,OAAOG,CAAP,EAAU;MACN,MAAMnB,wBAAwB,CAACoB,+BAAzB,EAAN;IACH;EACJ,CAPD;EAQA;AACJ;AACA;AACA;AACA;;;EACIjB,gBAAgB,CAACkB,2BAAjB,GAA+C,UAAUC,aAAV,EAAyBC,mBAAzB,EAA8C;IACzF,IAAIxB,WAAW,CAACO,OAAZ,CAAoBgB,aAApB,KAAsCvB,WAAW,CAACO,OAAZ,CAAoBiB,mBAApB,CAA1C,EAAoF;MAChF,MAAMvB,wBAAwB,CAACwB,qCAAzB,EAAN;IACH,CAFD,MAGK;MACD,KAAKC,2BAAL,CAAiCF,mBAAjC;IACH;EACJ,CAPD;EAQA;AACJ;AACA;AACA;;;EACIpB,gBAAgB,CAACsB,2BAAjB,GAA+C,UAAUF,mBAAV,EAA+B;IAC1E,IAAI,CACAtB,yBAAyB,CAACyB,KAD1B,EAEAzB,yBAAyB,CAAC0B,IAF1B,EAGFd,OAHE,CAGMU,mBAHN,IAG6B,CAHjC,EAGoC;MAChC,MAAMvB,wBAAwB,CAAC4B,qCAAzB,EAAN;IACH;EACJ,CAPD;EAQA;AACJ;AACA;AACA;;;EACIzB,gBAAgB,CAAC0B,gBAAjB,GAAoC,UAAUC,QAAV,EAAoBC,WAApB,EAAiC;IACjE,IAAI,CAACD,QAAL,EAAe;MACX,OAAO,EAAP;IACH,CAHgE,CAIjE;;;IACAC,WAAW,CAACC,OAAZ,CAAoB,UAAUrB,KAAV,EAAiBsB,GAAjB,EAAsB;MACtC,IAAIH,QAAQ,CAACG,GAAD,CAAZ,EAAmB;QACf,OAAOH,QAAQ,CAACG,GAAD,CAAf;MACH;IACJ,CAJD,EALiE,CAUjE;IACA;;IACA,OAAOC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAeN,QAAf,EAAyBO,MAAzB,CAAgC,UAAUC,EAAV,EAAc;MACpE,IAAI3B,KAAK,GAAG2B,EAAE,CAAC,CAAD,CAAd;MACA,OAAO3B,KAAK,KAAK,EAAjB;IACH,CAHyB,CAAnB,CAAP;EAIH,CAhBD;;EAiBA,OAAOR,gBAAP;AACH,CAhFqC,EAAtC;;AAkFA,SAASA,gBAAT"},"metadata":{},"sourceType":"module"}