{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\n\nvar PerformanceEvents;\n\n(function (PerformanceEvents) {\n  /**\r\n   * acquireTokenByCode API (msal-browser and msal-node).\r\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n   */\n  PerformanceEvents[\"AcquireTokenByCode\"] = \"acquireTokenByCode\";\n  /**\r\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n   * Used to renew an access token using a refresh token against the token endpoint.\r\n   */\n\n  PerformanceEvents[\"AcquireTokenByRefreshToken\"] = \"acquireTokenByRefreshToken\";\n  /**\r\n   * acquireTokenSilent API (msal-browser and msal-node).\r\n   * Used to silently acquire a new access token (from the cache or the network).\r\n   */\n\n  PerformanceEvents[\"AcquireTokenSilent\"] = \"acquireTokenSilent\";\n  /**\r\n   * acquireTokenSilentAsync (msal-browser).\r\n   * Internal API for acquireTokenSilent.\r\n   */\n\n  PerformanceEvents[\"AcquireTokenSilentAsync\"] = \"acquireTokenSilentAsync\";\n  /**\r\n   * acquireTokenPopup (msal-browser).\r\n   * Used to acquire a new access token interactively through pop ups\r\n   */\n\n  PerformanceEvents[\"AcquireTokenPopup\"] = \"acquireTokenPopup\";\n  /**\r\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n   */\n\n  PerformanceEvents[\"CryptoOptsGetPublicKeyThumbprint\"] = \"cryptoOptsGetPublicKeyThumbprint\";\n  /**\r\n   * signJwt API in CryptoOpts class (msal-browser).\r\n   * Used to signed a pop token.\r\n   */\n\n  PerformanceEvents[\"CryptoOptsSignJwt\"] = \"cryptoOptsSignJwt\";\n  /**\r\n   * acquireToken API in the SilentCacheClient class (msal-browser).\r\n   * Used to read access tokens from the cache.\r\n   */\n\n  PerformanceEvents[\"SilentCacheClientAcquireToken\"] = \"silentCacheClientAcquireToken\";\n  /**\r\n   * acquireToken API in the SilentIframeClient class (msal-browser).\r\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n   */\n\n  PerformanceEvents[\"SilentIframeClientAcquireToken\"] = \"silentIframeClientAcquireToken\";\n  /**\r\n   * acquireToken API in SilentRereshClient (msal-browser).\r\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n   */\n\n  PerformanceEvents[\"SilentRefreshClientAcquireToken\"] = \"silentRefreshClientAcquireToken\";\n  /**\r\n   * ssoSilent API (msal-browser).\r\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n   */\n\n  PerformanceEvents[\"SsoSilent\"] = \"ssoSilent\";\n  /**\r\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n   * Used to load authority metadata for a request.\r\n   */\n\n  PerformanceEvents[\"StandardInteractionClientGetDiscoveredAuthority\"] = \"standardInteractionClientGetDiscoveredAuthority\";\n  /**\r\n   * acquireToken APIs in msal-browser.\r\n   * Used to make an /authorize endpoint call with native brokering enabled.\r\n   */\n\n  PerformanceEvents[\"FetchAccountIdWithNativeBroker\"] = \"fetchAccountIdWithNativeBroker\";\n  /**\r\n   * acquireToken API in NativeInteractionClient class (msal-browser).\r\n   * Used to acquire a token from Native component when native brokering is enabled.\r\n   */\n\n  PerformanceEvents[\"NativeInteractionClientAcquireToken\"] = \"nativeInteractionClientAcquireToken\";\n  /**\r\n   * Time spent creating default headers for requests to token endpoint\r\n   */\n\n  PerformanceEvents[\"BaseClientCreateTokenRequestHeaders\"] = \"baseClientCreateTokenRequestHeaders\";\n  /**\r\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n   */\n\n  PerformanceEvents[\"BrokerHandhshake\"] = \"brokerHandshake\";\n  /**\r\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n   */\n\n  PerformanceEvents[\"AcquireTokenByRefreshTokenInBroker\"] = \"acquireTokenByRefreshTokenInBroker\";\n  /**\r\n   * Time taken for token acquisition by broker\r\n   */\n\n  PerformanceEvents[\"AcquireTokenByBroker\"] = \"acquireTokenByBroker\";\n  /**\r\n   * Time spent on the network for refresh token acquisition\r\n   */\n\n  PerformanceEvents[\"RefreshTokenClientExecuteTokenRequest\"] = \"refreshTokenClientExecuteTokenRequest\";\n  /**\r\n   * Time taken for acquiring refresh token , records RT size\r\n   */\n\n  PerformanceEvents[\"RefreshTokenClientAcquireToken\"] = \"refreshTokenClientAcquireToken\";\n  /**\r\n   * Time taken for acquiring cached refresh token\r\n   */\n\n  PerformanceEvents[\"RefreshTokenClientAcquireTokenWithCachedRefreshToken\"] = \"refreshTokenClientAcquireTokenWithCachedRefreshToken\";\n  /**\r\n   * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n   */\n\n  PerformanceEvents[\"RefreshTokenClientAcquireTokenByRefreshToken\"] = \"refreshTokenClientAcquireTokenByRefreshToken\";\n  /**\r\n   * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n   */\n\n  PerformanceEvents[\"RefreshTokenClientCreateTokenRequestBody\"] = \"refreshTokenClientCreateTokenRequestBody\";\n  /**\r\n   * acquireTokenFromCache (msal-browser).\r\n   * Internal API for acquiring token from cache\r\n   */\n\n  PerformanceEvents[\"AcquireTokenFromCache\"] = \"acquireTokenFromCache\";\n  /**\r\n   * acquireTokenBySilentIframe (msal-browser).\r\n   * Internal API for acquiring token by silent Iframe\r\n   */\n\n  PerformanceEvents[\"AcquireTokenBySilentIframe\"] = \"acquireTokenBySilentIframe\";\n  /**\r\n   * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n   */\n\n  PerformanceEvents[\"InitializeBaseRequest\"] = \"initializeBaseRequest\";\n  /**\r\n   * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n   */\n\n  PerformanceEvents[\"InitializeSilentRequest\"] = \"initializeSilentRequest\";\n  PerformanceEvents[\"InitializeClientApplication\"] = \"initializeClientApplication\";\n  /**\r\n   * Helper function in SilentIframeClient class (msal-browser).\r\n   */\n\n  PerformanceEvents[\"SilentIframeClientTokenHelper\"] = \"silentIframeClientTokenHelper\";\n  /**\r\n   * SilentHandler\r\n   */\n\n  PerformanceEvents[\"SilentHandlerInitiateAuthRequest\"] = \"silentHandlerInitiateAuthRequest\";\n  PerformanceEvents[\"SilentHandlerMonitorIframeForHash\"] = \"silentHandlerMonitorIframeForHash\";\n  PerformanceEvents[\"SilentHandlerLoadFrame\"] = \"silentHandlerLoadFrame\";\n  /**\r\n   * Helper functions in StandardInteractionClient class (msal-browser)\r\n   */\n\n  PerformanceEvents[\"StandardInteractionClientCreateAuthCodeClient\"] = \"standardInteractionClientCreateAuthCodeClient\";\n  PerformanceEvents[\"StandardInteractionClientGetClientConfiguration\"] = \"standardInteractionClientGetClientConfiguration\";\n  PerformanceEvents[\"StandardInteractionClientInitializeAuthorizationRequest\"] = \"standardInteractionClientInitializeAuthorizationRequest\";\n  PerformanceEvents[\"StandardInteractionClientInitializeAuthorizationCodeRequest\"] = \"standardInteractionClientInitializeAuthorizationCodeRequest\";\n  /**\r\n   * getAuthCodeUrl API (msal-browser and msal-node).\r\n   */\n\n  PerformanceEvents[\"GetAuthCodeUrl\"] = \"getAuthCodeUrl\";\n  /**\r\n   * Functions from InteractionHandler (msal-browser)\r\n   */\n\n  PerformanceEvents[\"HandleCodeResponseFromServer\"] = \"handleCodeResponseFromServer\";\n  PerformanceEvents[\"HandleCodeResponseFromHash\"] = \"handleCodeResponseFromHash\";\n  PerformanceEvents[\"UpdateTokenEndpointAuthority\"] = \"updateTokenEndpointAuthority\";\n  /**\r\n   * APIs in Authorization Code Client (msal-common)\r\n   */\n\n  PerformanceEvents[\"AuthClientAcquireToken\"] = \"authClientAcquireToken\";\n  PerformanceEvents[\"AuthClientExecuteTokenRequest\"] = \"authClientExecuteTokenRequest\";\n  PerformanceEvents[\"AuthClientCreateTokenRequestBody\"] = \"authClientCreateTokenRequestBody\";\n  PerformanceEvents[\"AuthClientCreateQueryString\"] = \"authClientCreateQueryString\";\n  /**\r\n   * Generate functions in PopTokenGenerator (msal-common)\r\n   */\n\n  PerformanceEvents[\"PopTokenGenerateCnf\"] = \"popTokenGenerateCnf\";\n  PerformanceEvents[\"PopTokenGenerateKid\"] = \"popTokenGenerateKid\";\n  /**\r\n   * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n   */\n\n  PerformanceEvents[\"HandleServerTokenResponse\"] = \"handleServerTokenResponse\";\n  /**\r\n   * Authority functions\r\n   */\n\n  PerformanceEvents[\"AuthorityFactoryCreateDiscoveredInstance\"] = \"authorityFactoryCreateDiscoveredInstance\";\n  PerformanceEvents[\"AuthorityResolveEndpointsAsync\"] = \"authorityResolveEndpointsAsync\";\n  PerformanceEvents[\"AuthorityGetCloudDiscoveryMetadataFromNetwork\"] = \"authorityGetCloudDiscoveryMetadataFromNetwork\";\n  PerformanceEvents[\"AuthorityUpdateCloudDiscoveryMetadata\"] = \"authorityUpdateCloudDiscoveryMetadata\";\n  PerformanceEvents[\"AuthorityGetEndpointMetadataFromNetwork\"] = \"authorityGetEndpointMetadataFromNetwork\";\n  PerformanceEvents[\"AuthorityUpdateEndpointMetadata\"] = \"authorityUpdateEndpointMetadata\";\n  PerformanceEvents[\"AuthorityUpdateMetadataWithRegionalInformation\"] = \"authorityUpdateMetadataWithRegionalInformation\";\n  /**\r\n   * Region Discovery functions\r\n   */\n\n  PerformanceEvents[\"RegionDiscoveryDetectRegion\"] = \"regionDiscoveryDetectRegion\";\n  PerformanceEvents[\"RegionDiscoveryGetRegionFromIMDS\"] = \"regionDiscoveryGetRegionFromIMDS\";\n  PerformanceEvents[\"RegionDiscoveryGetCurrentVersion\"] = \"regionDiscoveryGetCurrentVersion\";\n  PerformanceEvents[\"AcquireTokenByCodeAsync\"] = \"acquireTokenByCodeAsync\";\n  PerformanceEvents[\"GetEndpointMetadataFromNetwork\"] = \"getEndpointMetadataFromNetwork\";\n  PerformanceEvents[\"GetCloudDiscoveryMetadataFromNetworkMeasurement\"] = \"getCloudDiscoveryMetadataFromNetworkMeasurement\";\n  PerformanceEvents[\"HandleRedirectPromiseMeasurement\"] = \"handleRedirectPromiseMeasurement\";\n  PerformanceEvents[\"UpdateCloudDiscoveryMetadataMeasurement\"] = \"updateCloudDiscoveryMetadataMeasurement\";\n  PerformanceEvents[\"UsernamePasswordClientAcquireToken\"] = \"usernamePasswordClientAcquireToken\";\n  PerformanceEvents[\"NativeMessageHandlerHandshake\"] = \"nativeMessageHandlerHandshake\";\n  /**\r\n   * Cache operations\r\n   */\n\n  PerformanceEvents[\"ClearTokensAndKeysWithClaims\"] = \"clearTokensAndKeysWithClaims\";\n})(PerformanceEvents || (PerformanceEvents = {}));\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\n\n\nvar PerformanceEventStatus;\n\n(function (PerformanceEventStatus) {\n  PerformanceEventStatus[PerformanceEventStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  PerformanceEventStatus[PerformanceEventStatus[\"InProgress\"] = 1] = \"InProgress\";\n  PerformanceEventStatus[PerformanceEventStatus[\"Completed\"] = 2] = \"Completed\";\n})(PerformanceEventStatus || (PerformanceEventStatus = {}));\n\nvar IntFields = new Set([\"accessTokenSize\", \"durationMs\", \"idTokenSize\", \"matsSilentStatus\", \"matsHttpStatus\", \"refreshTokenSize\", \"queuedTimeMs\", \"startTimeMs\", \"status\"]);\nexport { IntFields, PerformanceEventStatus, PerformanceEvents };","map":{"version":3,"names":["PerformanceEvents","PerformanceEventStatus","IntFields","Set"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nvar PerformanceEvents;\r\n(function (PerformanceEvents) {\r\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */\r\n    PerformanceEvents[\"AcquireTokenByCode\"] = \"acquireTokenByCode\";\r\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */\r\n    PerformanceEvents[\"AcquireTokenByRefreshToken\"] = \"acquireTokenByRefreshToken\";\r\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */\r\n    PerformanceEvents[\"AcquireTokenSilent\"] = \"acquireTokenSilent\";\r\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */\r\n    PerformanceEvents[\"AcquireTokenSilentAsync\"] = \"acquireTokenSilentAsync\";\r\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */\r\n    PerformanceEvents[\"AcquireTokenPopup\"] = \"acquireTokenPopup\";\r\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */\r\n    PerformanceEvents[\"CryptoOptsGetPublicKeyThumbprint\"] = \"cryptoOptsGetPublicKeyThumbprint\";\r\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */\r\n    PerformanceEvents[\"CryptoOptsSignJwt\"] = \"cryptoOptsSignJwt\";\r\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */\r\n    PerformanceEvents[\"SilentCacheClientAcquireToken\"] = \"silentCacheClientAcquireToken\";\r\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */\r\n    PerformanceEvents[\"SilentIframeClientAcquireToken\"] = \"silentIframeClientAcquireToken\";\r\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */\r\n    PerformanceEvents[\"SilentRefreshClientAcquireToken\"] = \"silentRefreshClientAcquireToken\";\r\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */\r\n    PerformanceEvents[\"SsoSilent\"] = \"ssoSilent\";\r\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */\r\n    PerformanceEvents[\"StandardInteractionClientGetDiscoveredAuthority\"] = \"standardInteractionClientGetDiscoveredAuthority\";\r\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */\r\n    PerformanceEvents[\"FetchAccountIdWithNativeBroker\"] = \"fetchAccountIdWithNativeBroker\";\r\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */\r\n    PerformanceEvents[\"NativeInteractionClientAcquireToken\"] = \"nativeInteractionClientAcquireToken\";\r\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */\r\n    PerformanceEvents[\"BaseClientCreateTokenRequestHeaders\"] = \"baseClientCreateTokenRequestHeaders\";\r\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */\r\n    PerformanceEvents[\"BrokerHandhshake\"] = \"brokerHandshake\";\r\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */\r\n    PerformanceEvents[\"AcquireTokenByRefreshTokenInBroker\"] = \"acquireTokenByRefreshTokenInBroker\";\r\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */\r\n    PerformanceEvents[\"AcquireTokenByBroker\"] = \"acquireTokenByBroker\";\r\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */\r\n    PerformanceEvents[\"RefreshTokenClientExecuteTokenRequest\"] = \"refreshTokenClientExecuteTokenRequest\";\r\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */\r\n    PerformanceEvents[\"RefreshTokenClientAcquireToken\"] = \"refreshTokenClientAcquireToken\";\r\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */\r\n    PerformanceEvents[\"RefreshTokenClientAcquireTokenWithCachedRefreshToken\"] = \"refreshTokenClientAcquireTokenWithCachedRefreshToken\";\r\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */\r\n    PerformanceEvents[\"RefreshTokenClientAcquireTokenByRefreshToken\"] = \"refreshTokenClientAcquireTokenByRefreshToken\";\r\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */\r\n    PerformanceEvents[\"RefreshTokenClientCreateTokenRequestBody\"] = \"refreshTokenClientCreateTokenRequestBody\";\r\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */\r\n    PerformanceEvents[\"AcquireTokenFromCache\"] = \"acquireTokenFromCache\";\r\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */\r\n    PerformanceEvents[\"AcquireTokenBySilentIframe\"] = \"acquireTokenBySilentIframe\";\r\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */\r\n    PerformanceEvents[\"InitializeBaseRequest\"] = \"initializeBaseRequest\";\r\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */\r\n    PerformanceEvents[\"InitializeSilentRequest\"] = \"initializeSilentRequest\";\r\n    PerformanceEvents[\"InitializeClientApplication\"] = \"initializeClientApplication\";\r\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */\r\n    PerformanceEvents[\"SilentIframeClientTokenHelper\"] = \"silentIframeClientTokenHelper\";\r\n    /**\r\n     * SilentHandler\r\n     */\r\n    PerformanceEvents[\"SilentHandlerInitiateAuthRequest\"] = \"silentHandlerInitiateAuthRequest\";\r\n    PerformanceEvents[\"SilentHandlerMonitorIframeForHash\"] = \"silentHandlerMonitorIframeForHash\";\r\n    PerformanceEvents[\"SilentHandlerLoadFrame\"] = \"silentHandlerLoadFrame\";\r\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */\r\n    PerformanceEvents[\"StandardInteractionClientCreateAuthCodeClient\"] = \"standardInteractionClientCreateAuthCodeClient\";\r\n    PerformanceEvents[\"StandardInteractionClientGetClientConfiguration\"] = \"standardInteractionClientGetClientConfiguration\";\r\n    PerformanceEvents[\"StandardInteractionClientInitializeAuthorizationRequest\"] = \"standardInteractionClientInitializeAuthorizationRequest\";\r\n    PerformanceEvents[\"StandardInteractionClientInitializeAuthorizationCodeRequest\"] = \"standardInteractionClientInitializeAuthorizationCodeRequest\";\r\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */\r\n    PerformanceEvents[\"GetAuthCodeUrl\"] = \"getAuthCodeUrl\";\r\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */\r\n    PerformanceEvents[\"HandleCodeResponseFromServer\"] = \"handleCodeResponseFromServer\";\r\n    PerformanceEvents[\"HandleCodeResponseFromHash\"] = \"handleCodeResponseFromHash\";\r\n    PerformanceEvents[\"UpdateTokenEndpointAuthority\"] = \"updateTokenEndpointAuthority\";\r\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */\r\n    PerformanceEvents[\"AuthClientAcquireToken\"] = \"authClientAcquireToken\";\r\n    PerformanceEvents[\"AuthClientExecuteTokenRequest\"] = \"authClientExecuteTokenRequest\";\r\n    PerformanceEvents[\"AuthClientCreateTokenRequestBody\"] = \"authClientCreateTokenRequestBody\";\r\n    PerformanceEvents[\"AuthClientCreateQueryString\"] = \"authClientCreateQueryString\";\r\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */\r\n    PerformanceEvents[\"PopTokenGenerateCnf\"] = \"popTokenGenerateCnf\";\r\n    PerformanceEvents[\"PopTokenGenerateKid\"] = \"popTokenGenerateKid\";\r\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */\r\n    PerformanceEvents[\"HandleServerTokenResponse\"] = \"handleServerTokenResponse\";\r\n    /**\r\n     * Authority functions\r\n     */\r\n    PerformanceEvents[\"AuthorityFactoryCreateDiscoveredInstance\"] = \"authorityFactoryCreateDiscoveredInstance\";\r\n    PerformanceEvents[\"AuthorityResolveEndpointsAsync\"] = \"authorityResolveEndpointsAsync\";\r\n    PerformanceEvents[\"AuthorityGetCloudDiscoveryMetadataFromNetwork\"] = \"authorityGetCloudDiscoveryMetadataFromNetwork\";\r\n    PerformanceEvents[\"AuthorityUpdateCloudDiscoveryMetadata\"] = \"authorityUpdateCloudDiscoveryMetadata\";\r\n    PerformanceEvents[\"AuthorityGetEndpointMetadataFromNetwork\"] = \"authorityGetEndpointMetadataFromNetwork\";\r\n    PerformanceEvents[\"AuthorityUpdateEndpointMetadata\"] = \"authorityUpdateEndpointMetadata\";\r\n    PerformanceEvents[\"AuthorityUpdateMetadataWithRegionalInformation\"] = \"authorityUpdateMetadataWithRegionalInformation\";\r\n    /**\r\n     * Region Discovery functions\r\n     */\r\n    PerformanceEvents[\"RegionDiscoveryDetectRegion\"] = \"regionDiscoveryDetectRegion\";\r\n    PerformanceEvents[\"RegionDiscoveryGetRegionFromIMDS\"] = \"regionDiscoveryGetRegionFromIMDS\";\r\n    PerformanceEvents[\"RegionDiscoveryGetCurrentVersion\"] = \"regionDiscoveryGetCurrentVersion\";\r\n    PerformanceEvents[\"AcquireTokenByCodeAsync\"] = \"acquireTokenByCodeAsync\";\r\n    PerformanceEvents[\"GetEndpointMetadataFromNetwork\"] = \"getEndpointMetadataFromNetwork\";\r\n    PerformanceEvents[\"GetCloudDiscoveryMetadataFromNetworkMeasurement\"] = \"getCloudDiscoveryMetadataFromNetworkMeasurement\";\r\n    PerformanceEvents[\"HandleRedirectPromiseMeasurement\"] = \"handleRedirectPromiseMeasurement\";\r\n    PerformanceEvents[\"UpdateCloudDiscoveryMetadataMeasurement\"] = \"updateCloudDiscoveryMetadataMeasurement\";\r\n    PerformanceEvents[\"UsernamePasswordClientAcquireToken\"] = \"usernamePasswordClientAcquireToken\";\r\n    PerformanceEvents[\"NativeMessageHandlerHandshake\"] = \"nativeMessageHandlerHandshake\";\r\n    /**\r\n     * Cache operations\r\n     */\r\n    PerformanceEvents[\"ClearTokensAndKeysWithClaims\"] = \"clearTokensAndKeysWithClaims\";\r\n})(PerformanceEvents || (PerformanceEvents = {}));\r\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nvar PerformanceEventStatus;\r\n(function (PerformanceEventStatus) {\r\n    PerformanceEventStatus[PerformanceEventStatus[\"NotStarted\"] = 0] = \"NotStarted\";\r\n    PerformanceEventStatus[PerformanceEventStatus[\"InProgress\"] = 1] = \"InProgress\";\r\n    PerformanceEventStatus[PerformanceEventStatus[\"Completed\"] = 2] = \"Completed\";\r\n})(PerformanceEventStatus || (PerformanceEventStatus = {}));\r\nvar IntFields = new Set([\r\n    \"accessTokenSize\",\r\n    \"durationMs\",\r\n    \"idTokenSize\",\r\n    \"matsSilentStatus\",\r\n    \"matsHttpStatus\",\r\n    \"refreshTokenSize\",\r\n    \"queuedTimeMs\",\r\n    \"startTimeMs\",\r\n    \"status\",\r\n]);\n\nexport { IntFields, PerformanceEventStatus, PerformanceEvents };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}