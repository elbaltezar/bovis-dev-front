{"ast":null,"code":"import { InjectionToken, Injectable, Inject, Optional, VERSION, Component, NgModule } from '@angular/core';\nimport { Location, DOCUMENT, CommonModule } from '@angular/common';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, ReplaySubject, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { map, concatMap, catchError, switchMap, take, filter } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/router';\nconst MSAL_INSTANCE = new InjectionToken(\"MSAL_INSTANCE\");\nconst MSAL_GUARD_CONFIG = new InjectionToken(\"MSAL_GUARD_CONFIG\");\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken(\"MSAL_INTERCEPTOR_CONFIG\");\nconst MSAL_BROADCAST_CONFIG = new InjectionToken(\"MSAL_BROADCAST_CONFIG\");\n/* eslint-disable header/header */\n\nconst name = \"@azure/msal-angular\";\nconst version = \"2.5.12\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nclass MsalService {\n  constructor(instance, location) {\n    this.instance = instance;\n    this.location = location;\n    const hash = this.location.path(true).split(\"#\").pop();\n\n    if (hash) {\n      this.redirectHash = `#${hash}`;\n    }\n\n    this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\n  }\n\n  initialize() {\n    return from(this.instance.initialize());\n  }\n\n  acquireTokenPopup(request) {\n    return from(this.instance.acquireTokenPopup(request));\n  }\n\n  acquireTokenRedirect(request) {\n    return from(this.instance.acquireTokenRedirect(request));\n  }\n\n  acquireTokenSilent(silentRequest) {\n    return from(this.instance.acquireTokenSilent(silentRequest));\n  }\n\n  handleRedirectObservable(hash) {\n    return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\n  }\n\n  loginPopup(request) {\n    return from(this.instance.loginPopup(request));\n  }\n\n  loginRedirect(request) {\n    return from(this.instance.loginRedirect(request));\n  }\n\n  logout(logoutRequest) {\n    return from(this.instance.logout(logoutRequest));\n  }\n\n  logoutRedirect(logoutRequest) {\n    return from(this.instance.logoutRedirect(logoutRequest));\n  }\n\n  logoutPopup(logoutRequest) {\n    return from(this.instance.logoutPopup(logoutRequest));\n  }\n\n  ssoSilent(request) {\n    return from(this.instance.ssoSilent(request));\n  }\n  /**\r\n   * Gets logger for msal-angular.\r\n   * If no logger set, returns logger instance created with same options as msal-browser\r\n   */\n\n\n  getLogger() {\n    if (!this.logger) {\n      this.logger = this.instance.getLogger().clone(name, version);\n    }\n\n    return this.logger;\n  } // Create a logger instance for msal-angular with the same options as msal-browser\n\n\n  setLogger(logger) {\n    this.logger = logger.clone(name, version);\n    this.instance.setLogger(logger);\n  }\n\n}\n\nMsalService.ɵfac = function MsalService_Factory(t) {\n  return new (t || MsalService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(ɵngcc1.Location));\n};\n\nMsalService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MsalService,\n  factory: MsalService.ɵfac\n});\n\nMsalService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MSAL_INSTANCE]\n  }]\n}, {\n  type: Location\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: ɵngcc1.Location\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nclass MsalBroadcastService {\n  constructor(msalInstance, authService, msalBroadcastConfig) {\n    this.msalInstance = msalInstance;\n    this.authService = authService;\n    this.msalBroadcastConfig = msalBroadcastConfig; // Make _msalSubject a ReplaySubject if configured to replay past events\n\n    if (this.msalBroadcastConfig && this.msalBroadcastConfig.eventsToReplay > 0) {\n      this.authService.getLogger().verbose(`BroadcastService - replayPastEvents set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`);\n      this._msalSubject = new ReplaySubject(this.msalBroadcastConfig.eventsToReplay);\n    } else {\n      // Defaults to _msalSubject being a Subject\n      this._msalSubject = new Subject();\n    }\n\n    this.msalSubject$ = this._msalSubject.asObservable(); // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n\n    this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\n    this.inProgress$ = this._inProgress.asObservable();\n    this.msalInstance.addEventCallback(message => {\n      this._msalSubject.next(message);\n\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message, this._inProgress.value);\n\n      if (status !== null) {\n        this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`);\n\n        this._inProgress.next(status);\n      }\n    });\n  }\n\n}\n\nMsalBroadcastService.ɵfac = function MsalBroadcastService_Factory(t) {\n  return new (t || MsalBroadcastService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(MSAL_BROADCAST_CONFIG, 8));\n};\n\nMsalBroadcastService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MsalBroadcastService,\n  factory: MsalBroadcastService.ɵfac\n});\n\nMsalBroadcastService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MSAL_INSTANCE]\n  }]\n}, {\n  type: MsalService\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MSAL_BROADCAST_CONFIG]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalBroadcastService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: MsalService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MSAL_BROADCAST_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nclass MsalGuard {\n  constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\n    this.msalGuardConfig = msalGuardConfig;\n    this.msalBroadcastService = msalBroadcastService;\n    this.authService = authService;\n    this.location = location;\n    this.router = router; // Subscribing so events in MsalGuard will set inProgress$ observable\n\n    this.msalBroadcastService.inProgress$.subscribe();\n  }\n  /**\r\n   * Parses url string to UrlTree\r\n   * @param url\r\n   */\n\n\n  parseUrl(url) {\n    return this.router.parseUrl(url);\n  }\n  /**\r\n   * Builds the absolute url for the destination page\r\n   * @param path Relative path of requested page\r\n   * @returns Full destination url\r\n   */\n\n\n  getDestinationUrl(path) {\n    this.authService.getLogger().verbose(\"Guard - getting destination url\"); // Absolute base url for the application (default to origin if base element not present)\n\n    const baseElements = document.getElementsByTagName(\"base\");\n    const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin); // Path of page (including hash, if using hash routing)\n\n    const pathUrl = this.location.prepareExternalUrl(path); // Hash location strategy\n\n    if (pathUrl.startsWith(\"#\")) {\n      this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\n      return `${baseUrl}/${pathUrl}`;\n    }\n    /*\r\n     * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n     * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n     */\n\n\n    return `${baseUrl}${path}`;\n  }\n  /**\r\n   * Interactively prompt the user to login\r\n   * @param url Path of the requested page\r\n   */\n\n\n  loginInteractively(state) {\n    const authRequest = typeof this.msalGuardConfig.authRequest === \"function\" ? this.msalGuardConfig.authRequest(this.authService, state) : Object.assign({}, this.msalGuardConfig.authRequest);\n\n    if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\n      this.authService.getLogger().verbose(\"Guard - logging in by popup\");\n      return this.authService.loginPopup(authRequest).pipe(map(response => {\n        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\n        this.authService.instance.setActiveAccount(response.account);\n        return true;\n      }));\n    }\n\n    this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\n    const redirectStartPage = this.getDestinationUrl(state.url);\n    return this.authService.loginRedirect(Object.assign({\n      redirectStartPage\n    }, authRequest)).pipe(map(() => false));\n  }\n  /**\r\n   * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n   * @param state\r\n   */\n\n\n  activateHelper(state) {\n    if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\n      throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\n    }\n\n    this.authService.getLogger().verbose(\"MSAL Guard activated\");\n    /*\r\n     * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n     * short-circuit to prevent redirecting or popups.\r\n     */\n\n    if (typeof window !== \"undefined\") {\n      if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe() && !this.authService.instance.getConfiguration().system.allowRedirectInIframe) {\n        this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\n        return of(false);\n      }\n    } else {\n      this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\n      return of(true);\n    }\n    /**\r\n     * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n     */\n\n\n    if (this.msalGuardConfig.loginFailedRoute) {\n      this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\n    } // Capture current path before it gets changed by handleRedirectObservable\n\n\n    const currentPath = this.location.path(true);\n    return this.authService.handleRedirectObservable().pipe(concatMap(() => {\n      if (!this.authService.instance.getAllAccounts().length) {\n        if (state) {\n          this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\n          return this.loginInteractively(state);\n        }\n\n        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\n        return of(false);\n      }\n\n      this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\"); // Prevent navigating the app to /#code= or /code=\n\n      if (state) {\n        /*\r\n         * Path routing:\r\n         * state.url: /#code=...\r\n         * state.root.fragment: code=...\r\n         */\n\n        /*\r\n         * Hash routing:\r\n         * state.url: /code\r\n         * state.root.fragment: null\r\n         */\n        const urlContainsCode = this.includesCode(state.url);\n        const fragmentContainsCode = !!state.root && !!state.root.fragment && this.includesCode(`#${state.root.fragment}`);\n        const hashRouting = this.location.prepareExternalUrl(state.url).indexOf(\"#\") === 0; // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\n\n        if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\n          this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\"); // Path routing (navigate to current path without hash)\n\n          if (currentPath.indexOf(\"#\") > -1) {\n            return of(this.parseUrl(this.location.path()));\n          } // Hash routing (navigate to root path)\n\n\n          return of(this.parseUrl(\"\"));\n        }\n      }\n\n      return of(true);\n    }), catchError(error => {\n      this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\n      this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\n      /**\r\n       * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n       * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n       */\n\n      if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\n        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\n        return of(this.loginFailedRoute);\n      }\n\n      return of(false);\n    }));\n  }\n\n  includesCode(path) {\n    return path.lastIndexOf(\"/code\") > -1 && path.lastIndexOf(\"/code\") === path.length - \"/code\".length || // path.endsWith(\"/code\")\n    path.indexOf(\"#code=\") > -1 || path.indexOf(\"&code=\") > -1;\n  }\n\n  canActivate(route, state) {\n    this.authService.getLogger().verbose(\"Guard - canActivate\");\n    return this.activateHelper(state);\n  }\n\n  canActivateChild(route, state) {\n    this.authService.getLogger().verbose(\"Guard - canActivateChild\");\n    return this.activateHelper(state);\n  }\n\n  canLoad() {\n    this.authService.getLogger().verbose(\"Guard - canLoad\"); // @ts-ignore\n\n    return this.activateHelper();\n  }\n\n}\n\nMsalGuard.ɵfac = function MsalGuard_Factory(t) {\n  return new (t || MsalGuard)(ɵngcc0.ɵɵinject(MSAL_GUARD_CONFIG), ɵngcc0.ɵɵinject(MsalBroadcastService), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(ɵngcc2.Router));\n};\n\nMsalGuard.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MsalGuard,\n  factory: MsalGuard.ɵfac\n});\n\nMsalGuard.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MSAL_GUARD_CONFIG]\n  }]\n}, {\n  type: MsalBroadcastService\n}, {\n  type: MsalService\n}, {\n  type: Location\n}, {\n  type: Router\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalGuard, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_GUARD_CONFIG]\n      }]\n    }, {\n      type: MsalBroadcastService\n    }, {\n      type: MsalService\n    }, {\n      type: ɵngcc1.Location\n    }, {\n      type: ɵngcc2.Router\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nclass MsalInterceptor {\n  constructor(msalInterceptorConfig, authService, location, msalBroadcastService, // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  document) {\n    this.msalInterceptorConfig = msalInterceptorConfig;\n    this.authService = authService;\n    this.location = location;\n    this.msalBroadcastService = msalBroadcastService;\n    this._document = document;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  intercept(req, next) {\n    if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\n      throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\n    }\n\n    this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\n    const scopes = this.getScopesForEndpoint(req.url, req.method); // If no scopes for endpoint, does not acquire token\n\n    if (!scopes || scopes.length === 0) {\n      this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\n      return next.handle(req);\n    } // Sets account as active account or first account\n\n\n    let account;\n\n    if (!!this.authService.instance.getActiveAccount()) {\n      this.authService.getLogger().verbose(\"Interceptor - active account selected\");\n      account = this.authService.instance.getActiveAccount();\n    } else {\n      this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\n      account = this.authService.instance.getAllAccounts()[0];\n    }\n\n    const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\" ? this.msalInterceptorConfig.authRequest(this.authService, req, {\n      account: account\n    }) : Object.assign(Object.assign({}, this.msalInterceptorConfig.authRequest), {\n      account\n    });\n    this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\n    this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\n    return this.acquireToken(authRequest, scopes, account).pipe(switchMap(result => {\n      this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\n      const headers = req.headers.set(\"Authorization\", `Bearer ${result.accessToken}`);\n      const requestClone = req.clone({\n        headers\n      });\n      return next.handle(requestClone);\n    }));\n  }\n  /**\r\n   * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\r\n   * @param authRequest Request\r\n   * @param scopes Array of scopes for the request\r\n   * @param account Account\r\n   * @returns Authentication result\r\n   */\n\n\n  acquireToken(authRequest, scopes, account) {\n    // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\n    return this.authService.acquireTokenSilent(Object.assign(Object.assign({}, authRequest), {\n      scopes,\n      account\n    })).pipe(catchError(() => {\n      this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\n      return this.msalBroadcastService.inProgress$.pipe(take(1), switchMap(status => {\n        if (status === InteractionStatus.None) {\n          return this.acquireTokenInteractively(authRequest, scopes);\n        }\n\n        return this.msalBroadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), take(1), switchMap(() => this.acquireToken(authRequest, scopes, account)));\n      }));\n    }), switchMap(result => {\n      if (!result.accessToken) {\n        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\n        return this.msalBroadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), take(1), switchMap(() => this.acquireTokenInteractively(authRequest, scopes)));\n      }\n\n      return of(result);\n    }));\n  }\n  /**\r\n   * Invoke interaction for the given set of scopes\r\n   * @param authRequest Request\r\n   * @param scopes Array of scopes for the request\r\n   * @returns Result from the interactive request\r\n   */\n\n\n  acquireTokenInteractively(authRequest, scopes) {\n    if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\n      this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\n      return this.authService.acquireTokenPopup(Object.assign(Object.assign({}, authRequest), {\n        scopes\n      }));\n    }\n\n    this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\n    const redirectStartPage = window.location.href;\n    this.authService.acquireTokenRedirect(Object.assign(Object.assign({}, authRequest), {\n      scopes,\n      redirectStartPage\n    }));\n    return EMPTY;\n  }\n  /**\r\n   * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n   * @param endpoint Url of the request\r\n   * @param httpMethod Http method of the request\r\n   * @returns Array of scopes, or null if not found\r\n   *\r\n   */\n\n\n  getScopesForEndpoint(endpoint, httpMethod) {\n    this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\"); // Ensures endpoints and protected resources compared are normalized\n\n    const normalizedEndpoint = this.location.normalize(endpoint);\n    const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\n    const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint); // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\n\n    if (matchingProtectedResources.absoluteResources.length > 0) {\n      return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\n    } else if (matchingProtectedResources.relativeResources.length > 0) {\n      return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\n    }\n\n    return null;\n  }\n  /**\r\n   * Finds resource endpoints that match request endpoint\r\n   * @param protectedResourcesEndpoints\r\n   * @param endpoint\r\n   * @returns\r\n   */\n\n\n  matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\n    const matchingResources = {\n      absoluteResources: [],\n      relativeResources: []\n    };\n    protectedResourcesEndpoints.forEach(key => {\n      // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\n      const normalizedKey = this.location.normalize(key);\n\n      if (StringUtils.matchPattern(normalizedKey, endpoint)) {\n        matchingResources.absoluteResources.push(key);\n      } // Get url components for relative urls\n\n\n      const absoluteKey = this.getAbsoluteUrl(key);\n      const keyComponents = new UrlString(absoluteKey).getUrlComponents();\n      const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\n      const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents(); // Normalized key should include query strings if applicable\n\n      const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath); // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\n\n      if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\") {\n        matchingResources.relativeResources.push(key);\n      }\n    });\n    return matchingResources;\n  }\n  /**\r\n   * Transforms relative urls to absolute urls\r\n   * @param url\r\n   * @returns\r\n   */\n\n\n  getAbsoluteUrl(url) {\n    const link = this._document.createElement(\"a\");\n\n    link.href = url;\n    return link.href;\n  }\n  /**\r\n   * Finds scopes from first matching endpoint with HTTP method that matches request\r\n   * @param protectedResourceMap Protected resource map\r\n   * @param endpointArray Array of resources that match request endpoint\r\n   * @param httpMethod Http method of the request\r\n   * @returns\r\n   */\n\n\n  matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\n    const allMatchedScopes = []; // Check each matched endpoint for matching HttpMethod and scopes\n\n    endpointArray.forEach(matchedEndpoint => {\n      const scopesForEndpoint = [];\n      const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint); // Return if resource is unprotected\n\n      if (methodAndScopesArray === null) {\n        allMatchedScopes.push(null);\n        return;\n      }\n\n      methodAndScopesArray.forEach(entry => {\n        // Entry is either array of scopes or ProtectedResourceScopes object\n        if (typeof entry === \"string\") {\n          scopesForEndpoint.push(entry);\n        } else {\n          // Ensure methods being compared are normalized\n          const normalizedRequestMethod = httpMethod.toLowerCase();\n          const normalizedResourceMethod = entry.httpMethod.toLowerCase(); // Method in protectedResourceMap matches request http method\n\n          if (normalizedResourceMethod === normalizedRequestMethod) {\n            // Validate if scopes comes null to unprotect the resource in a certain http method\n            if (entry.scopes === null) {\n              allMatchedScopes.push(null);\n            } else {\n              entry.scopes.forEach(scope => {\n                scopesForEndpoint.push(scope);\n              });\n            }\n          }\n        }\n      }); // Only add to all scopes if scopes for endpoint and method is found\n\n      if (scopesForEndpoint.length > 0) {\n        allMatchedScopes.push(scopesForEndpoint);\n      }\n    });\n\n    if (allMatchedScopes.length > 0) {\n      if (allMatchedScopes.length > 1) {\n        this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\n      } // Returns scopes for first matching endpoint\n\n\n      return allMatchedScopes[0];\n    }\n\n    return null;\n  }\n\n}\n\nMsalInterceptor.ɵfac = function MsalInterceptor_Factory(t) {\n  return new (t || MsalInterceptor)(ɵngcc0.ɵɵinject(MSAL_INTERCEPTOR_CONFIG), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(MsalBroadcastService), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nMsalInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MsalInterceptor,\n  factory: MsalInterceptor.ɵfac\n});\n\nMsalInterceptor.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MSAL_INTERCEPTOR_CONFIG]\n  }]\n}, {\n  type: MsalService\n}, {\n  type: Location\n}, {\n  type: MsalBroadcastService\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INTERCEPTOR_CONFIG]\n      }]\n    }, {\n      type: MsalService\n    }, {\n      type: ɵngcc1.Location\n    }, {\n      type: MsalBroadcastService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nclass MsalRedirectComponent {\n  constructor(authService) {\n    this.authService = authService;\n  }\n\n  ngOnInit() {\n    this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\n    this.authService.initialize().pipe(concatMap(() => {\n      return this.authService.handleRedirectObservable();\n    })).subscribe();\n  }\n\n}\n\nMsalRedirectComponent.ɵfac = function MsalRedirectComponent_Factory(t) {\n  return new (t || MsalRedirectComponent)(ɵngcc0.ɵɵdirectiveInject(MsalService));\n};\n\nMsalRedirectComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MsalRedirectComponent,\n  selectors: [[\"app-redirect\"]],\n  decls: 0,\n  vars: 0,\n  template: function MsalRedirectComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\nMsalRedirectComponent.ctorParameters = () => [{\n  type: MsalService\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalRedirectComponent, [{\n    type: Component,\n    args: [{\n      selector: \"app-redirect\",\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: MsalService\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nclass MsalModule {\n  static forRoot(msalInstance, guardConfig, interceptorConfig) {\n    return {\n      ngModule: MsalModule,\n      providers: [{\n        provide: MSAL_INSTANCE,\n        useValue: msalInstance\n      }, {\n        provide: MSAL_GUARD_CONFIG,\n        useValue: guardConfig\n      }, {\n        provide: MSAL_INTERCEPTOR_CONFIG,\n        useValue: interceptorConfig\n      }, MsalService]\n    };\n  }\n\n}\n\nMsalModule.ɵfac = function MsalModule_Factory(t) {\n  return new (t || MsalModule)();\n};\n\nMsalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MsalModule\n});\nMsalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MsalGuard, MsalBroadcastService],\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MsalRedirectComponent],\n      imports: [CommonModule],\n      providers: [MsalGuard, MsalBroadcastService]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MsalModule, {\n    declarations: function () {\n      return [MsalRedirectComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    }\n  });\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\r\n */\n\n\nclass MsalCustomNavigationClient extends NavigationClient {\n  constructor(authService, router, location) {\n    super();\n    this.authService = authService;\n    this.router = router;\n    this.location = location;\n  }\n\n  navigateInternal(url, options) {\n    const _super = Object.create(null, {\n      navigateInternal: {\n        get: () => super.navigateInternal\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\n      this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\n      this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`); // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\n\n      if (options.noHistory) {\n        return _super.navigateInternal.call(this, url, options);\n      } else {\n        // Normalizing newUrl if no query string\n        const urlComponents = new UrlString(url).getUrlComponents();\n        const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\n        this.router.navigateByUrl(newUrl, {\n          replaceUrl: options.noHistory\n        });\n      }\n\n      return Promise.resolve(options.noHistory);\n    });\n  }\n\n}\n\nMsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(t) {\n  return new (t || MsalCustomNavigationClient)(ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc1.Location));\n};\n\nMsalCustomNavigationClient.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MsalCustomNavigationClient,\n  factory: MsalCustomNavigationClient.ɵfac\n});\n\nMsalCustomNavigationClient.ctorParameters = () => [{\n  type: MsalService\n}, {\n  type: Router\n}, {\n  type: Location\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalCustomNavigationClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MsalService\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: ɵngcc1.Location\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MSAL_BROADCAST_CONFIG, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService, version };","map":{"version":3,"names":["InjectionToken","Injectable","Inject","Optional","VERSION","Component","NgModule","Location","DOCUMENT","CommonModule","WrapperSKU","InteractionStatus","EventMessageUtils","InteractionType","BrowserConfigurationAuthError","UrlString","BrowserUtils","StringUtils","NavigationClient","from","ReplaySubject","Subject","BehaviorSubject","of","EMPTY","Router","map","concatMap","catchError","switchMap","take","filter","__awaiter","ɵngcc0","ɵngcc1","ɵngcc2","MSAL_INSTANCE","MSAL_GUARD_CONFIG","MSAL_INTERCEPTOR_CONFIG","MSAL_BROADCAST_CONFIG","name","version","MsalService","constructor","instance","location","hash","path","split","pop","redirectHash","initializeWrapperLibrary","Angular","initialize","acquireTokenPopup","request","acquireTokenRedirect","acquireTokenSilent","silentRequest","handleRedirectObservable","handleRedirectPromise","loginPopup","loginRedirect","logout","logoutRequest","logoutRedirect","logoutPopup","ssoSilent","getLogger","logger","clone","setLogger","ɵfac","MsalService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","type","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","MsalBroadcastService","msalInstance","authService","msalBroadcastConfig","eventsToReplay","verbose","_msalSubject","msalSubject$","asObservable","_inProgress","Startup","inProgress$","addEventCallback","message","next","status","getInteractionStatusFromEvent","value","eventType","MsalBroadcastService_Factory","MsalGuard","msalGuardConfig","msalBroadcastService","router","subscribe","parseUrl","url","getDestinationUrl","baseElements","document","getElementsByTagName","baseUrl","normalize","length","href","window","origin","pathUrl","prepareExternalUrl","startsWith","loginInteractively","state","authRequest","Object","assign","interactionType","Popup","pipe","response","setActiveAccount","account","redirectStartPage","activateHelper","Redirect","hashContainsKnownProperties","isInIframe","getConfiguration","system","allowRedirectInIframe","warning","info","loginFailedRoute","currentPath","getAllAccounts","urlContainsCode","includesCode","fragmentContainsCode","root","fragment","hashRouting","indexOf","error","errorPii","parseInt","major","lastIndexOf","canActivate","route","canActivateChild","canLoad","MsalGuard_Factory","MsalInterceptor","msalInterceptorConfig","_document","intercept","req","scopes","getScopesForEndpoint","method","handle","getActiveAccount","infoPii","acquireToken","result","headers","set","accessToken","requestClone","None","acquireTokenInteractively","endpoint","httpMethod","normalizedEndpoint","protectedResourcesArray","Array","protectedResourceMap","keys","matchingProtectedResources","matchResourcesToEndpoint","absoluteResources","matchScopesToEndpoint","relativeResources","protectedResourcesEndpoints","matchingResources","forEach","key","normalizedKey","matchPattern","push","absoluteKey","getAbsoluteUrl","keyComponents","getUrlComponents","absoluteEndpoint","endpointComponents","relativeNormalizedKey","QueryString","AbsolutePath","HostNameAndPort","link","createElement","endpointArray","allMatchedScopes","matchedEndpoint","scopesForEndpoint","methodAndScopesArray","get","entry","normalizedRequestMethod","toLowerCase","normalizedResourceMethod","scope","MsalInterceptor_Factory","MsalRedirectComponent","ngOnInit","MsalRedirectComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","MsalRedirectComponent_Template","rf","ctx","encapsulation","selector","MsalModule","forRoot","guardConfig","interceptorConfig","ngModule","providers","provide","useValue","MsalModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","ngJitMode","ɵɵsetNgModuleScope","MsalCustomNavigationClient","navigateInternal","options","_super","create","trace","verbosePii","noHistory","call","urlComponents","newUrl","navigateByUrl","replaceUrl","Promise","resolve","MsalCustomNavigationClient_Factory"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-angular/__ivy_ngcc__/fesm2015/azure-msal-angular.js"],"sourcesContent":["import { InjectionToken, Injectable, Inject, Optional, VERSION, Component, NgModule } from '@angular/core';\nimport { Location, DOCUMENT, CommonModule } from '@angular/common';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, ReplaySubject, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { map, concatMap, catchError, switchMap, take, filter } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/router';\nconst MSAL_INSTANCE = new InjectionToken(\"MSAL_INSTANCE\");\r\nconst MSAL_GUARD_CONFIG = new InjectionToken(\"MSAL_GUARD_CONFIG\");\r\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken(\"MSAL_INTERCEPTOR_CONFIG\");\r\nconst MSAL_BROADCAST_CONFIG = new InjectionToken(\"MSAL_BROADCAST_CONFIG\");\n\n/* eslint-disable header/header */\r\nconst name = \"@azure/msal-angular\";\r\nconst version = \"2.5.12\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalService {\r\n    constructor(instance, location) {\r\n        this.instance = instance;\r\n        this.location = location;\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n    initialize() {\r\n        return from(this.instance.initialize());\r\n    }\r\n    acquireTokenPopup(request) {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request) {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest) {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(hash) {\r\n        return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\r\n    }\r\n    loginPopup(request) {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request) {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest) {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    logoutRedirect(logoutRequest) {\r\n        return from(this.instance.logoutRedirect(logoutRequest));\r\n    }\r\n    logoutPopup(logoutRequest) {\r\n        return from(this.instance.logoutPopup(logoutRequest));\r\n    }\r\n    ssoSilent(request) {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger() {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger) {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n}\nMsalService.ɵfac = function MsalService_Factory(t) { return new (t || MsalService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(ɵngcc1.Location)); };\nMsalService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalService, factory: MsalService.ɵfac });\r\nMsalService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_INSTANCE,] }] },\r\n    { type: Location }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_INSTANCE]\n            }] }, { type: ɵngcc1.Location }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalBroadcastService {\r\n    constructor(msalInstance, authService, msalBroadcastConfig) {\r\n        this.msalInstance = msalInstance;\r\n        this.authService = authService;\r\n        this.msalBroadcastConfig = msalBroadcastConfig;\r\n        // Make _msalSubject a ReplaySubject if configured to replay past events\r\n        if (this.msalBroadcastConfig && this.msalBroadcastConfig.eventsToReplay > 0) {\r\n            this.authService.getLogger().verbose(`BroadcastService - replayPastEvents set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`);\r\n            this._msalSubject = new ReplaySubject(this.msalBroadcastConfig.eventsToReplay);\r\n        }\r\n        else {\r\n            // Defaults to _msalSubject being a Subject\r\n            this._msalSubject = new Subject();\r\n        }\r\n        this.msalSubject$ = this._msalSubject.asObservable();\r\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\r\n        this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n        this.msalInstance.addEventCallback((message) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, this._inProgress.value);\r\n            if (status !== null) {\r\n                this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\nMsalBroadcastService.ɵfac = function MsalBroadcastService_Factory(t) { return new (t || MsalBroadcastService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(MSAL_BROADCAST_CONFIG, 8)); };\nMsalBroadcastService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalBroadcastService, factory: MsalBroadcastService.ɵfac });\r\nMsalBroadcastService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_INSTANCE,] }] },\r\n    { type: MsalService },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MSAL_BROADCAST_CONFIG,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalBroadcastService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_INSTANCE]\n            }] }, { type: MsalService }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MSAL_BROADCAST_CONFIG]\n            }] }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalGuard {\r\n    constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\r\n        this.msalGuardConfig = msalGuardConfig;\r\n        this.msalBroadcastService = msalBroadcastService;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this.router = router;\r\n        // Subscribing so events in MsalGuard will set inProgress$ observable\r\n        this.msalBroadcastService.inProgress$.subscribe();\r\n    }\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url\r\n     */\r\n    parseUrl(url) {\r\n        return this.router.parseUrl(url);\r\n    }\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path) {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    loginInteractively(state) {\r\n        const authRequest = typeof this.msalGuardConfig.authRequest === \"function\"\r\n            ? this.msalGuardConfig.authRequest(this.authService, state)\r\n            : Object.assign({}, this.msalGuardConfig.authRequest);\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup(authRequest)\r\n                .pipe(map((response) => {\r\n                this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                this.authService.instance.setActiveAccount(response.account);\r\n                return true;\r\n            }));\r\n        }\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(state.url);\r\n        return this.authService.loginRedirect(Object.assign({ redirectStartPage }, authRequest))\r\n            .pipe(map(() => false));\r\n    }\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state\r\n     */\r\n    activateHelper(state) {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         */\r\n        if (typeof window !== \"undefined\") {\r\n            if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe() && !this.authService.instance.getConfiguration().system.allowRedirectInIframe) {\r\n                this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n                return of(false);\r\n            }\r\n        }\r\n        else {\r\n            this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\r\n            return of(true);\r\n        }\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n        // Capture current path before it gets changed by handleRedirectObservable\r\n        const currentPath = this.location.path(true);\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(concatMap(() => {\r\n            if (!this.authService.instance.getAllAccounts().length) {\r\n                if (state) {\r\n                    this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                    return this.loginInteractively(state);\r\n                }\r\n                this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                return of(false);\r\n            }\r\n            this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\");\r\n            // Prevent navigating the app to /#code= or /code=\r\n            if (state) {\r\n                /*\r\n                 * Path routing:\r\n                 * state.url: /#code=...\r\n                 * state.root.fragment: code=...\r\n                 */\r\n                /*\r\n                 * Hash routing:\r\n                 * state.url: /code\r\n                 * state.root.fragment: null\r\n                 */\r\n                const urlContainsCode = this.includesCode(state.url);\r\n                const fragmentContainsCode = !!state.root && !!state.root.fragment && this.includesCode(`#${state.root.fragment}`);\r\n                const hashRouting = this.location.prepareExternalUrl(state.url).indexOf(\"#\") === 0;\r\n                // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\r\n                if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\r\n                    this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\");\r\n                    // Path routing (navigate to current path without hash)\r\n                    if (currentPath.indexOf(\"#\") > -1) {\r\n                        return of(this.parseUrl(this.location.path()));\r\n                    }\r\n                    // Hash routing (navigate to root path)\r\n                    return of(this.parseUrl(\"\"));\r\n                }\r\n            }\r\n            return of(true);\r\n        }), catchError((error) => {\r\n            this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\r\n            this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\r\n            /**\r\n             * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n             * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n             */\r\n            if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\r\n                this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                return of(this.loginFailedRoute);\r\n            }\r\n            return of(false);\r\n        }));\r\n    }\r\n    includesCode(path) {\r\n        return (path.lastIndexOf(\"/code\") > -1 &&\r\n            path.lastIndexOf(\"/code\") === path.length - \"/code\".length) || // path.endsWith(\"/code\")\r\n            path.indexOf(\"#code=\") > -1 ||\r\n            path.indexOf(\"&code=\") > -1;\r\n    }\r\n    canActivate(route, state) {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n    canActivateChild(route, state) {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n    canLoad() {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        // @ts-ignore\r\n        return this.activateHelper();\r\n    }\r\n}\nMsalGuard.ɵfac = function MsalGuard_Factory(t) { return new (t || MsalGuard)(ɵngcc0.ɵɵinject(MSAL_GUARD_CONFIG), ɵngcc0.ɵɵinject(MsalBroadcastService), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(ɵngcc2.Router)); };\nMsalGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalGuard, factory: MsalGuard.ɵfac });\r\nMsalGuard.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_GUARD_CONFIG,] }] },\r\n    { type: MsalBroadcastService },\r\n    { type: MsalService },\r\n    { type: Location },\r\n    { type: Router }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalGuard, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_GUARD_CONFIG]\n            }] }, { type: MsalBroadcastService }, { type: MsalService }, { type: ɵngcc1.Location }, { type: ɵngcc2.Router }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalInterceptor {\r\n    constructor(msalInterceptorConfig, authService, location, msalBroadcastService, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n    document) {\r\n        this.msalInterceptorConfig = msalInterceptorConfig;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this.msalBroadcastService = msalBroadcastService;\r\n        this._document = document;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    intercept(req, next) {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url, req.method);\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n        // Sets account as active account or first account\r\n        let account;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        }\r\n        else {\r\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n        const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\"\r\n            ? this.msalInterceptorConfig.authRequest(this.authService, req, { account: account })\r\n            : Object.assign(Object.assign({}, this.msalInterceptorConfig.authRequest), { account });\r\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n        return this.acquireToken(authRequest, scopes, account)\r\n            .pipe(switchMap((result) => {\r\n            this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n            const headers = req.headers\r\n                .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n            const requestClone = req.clone({ headers });\r\n            return next.handle(requestClone);\r\n        }));\r\n    }\r\n    /**\r\n     * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @param account Account\r\n     * @returns Authentication result\r\n     */\r\n    acquireToken(authRequest, scopes, account) {\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent(Object.assign(Object.assign({}, authRequest), { scopes, account }))\r\n            .pipe(catchError(() => {\r\n            this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n            return this.msalBroadcastService.inProgress$\r\n                .pipe(take(1), switchMap((status) => {\r\n                if (status === InteractionStatus.None) {\r\n                    return this.acquireTokenInteractively(authRequest, scopes);\r\n                }\r\n                return this.msalBroadcastService.inProgress$\r\n                    .pipe(filter((status) => status === InteractionStatus.None), take(1), switchMap(() => this.acquireToken(authRequest, scopes, account)));\r\n            }));\r\n        }), switchMap((result) => {\r\n            if (!result.accessToken) {\r\n                this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                return this.msalBroadcastService.inProgress$\r\n                    .pipe(filter((status) => status === InteractionStatus.None), take(1), switchMap(() => this.acquireTokenInteractively(authRequest, scopes)));\r\n            }\r\n            return of(result);\r\n        }));\r\n    }\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    acquireTokenInteractively(authRequest, scopes) {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup(Object.assign(Object.assign({}, authRequest), { scopes }));\r\n        }\r\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect(Object.assign(Object.assign({}, authRequest), { scopes, redirectStartPage }));\r\n        return EMPTY;\r\n    }\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    getScopesForEndpoint(endpoint, httpMethod) {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n        // Ensures endpoints and protected resources compared are normalized\r\n        const normalizedEndpoint = this.location.normalize(endpoint);\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\r\n        // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\r\n        if (matchingProtectedResources.absoluteResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\r\n        }\r\n        else if (matchingProtectedResources.relativeResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint\r\n     * @returns\r\n     */\r\n    matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\r\n        const matchingResources = { absoluteResources: [], relativeResources: [] };\r\n        protectedResourcesEndpoints.forEach(key => {\r\n            // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\r\n            const normalizedKey = this.location.normalize(key);\r\n            if (StringUtils.matchPattern(normalizedKey, endpoint)) {\r\n                matchingResources.absoluteResources.push(key);\r\n            }\r\n            // Get url components for relative urls\r\n            const absoluteKey = this.getAbsoluteUrl(key);\r\n            const keyComponents = new UrlString(absoluteKey).getUrlComponents();\r\n            const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\r\n            const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents();\r\n            // Normalized key should include query strings if applicable\r\n            const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath);\r\n            // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\r\n            if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\") {\r\n                matchingResources.relativeResources.push(key);\r\n            }\r\n        });\r\n        return matchingResources;\r\n    }\r\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url\r\n     * @returns\r\n     */\r\n    getAbsoluteUrl(url) {\r\n        const link = this._document.createElement(\"a\");\r\n        link.href = url;\r\n        return link.href;\r\n    }\r\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns\r\n     */\r\n    matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\r\n        const allMatchedScopes = [];\r\n        // Check each matched endpoint for matching HttpMethod and scopes\r\n        endpointArray.forEach(matchedEndpoint => {\r\n            const scopesForEndpoint = [];\r\n            const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\r\n            // Return if resource is unprotected\r\n            if (methodAndScopesArray === null) {\r\n                allMatchedScopes.push(null);\r\n                return;\r\n            }\r\n            methodAndScopesArray.forEach(entry => {\r\n                // Entry is either array of scopes or ProtectedResourceScopes object\r\n                if (typeof entry === \"string\") {\r\n                    scopesForEndpoint.push(entry);\r\n                }\r\n                else {\r\n                    // Ensure methods being compared are normalized\r\n                    const normalizedRequestMethod = httpMethod.toLowerCase();\r\n                    const normalizedResourceMethod = entry.httpMethod.toLowerCase();\r\n                    // Method in protectedResourceMap matches request http method\r\n                    if (normalizedResourceMethod === normalizedRequestMethod) {\r\n                        // Validate if scopes comes null to unprotect the resource in a certain http method\r\n                        if (entry.scopes === null) {\r\n                            allMatchedScopes.push(null);\r\n                        }\r\n                        else {\r\n                            entry.scopes.forEach((scope) => {\r\n                                scopesForEndpoint.push(scope);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // Only add to all scopes if scopes for endpoint and method is found\r\n            if (scopesForEndpoint.length > 0) {\r\n                allMatchedScopes.push(scopesForEndpoint);\r\n            }\r\n        });\r\n        if (allMatchedScopes.length > 0) {\r\n            if (allMatchedScopes.length > 1) {\r\n                this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\r\n            }\r\n            // Returns scopes for first matching endpoint\r\n            return allMatchedScopes[0];\r\n        }\r\n        return null;\r\n    }\r\n}\nMsalInterceptor.ɵfac = function MsalInterceptor_Factory(t) { return new (t || MsalInterceptor)(ɵngcc0.ɵɵinject(MSAL_INTERCEPTOR_CONFIG), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(MsalBroadcastService), ɵngcc0.ɵɵinject(DOCUMENT)); };\nMsalInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalInterceptor, factory: MsalInterceptor.ɵfac });\r\nMsalInterceptor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_INTERCEPTOR_CONFIG,] }] },\r\n    { type: MsalService },\r\n    { type: Location },\r\n    { type: MsalBroadcastService },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_INTERCEPTOR_CONFIG]\n            }] }, { type: MsalService }, { type: ɵngcc1.Location }, { type: MsalBroadcastService }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalRedirectComponent {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n    }\r\n    ngOnInit() {\r\n        this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\r\n        this.authService.initialize().pipe(concatMap(() => {\r\n            return this.authService.handleRedirectObservable();\r\n        })).subscribe();\r\n    }\r\n}\nMsalRedirectComponent.ɵfac = function MsalRedirectComponent_Factory(t) { return new (t || MsalRedirectComponent)(ɵngcc0.ɵɵdirectiveInject(MsalService)); };\nMsalRedirectComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MsalRedirectComponent, selectors: [[\"app-redirect\"]], decls: 0, vars: 0, template: function MsalRedirectComponent_Template(rf, ctx) { }, encapsulation: 2 });\r\nMsalRedirectComponent.ctorParameters = () => [\r\n    { type: MsalService }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalRedirectComponent, [{\n        type: Component,\n        args: [{\n                selector: \"app-redirect\",\n                template: \"\"\n            }]\n    }], function () { return [{ type: MsalService }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalModule {\r\n    static forRoot(msalInstance, guardConfig, interceptorConfig) {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n}\nMsalModule.ɵfac = function MsalModule_Factory(t) { return new (t || MsalModule)(); };\nMsalModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MsalModule });\nMsalModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MsalGuard,\n        MsalBroadcastService\n    ], imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MsalRedirectComponent],\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    MsalGuard,\n                    MsalBroadcastService\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MsalModule, { declarations: function () { return [MsalRedirectComponent]; }, imports: function () { return [CommonModule]; } }); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\r\n */\r\nclass MsalCustomNavigationClient extends NavigationClient {\r\n    constructor(authService, router, location) {\r\n        super();\r\n        this.authService = authService;\r\n        this.router = router;\r\n        this.location = location;\r\n    }\r\n    navigateInternal(url, options) {\r\n        const _super = Object.create(null, {\r\n            navigateInternal: { get: () => super.navigateInternal }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\r\n            this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\r\n            this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\r\n            // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\r\n            if (options.noHistory) {\r\n                return _super.navigateInternal.call(this, url, options);\r\n            }\r\n            else {\r\n                // Normalizing newUrl if no query string\r\n                const urlComponents = new UrlString(url).getUrlComponents();\r\n                const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\r\n                this.router.navigateByUrl(newUrl, { replaceUrl: options.noHistory });\r\n            }\r\n            return Promise.resolve(options.noHistory);\r\n        });\r\n    }\r\n}\nMsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(t) { return new (t || MsalCustomNavigationClient)(ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc1.Location)); };\nMsalCustomNavigationClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalCustomNavigationClient, factory: MsalCustomNavigationClient.ɵfac });\r\nMsalCustomNavigationClient.ctorParameters = () => [\r\n    { type: MsalService },\r\n    { type: Router },\r\n    { type: Location }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalCustomNavigationClient, [{\n        type: Injectable\n    }], function () { return [{ type: MsalService }, { type: ɵngcc2.Router }, { type: ɵngcc1.Location }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MSAL_BROADCAST_CONFIG, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService, version };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}