{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler =\n/** @class */\nfunction () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n        return [2\n        /*return*/\n        , this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n            this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            } // Acquire token with retrieved code.\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler };","map":{"version":3,"names":["__awaiter","__generator","PerformanceEvents","StringUtils","ClientAuthError","ServerError","AuthorityFactory","BrowserAuthError","BrowserAuthErrorMessage","TemporaryCacheKeys","InteractionHandler","authCodeModule","storageImpl","authCodeRequest","logger","performanceClient","authModule","browserStorage","prototype","handleCodeResponseFromHash","locationHash","state","authority","networkModule","stateKey","requestState","authCodeResponse","_a","addQueueMeasurement","HandleCodeResponseFromHash","correlationId","verbose","isEmpty","createEmptyHashError","generateStateKey","getTemporaryCache","createStateNotFoundError","handleFragmentResponse","e","subError","userCancelledError","code","createUserCancelledError","setPreQueueTime","HandleCodeResponseFromServer","handleCodeResponseFromServer","validateNonce","nonceKey","cachedNonce","cachedCcsCred","tokenResponse","label","trace","generateNonceKey","cloud_instance_host_name","UpdateTokenEndpointAuthority","updateTokenEndpointAuthority","sent","nonce","undefined","client_info","clientInfo","checkCcsCredentials","ccsCredential","AuthClientAcquireToken","acquireToken","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","cloudInstanceAuthority","tenant","createDiscoveredInstance","options","updateAuthority","CCS_CREDENTIAL","JSON","parse","error","errorPii"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nvar InteractionHandler = /** @class */ (function () {\r\n    function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var stateKey, requestState, authCodeResponse;\r\n            return __generator(this, function (_a) {\r\n                this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\r\n                this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n                // Check that location hash isn't empty.\r\n                if (StringUtils.isEmpty(locationHash)) {\r\n                    throw BrowserAuthError.createEmptyHashError(locationHash);\r\n                }\r\n                stateKey = this.browserStorage.generateStateKey(state);\r\n                requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n                if (!requestState) {\r\n                    throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n                }\r\n                try {\r\n                    authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n                }\r\n                catch (e) {\r\n                    if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\r\n                        // Translate server error caused by user closing native prompt to corresponding first class MSAL error\r\n                        throw BrowserAuthError.createUserCancelledError();\r\n                    }\r\n                    else {\r\n                        throw e;\r\n                    }\r\n                }\r\n                this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n                return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Process auth code response from AAD\r\n     * @param authCodeResponse\r\n     * @param state\r\n     * @param authority\r\n     * @param networkModule\r\n     * @returns\r\n     */\r\n    InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\r\n        if (validateNonce === void 0) { validateNonce = true; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n                        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\r\n                        stateKey = this.browserStorage.generateStateKey(state);\r\n                        requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n                        if (!requestState) {\r\n                            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n                        }\r\n                        nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n                        // Assign code to request\r\n                        this.authCodeRequest.code = authCodeResponse.code;\r\n                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\r\n                        if (validateNonce) {\r\n                            authCodeResponse.nonce = cachedNonce || undefined;\r\n                        }\r\n                        authCodeResponse.state = requestState;\r\n                        // Add CCS parameters if available\r\n                        if (authCodeResponse.client_info) {\r\n                            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n                        }\r\n                        else {\r\n                            cachedCcsCred = this.checkCcsCredentials();\r\n                            if (cachedCcsCred) {\r\n                                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n                            }\r\n                        }\r\n                        // Acquire token with retrieved code.\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\r\n                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\r\n                    case 3:\r\n                        tokenResponse = _a.sent();\r\n                        this.browserStorage.cleanRequestByState(state);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname\r\n     * @param authority\r\n     * @param networkModule\r\n     */\r\n    InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cloudInstanceAuthorityUri, cloudInstanceAuthority;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n                        cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\r\n                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];\r\n                    case 1:\r\n                        cloudInstanceAuthority = _a.sent();\r\n                        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    InteractionHandler.prototype.checkCcsCredentials = function () {\r\n        // Look up ccs credential in temp cache\r\n        var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred);\r\n            }\r\n            catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return InteractionHandler;\r\n}());\n\nexport { InteractionHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}