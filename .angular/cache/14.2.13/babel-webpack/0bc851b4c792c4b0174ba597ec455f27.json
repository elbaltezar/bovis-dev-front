{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\n\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet(inputScopes) {\n    var _this = this; // Filter empty string and null/undefined array items\n\n\n    var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : []; // Validate and filter scopes (validate function throws if validation fails)\n\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n\n\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || Constants.EMPTY_STRING;\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Creates the set of scopes to search for in cache lookups\r\n   * @param inputScopeString\r\n   * @returns\r\n   */\n\n\n  ScopeSet.createSearchScopes = function (inputScopeString) {\n    var scopeSet = new ScopeSet(inputScopeString);\n\n    if (!scopeSet.containsOnlyOIDCScopes()) {\n      scopeSet.removeOIDCScopes();\n    } else {\n      scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n    }\n\n    return scopeSet;\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n\n\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes); // compare lowercase scopes\n\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n\n\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n\n\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n\n\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n\n\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n\n\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    } // Do not allow OIDC scopes to be the only intersecting scopes\n\n\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n\n\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n\n\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n\n\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n\n\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":{"version":3,"names":["__spreadArrays","ClientConfigurationError","StringUtils","ClientAuthError","Constants","OIDC_SCOPES","ScopeSet","inputScopes","_this","scopeArr","trimArrayEntries","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","scope","add","fromString","inputScopeString","scopeString","EMPTY_STRING","split","createSearchScopes","scopeSet","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","OFFLINE_ACCESS_SCOPE","prototype","length","createEmptyScopesArrayError","containsScope","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","isEmpty","has","toLowerCase","containsScopeSet","size","asArray","every","defaultScopeCount","defaultScope","appendScope","newScope","trim","appendScopes","newScopes","e","createAppendScopeSetError","createRemoveEmptyScopeFromSetError","delete","unionScopeSets","otherScopes","createEmptyInputScopeSetError","unionScopes","intersectingScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","val","push","printScopes","join"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/request/ScopeSet.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet(inputScopes) {\r\n        var _this = this;\r\n        // Filter empty string and null/undefined array items\r\n        var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\r\n        var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(filteredInput);\r\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    ScopeSet.fromString = function (inputScopeString) {\r\n        var scopeString = inputScopeString || Constants.EMPTY_STRING;\r\n        var inputScopes = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    };\r\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString\r\n     * @returns\r\n     */\r\n    ScopeSet.createSearchScopes = function (inputScopeString) {\r\n        var scopeSet = new ScopeSet(inputScopeString);\r\n        if (!scopeSet.containsOnlyOIDCScopes()) {\r\n            scopeSet.removeOIDCScopes();\r\n        }\r\n        else {\r\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return scopeSet;\r\n    };\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    ScopeSet.prototype.validateInputScopes = function (inputScopes) {\r\n        // Check if scopes are required but not given or is an empty array\r\n        if (!inputScopes || inputScopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError();\r\n        }\r\n    };\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.containsScope = function (scope) {\r\n        var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\r\n    };\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    ScopeSet.prototype.containsScopeSet = function (scopeSet) {\r\n        var _this = this;\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));\r\n    };\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    ScopeSet.prototype.containsOnlyOIDCScopes = function () {\r\n        var _this = this;\r\n        var defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            if (_this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n        return this.scopes.size === defaultScopeCount;\r\n    };\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    ScopeSet.prototype.appendScope = function (newScope) {\r\n        if (!StringUtils.isEmpty(newScope)) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    };\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    ScopeSet.prototype.appendScopes = function (newScopes) {\r\n        var _this = this;\r\n        try {\r\n            newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createAppendScopeSetError(e);\r\n        }\r\n    };\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.removeScope = function (scope) {\r\n        if (StringUtils.isEmpty(scope)) {\r\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    };\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    ScopeSet.prototype.removeOIDCScopes = function () {\r\n        var _this = this;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            _this.scopes.delete(defaultScope);\r\n        });\r\n    };\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.unionScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        var unionScopes = new Set(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        return unionScopes;\r\n    };\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        var unionScopes = this.unionScopeSets(otherScopes);\r\n        var sizeOtherScopes = otherScopes.getScopeCount();\r\n        var sizeThisScopes = this.getScopeCount();\r\n        var sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\r\n    };\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    ScopeSet.prototype.getScopeCount = function () {\r\n        return this.scopes.size;\r\n    };\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    ScopeSet.prototype.asArray = function () {\r\n        var array = [];\r\n        this.scopes.forEach(function (val) { return array.push(val); });\r\n        return array;\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    ScopeSet.prototype.printScopes = function () {\r\n        if (this.scopes) {\r\n            var scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    ScopeSet.prototype.printScopesLowerCase = function () {\r\n        return this.printScopes().toLowerCase();\r\n    };\r\n    return ScopeSet;\r\n}());\n\nexport { ScopeSet };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}