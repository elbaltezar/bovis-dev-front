{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { AuthToken, CacheRecord, Authority, AccountEntity, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Token cache manager\r\n */\n\nvar TokenCache =\n/** @class */\nfunction () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  } // Move getAllAccounts here and cache utility APIs\n\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n\n\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n\n    var idToken = new AuthToken(response.id_token, this.cryptoObj);\n    var cacheRecord;\n    var authority;\n\n    if (request.account) {\n      var cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger); // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n\n    return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\n  };\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n\n\n  TokenCache.prototype.loadAccount = function (idToken, environment, clientInfo, authorityType, requestHomeAccountId) {\n    var homeAccountId;\n\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\n    }\n\n    if (!homeAccountId) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\n    }\n\n    var accountEntity = clientInfo ? AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n\n    var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n\n\n  TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, authority) {\n    var _a, _b, _c;\n\n    var accessToken = Constants.EMPTY_STRING;\n    var responseScopes = [];\n    var expiresOn = null;\n    var extExpiresOn;\n\n    if (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n\n    var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n    var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) ? cacheRecord.account.getAccountInfo() : null,\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: ((_b = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\n      msGraphHost: ((_c = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  };\n\n  return TokenCache;\n}();\n\nexport { TokenCache };","map":{"version":3,"names":["AuthToken","CacheRecord","Authority","AccountEntity","IdTokenEntity","ScopeSet","AccessTokenEntity","RefreshTokenEntity","Constants","BrowserAuthError","TokenCache","configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","prototype","loadExternalTokens","request","response","options","info","id_token","createUnableToLoadTokenError","idToken","cacheRecord","authority","account","cacheRecordAccount","loadAccount","environment","undefined","homeAccountId","loadIdToken","tenantId","loadAccessToken","loadRefreshToken","authorityUrl","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","hostnameAndPort","authorityType","tenant","client_info","generateAuthenticationResult","requestHomeAccountId","generateHomeAccountId","accountEntity","createAccount","createGenericAccount","verbose","setAccount","idTokenEntity","createIdTokenEntity","rawToken","clientId","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","printScopes","expiresOn","Date","getTime","accessTokenEntity","createAccessTokenEntity","setAccessTokenCredential","refresh_token","refreshTokenEntity","createRefreshTokenEntity","setRefreshTokenCredential","idTokenObj","_a","_b","_c","accessToken","EMPTY_STRING","responseScopes","extExpiresOn","secret","fromString","target","asArray","Number","uid","claims","oid","sub","tid","canonicalAuthority","uniqueId","getAccountInfo","idTokenClaims","fromCache","correlationId","requestId","familyId","tokenType","state","cloudGraphHostName","msGraphHost","code","fromNativeBroker"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/cache/TokenCache.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { AuthToken, CacheRecord, Authority, AccountEntity, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Token cache manager\r\n */\r\nvar TokenCache = /** @class */ (function () {\r\n    function TokenCache(configuration, storage, logger, cryptoObj) {\r\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\r\n        this.config = configuration;\r\n        this.storage = storage;\r\n        this.logger = logger;\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n    // Move getAllAccounts here and cache utility APIs\r\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */\r\n    TokenCache.prototype.loadExternalTokens = function (request, response, options) {\r\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\r\n        if (!response.id_token) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\r\n        }\r\n        var idToken = new AuthToken(response.id_token, this.cryptoObj);\r\n        var cacheRecord;\r\n        var authority;\r\n        if (request.account) {\r\n            var cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\r\n            cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\r\n        }\r\n        else if (request.authority) {\r\n            var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\r\n            var authorityOptions = {\r\n                protocolMode: this.config.auth.protocolMode,\r\n                knownAuthorities: this.config.auth.knownAuthorities,\r\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                authorityMetadata: this.config.auth.authorityMetadata,\r\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\r\n            };\r\n            authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\r\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\r\n            if (options.clientInfo) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\r\n                var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\r\n                cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\r\n            }\r\n            else if (response.client_info) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\r\n                var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\r\n                cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\r\n            }\r\n            else {\r\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\r\n            }\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\r\n        }\r\n        return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\r\n    };\r\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */\r\n    TokenCache.prototype.loadAccount = function (idToken, environment, clientInfo, authorityType, requestHomeAccountId) {\r\n        var homeAccountId;\r\n        if (requestHomeAccountId) {\r\n            homeAccountId = requestHomeAccountId;\r\n        }\r\n        else if (authorityType !== undefined && clientInfo) {\r\n            homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\r\n        }\r\n        if (!homeAccountId) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\r\n        }\r\n        var accountEntity = clientInfo ?\r\n            AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) :\r\n            AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading account\");\r\n            this.storage.setAccount(accountEntity);\r\n            return accountEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */\r\n    TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\r\n        var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading id token\");\r\n            this.storage.setIdTokenCredential(idTokenEntity);\r\n            return idTokenEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */\r\n    TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\r\n        if (!response.access_token) {\r\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\r\n            return null;\r\n        }\r\n        if (!response.expires_in) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\r\n        }\r\n        if (!options.extendedExpiresOn) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\r\n        }\r\n        var scopes = new ScopeSet(request.scopes).printScopes();\r\n        var expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);\r\n        var extendedExpiresOn = options.extendedExpiresOn;\r\n        var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading access token\");\r\n            this.storage.setAccessTokenCredential(accessTokenEntity);\r\n            return accessTokenEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */\r\n    TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\r\n        if (!response.refresh_token) {\r\n            this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\r\n            return null;\r\n        }\r\n        var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading refresh token\");\r\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\r\n            return refreshTokenEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */\r\n    TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, authority) {\r\n        var _a, _b, _c;\r\n        var accessToken = Constants.EMPTY_STRING;\r\n        var responseScopes = [];\r\n        var expiresOn = null;\r\n        var extExpiresOn;\r\n        if (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) {\r\n            accessToken = cacheRecord.accessToken.secret;\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n        }\r\n        var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\r\n        var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\r\n        return {\r\n            authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) ? cacheRecord.account.getAccountInfo() : null,\r\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n            accessToken: accessToken,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\r\n            requestId: Constants.EMPTY_STRING,\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: Constants.EMPTY_STRING,\r\n            tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\r\n            state: Constants.EMPTY_STRING,\r\n            cloudGraphHostName: ((_b = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\r\n            msGraphHost: ((_c = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\r\n            code: undefined,\r\n            fromNativeBroker: false\r\n        };\r\n    };\r\n    return TokenCache;\r\n}());\n\nexport { TokenCache };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,SAAjC,EAA4CC,aAA5C,EAA2DC,aAA3D,EAA0EC,QAA1E,EAAoFC,iBAApF,EAAuGC,kBAAvG,EAA2HC,SAA3H,QAA4I,oBAA5I;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;AAAe,YAAY;EACxC,SAASA,UAAT,CAAoBC,aAApB,EAAmCC,OAAnC,EAA4CC,MAA5C,EAAoDC,SAApD,EAA+D;IAC3D,KAAKC,oBAAL,GAA4B,OAAOC,MAAP,KAAkB,WAA9C;IACA,KAAKC,MAAL,GAAcN,aAAd;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACH,CAPuC,CAQxC;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIJ,UAAU,CAACQ,SAAX,CAAqBC,kBAArB,GAA0C,UAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsC;IAC5E,KAAKT,MAAL,CAAYU,IAAZ,CAAiB,wCAAjB;;IACA,IAAI,CAACF,QAAQ,CAACG,QAAd,EAAwB;MACpB,MAAMf,gBAAgB,CAACgB,4BAAjB,CAA8C,kDAA9C,CAAN;IACH;;IACD,IAAIC,OAAO,GAAG,IAAI1B,SAAJ,CAAcqB,QAAQ,CAACG,QAAvB,EAAiC,KAAKV,SAAtC,CAAd;IACA,IAAIa,WAAJ;IACA,IAAIC,SAAJ;;IACA,IAAIR,OAAO,CAACS,OAAZ,EAAqB;MACjB,IAAIC,kBAAkB,GAAG,KAAKC,WAAL,CAAiBL,OAAjB,EAA0BN,OAAO,CAACS,OAAR,CAAgBG,WAA1C,EAAuDC,SAAvD,EAAkEA,SAAlE,EAA6Eb,OAAO,CAACS,OAAR,CAAgBK,aAA7F,CAAzB;MACAP,WAAW,GAAG,IAAI1B,WAAJ,CAAgB6B,kBAAhB,EAAoC,KAAKK,WAAL,CAAiBT,OAAjB,EAA0BI,kBAAkB,CAACI,aAA7C,EAA4Dd,OAAO,CAACS,OAAR,CAAgBG,WAA5E,EAAyFZ,OAAO,CAACS,OAAR,CAAgBO,QAAzG,CAApC,EAAwJ,KAAKC,eAAL,CAAqBjB,OAArB,EAA8BC,QAA9B,EAAwCS,kBAAkB,CAACI,aAA3D,EAA0Ed,OAAO,CAACS,OAAR,CAAgBG,WAA1F,EAAuGZ,OAAO,CAACS,OAAR,CAAgBO,QAAvH,EAAiId,OAAjI,CAAxJ,EAAmS,KAAKgB,gBAAL,CAAsBlB,OAAtB,EAA+BC,QAA/B,EAAyCS,kBAAkB,CAACI,aAA5D,EAA2Ed,OAAO,CAACS,OAAR,CAAgBG,WAA3F,CAAnS,CAAd;IACH,CAHD,MAIK,IAAIZ,OAAO,CAACQ,SAAZ,EAAuB;MACxB,IAAIW,YAAY,GAAGrC,SAAS,CAACsC,iBAAV,CAA4BpB,OAAO,CAACQ,SAApC,EAA+CR,OAAO,CAACqB,iBAAvD,CAAnB;MACA,IAAIC,gBAAgB,GAAG;QACnBC,YAAY,EAAE,KAAK1B,MAAL,CAAY2B,IAAZ,CAAiBD,YADZ;QAEnBE,gBAAgB,EAAE,KAAK5B,MAAL,CAAY2B,IAAZ,CAAiBC,gBAFhB;QAGnBC,sBAAsB,EAAE,KAAK7B,MAAL,CAAY2B,IAAZ,CAAiBE,sBAHtB;QAInBC,iBAAiB,EAAE,KAAK9B,MAAL,CAAY2B,IAAZ,CAAiBG,iBAJjB;QAKnBC,0BAA0B,EAAE,KAAK/B,MAAL,CAAY2B,IAAZ,CAAiBI;MAL1B,CAAvB;MAOApB,SAAS,GAAG,IAAI1B,SAAJ,CAAcqC,YAAd,EAA4B,KAAKtB,MAAL,CAAYgC,MAAZ,CAAmBC,aAA/C,EAA8D,KAAKtC,OAAnE,EAA4E8B,gBAA5E,EAA8F,KAAK7B,MAAnG,CAAZ,CATwB,CAUxB;;MACA,IAAIS,OAAO,CAAC6B,UAAZ,EAAwB;QACpB,KAAKtC,MAAL,CAAYuC,KAAZ,CAAkB,yCAAlB;QACA,IAAItB,kBAAkB,GAAG,KAAKC,WAAL,CAAiBL,OAAjB,EAA0BE,SAAS,CAACyB,eAApC,EAAqD/B,OAAO,CAAC6B,UAA7D,EAAyEvB,SAAS,CAAC0B,aAAnF,CAAzB;QACA3B,WAAW,GAAG,IAAI1B,WAAJ,CAAgB6B,kBAAhB,EAAoC,KAAKK,WAAL,CAAiBT,OAAjB,EAA0BI,kBAAkB,CAACI,aAA7C,EAA4DN,SAAS,CAACyB,eAAtE,EAAuFzB,SAAS,CAAC2B,MAAjG,CAApC,EAA8I,KAAKlB,eAAL,CAAqBjB,OAArB,EAA8BC,QAA9B,EAAwCS,kBAAkB,CAACI,aAA3D,EAA0EN,SAAS,CAACyB,eAApF,EAAqGzB,SAAS,CAAC2B,MAA/G,EAAuHjC,OAAvH,CAA9I,EAA+Q,KAAKgB,gBAAL,CAAsBlB,OAAtB,EAA+BC,QAA/B,EAAyCS,kBAAkB,CAACI,aAA5D,EAA2EN,SAAS,CAACyB,eAArF,CAA/Q,CAAd;MACH,CAJD,MAKK,IAAIhC,QAAQ,CAACmC,WAAb,EAA0B;QAC3B,KAAK3C,MAAL,CAAYuC,KAAZ,CAAkB,0CAAlB;QACA,IAAItB,kBAAkB,GAAG,KAAKC,WAAL,CAAiBL,OAAjB,EAA0BE,SAAS,CAACyB,eAApC,EAAqDhC,QAAQ,CAACmC,WAA9D,EAA2E5B,SAAS,CAAC0B,aAArF,CAAzB;QACA3B,WAAW,GAAG,IAAI1B,WAAJ,CAAgB6B,kBAAhB,EAAoC,KAAKK,WAAL,CAAiBT,OAAjB,EAA0BI,kBAAkB,CAACI,aAA7C,EAA4DN,SAAS,CAACyB,eAAtE,EAAuFzB,SAAS,CAAC2B,MAAjG,CAApC,EAA8I,KAAKlB,eAAL,CAAqBjB,OAArB,EAA8BC,QAA9B,EAAwCS,kBAAkB,CAACI,aAA3D,EAA0EN,SAAS,CAACyB,eAApF,EAAqGzB,SAAS,CAAC2B,MAA/G,EAAuHjC,OAAvH,CAA9I,EAA+Q,KAAKgB,gBAAL,CAAsBlB,OAAtB,EAA+BC,QAA/B,EAAyCS,kBAAkB,CAACI,aAA5D,EAA2EN,SAAS,CAACyB,eAArF,CAA/Q,CAAd;MACH,CAJI,MAKA;QACD,MAAM5C,gBAAgB,CAACgB,4BAAjB,CAA8C,uDAA9C,CAAN;MACH;IACJ,CAxBI,MAyBA;MACD,MAAMhB,gBAAgB,CAACgB,4BAAjB,CAA8C,uEAA9C,CAAN;IACH;;IACD,OAAO,KAAKgC,4BAAL,CAAkCrC,OAAlC,EAA2CM,OAA3C,EAAoDC,WAApD,EAAiEC,SAAjE,CAAP;EACH,CAzCD;EA0CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIlB,UAAU,CAACQ,SAAX,CAAqBa,WAArB,GAAmC,UAAUL,OAAV,EAAmBM,WAAnB,EAAgCmB,UAAhC,EAA4CG,aAA5C,EAA2DI,oBAA3D,EAAiF;IAChH,IAAIxB,aAAJ;;IACA,IAAIwB,oBAAJ,EAA0B;MACtBxB,aAAa,GAAGwB,oBAAhB;IACH,CAFD,MAGK,IAAIJ,aAAa,KAAKrB,SAAlB,IAA+BkB,UAAnC,EAA+C;MAChDjB,aAAa,GAAG/B,aAAa,CAACwD,qBAAd,CAAoCR,UAApC,EAAgDG,aAAhD,EAA+D,KAAKzC,MAApE,EAA4E,KAAKC,SAAjF,EAA4FY,OAA5F,CAAhB;IACH;;IACD,IAAI,CAACQ,aAAL,EAAoB;MAChB,MAAMzB,gBAAgB,CAACgB,4BAAjB,CAA8C,kCAA9C,CAAN;IACH;;IACD,IAAImC,aAAa,GAAGT,UAAU,GAC1BhD,aAAa,CAAC0D,aAAd,CAA4BV,UAA5B,EAAwCjB,aAAxC,EAAuDR,OAAvD,EAAgEO,SAAhE,EAA2EA,SAA3E,EAAsFA,SAAtF,EAAiGD,WAAjG,CAD0B,GAE1B7B,aAAa,CAAC2D,oBAAd,CAAmC5B,aAAnC,EAAkDR,OAAlD,EAA2DO,SAA3D,EAAsEA,SAAtE,EAAiFA,SAAjF,EAA4FD,WAA5F,CAFJ;;IAGA,IAAI,KAAKjB,oBAAT,EAA+B;MAC3B,KAAKF,MAAL,CAAYkD,OAAZ,CAAoB,8BAApB;MACA,KAAKnD,OAAL,CAAaoD,UAAb,CAAwBJ,aAAxB;MACA,OAAOA,aAAP;IACH,CAJD,MAKK;MACD,MAAMnD,gBAAgB,CAACgB,4BAAjB,CAA8C,sEAA9C,CAAN;IACH;EACJ,CAtBD;EAuBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIf,UAAU,CAACQ,SAAX,CAAqBiB,WAArB,GAAmC,UAAUT,OAAV,EAAmBQ,aAAnB,EAAkCF,WAAlC,EAA+CI,QAA/C,EAAyD;IACxF,IAAI6B,aAAa,GAAG7D,aAAa,CAAC8D,mBAAd,CAAkChC,aAAlC,EAAiDF,WAAjD,EAA8DN,OAAO,CAACyC,QAAtE,EAAgF,KAAKlD,MAAL,CAAY2B,IAAZ,CAAiBwB,QAAjG,EAA2GhC,QAA3G,CAApB;;IACA,IAAI,KAAKrB,oBAAT,EAA+B;MAC3B,KAAKF,MAAL,CAAYkD,OAAZ,CAAoB,+BAApB;MACA,KAAKnD,OAAL,CAAayD,oBAAb,CAAkCJ,aAAlC;MACA,OAAOA,aAAP;IACH,CAJD,MAKK;MACD,MAAMxD,gBAAgB,CAACgB,4BAAjB,CAA8C,sEAA9C,CAAN;IACH;EACJ,CAVD;EAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIf,UAAU,CAACQ,SAAX,CAAqBmB,eAArB,GAAuC,UAAUjB,OAAV,EAAmBC,QAAnB,EAA6Ba,aAA7B,EAA4CF,WAA5C,EAAyDI,QAAzD,EAAmEd,OAAnE,EAA4E;IAC/G,IAAI,CAACD,QAAQ,CAACiD,YAAd,EAA4B;MACxB,KAAKzD,MAAL,CAAYkD,OAAZ,CAAoB,mDAApB;MACA,OAAO,IAAP;IACH;;IACD,IAAI,CAAC1C,QAAQ,CAACkD,UAAd,EAA0B;MACtB,MAAM9D,gBAAgB,CAACgB,4BAAjB,CAA8C,0DAA9C,CAAN;IACH;;IACD,IAAI,CAACH,OAAO,CAACkD,iBAAb,EAAgC;MAC5B,MAAM/D,gBAAgB,CAACgB,4BAAjB,CAA8C,2DAA9C,CAAN;IACH;;IACD,IAAIgD,MAAM,GAAG,IAAIpE,QAAJ,CAAae,OAAO,CAACqD,MAArB,EAA6BC,WAA7B,EAAb;IACA,IAAIC,SAAS,GAAGrD,OAAO,CAACqD,SAAR,IAAsBtD,QAAQ,CAACkD,UAAT,GAAsB,IAAIK,IAAJ,GAAWC,OAAX,KAAuB,IAAnF;IACA,IAAIL,iBAAiB,GAAGlD,OAAO,CAACkD,iBAAhC;IACA,IAAIM,iBAAiB,GAAGxE,iBAAiB,CAACyE,uBAAlB,CAA0C7C,aAA1C,EAAyDF,WAAzD,EAAsEX,QAAQ,CAACiD,YAA/E,EAA6F,KAAKrD,MAAL,CAAY2B,IAAZ,CAAiBwB,QAA9G,EAAwHhC,QAAxH,EAAkIqC,MAAlI,EAA0IE,SAA1I,EAAqJH,iBAArJ,EAAwK,KAAK1D,SAA7K,CAAxB;;IACA,IAAI,KAAKC,oBAAT,EAA+B;MAC3B,KAAKF,MAAL,CAAYkD,OAAZ,CAAoB,mCAApB;MACA,KAAKnD,OAAL,CAAaoE,wBAAb,CAAsCF,iBAAtC;MACA,OAAOA,iBAAP;IACH,CAJD,MAKK;MACD,MAAMrE,gBAAgB,CAACgB,4BAAjB,CAA8C,sEAA9C,CAAN;IACH;EACJ,CAvBD;EAwBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIf,UAAU,CAACQ,SAAX,CAAqBoB,gBAArB,GAAwC,UAAUlB,OAAV,EAAmBC,QAAnB,EAA6Ba,aAA7B,EAA4CF,WAA5C,EAAyD;IAC7F,IAAI,CAACX,QAAQ,CAAC4D,aAAd,EAA6B;MACzB,KAAKpE,MAAL,CAAYkD,OAAZ,CAAoB,oDAApB;MACA,OAAO,IAAP;IACH;;IACD,IAAImB,kBAAkB,GAAG3E,kBAAkB,CAAC4E,wBAAnB,CAA4CjD,aAA5C,EAA2DF,WAA3D,EAAwEX,QAAQ,CAAC4D,aAAjF,EAAgG,KAAKhE,MAAL,CAAY2B,IAAZ,CAAiBwB,QAAjH,CAAzB;;IACA,IAAI,KAAKrD,oBAAT,EAA+B;MAC3B,KAAKF,MAAL,CAAYkD,OAAZ,CAAoB,oCAApB;MACA,KAAKnD,OAAL,CAAawE,yBAAb,CAAuCF,kBAAvC;MACA,OAAOA,kBAAP;IACH,CAJD,MAKK;MACD,MAAMzE,gBAAgB,CAACgB,4BAAjB,CAA8C,sEAA9C,CAAN;IACH;EACJ,CAdD;EAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIf,UAAU,CAACQ,SAAX,CAAqBuC,4BAArB,GAAoD,UAAUrC,OAAV,EAAmBiE,UAAnB,EAA+B1D,WAA/B,EAA4CC,SAA5C,EAAuD;IACvG,IAAI0D,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;IACA,IAAIC,WAAW,GAAGjF,SAAS,CAACkF,YAA5B;IACA,IAAIC,cAAc,GAAG,EAArB;IACA,IAAIhB,SAAS,GAAG,IAAhB;IACA,IAAIiB,YAAJ;;IACA,IAAIjE,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAAC8D,WAA1E,EAAuF;MACnFA,WAAW,GAAG9D,WAAW,CAAC8D,WAAZ,CAAwBI,MAAtC;MACAF,cAAc,GAAGtF,QAAQ,CAACyF,UAAT,CAAoBnE,WAAW,CAAC8D,WAAZ,CAAwBM,MAA5C,EAAoDC,OAApD,EAAjB;MACArB,SAAS,GAAG,IAAIC,IAAJ,CAASqB,MAAM,CAACtE,WAAW,CAAC8D,WAAZ,CAAwBd,SAAzB,CAAN,GAA4C,IAArD,CAAZ;MACAiB,YAAY,GAAG,IAAIhB,IAAJ,CAASqB,MAAM,CAACtE,WAAW,CAAC8D,WAAZ,CAAwBjB,iBAAzB,CAAN,GAAoD,IAA7D,CAAf;IACH;;IACD,IAAI0B,GAAG,GAAG,CAACb,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACc,MAAX,CAAkBC,GAA3E,MAAoFf,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACc,MAAX,CAAkBE,GAA9J,KAAsK7F,SAAS,CAACkF,YAA1L;IACA,IAAIY,GAAG,GAAG,CAACjB,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACc,MAAX,CAAkBG,GAA3E,KAAmF9F,SAAS,CAACkF,YAAvG;IACA,OAAO;MACH9D,SAAS,EAAEA,SAAS,GAAGA,SAAS,CAAC2E,kBAAb,GAAkC/F,SAAS,CAACkF,YAD7D;MAEHc,QAAQ,EAAEN,GAFP;MAGH9D,QAAQ,EAAEkE,GAHP;MAIH7B,MAAM,EAAEkB,cAJL;MAKH9D,OAAO,EAAE,CAACF,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACE,OAAvE,IAAkFF,WAAW,CAACE,OAAZ,CAAoB4E,cAApB,EAAlF,GAAyH,IAL/H;MAMH/E,OAAO,EAAE2D,UAAU,GAAGA,UAAU,CAAClB,QAAd,GAAyB3D,SAAS,CAACkF,YANnD;MAOHgB,aAAa,EAAErB,UAAU,GAAGA,UAAU,CAACc,MAAd,GAAuB,EAP7C;MAQHV,WAAW,EAAEA,WARV;MASHkB,SAAS,EAAE,IATR;MAUHhC,SAAS,EAAEA,SAVR;MAWHiC,aAAa,EAAExF,OAAO,CAACwF,aAAR,IAAyBpG,SAAS,CAACkF,YAX/C;MAYHmB,SAAS,EAAErG,SAAS,CAACkF,YAZlB;MAaHE,YAAY,EAAEA,YAbX;MAcHkB,QAAQ,EAAEtG,SAAS,CAACkF,YAdjB;MAeHqB,SAAS,EAAE,CAAC,CAACzB,EAAE,GAAG3D,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAAC8D,WAA5E,MAA6F,IAA7F,IAAqGH,EAAE,KAAK,KAAK,CAAjH,GAAqH,KAAK,CAA1H,GAA8HA,EAAE,CAACyB,SAAlI,KAAgJvG,SAAS,CAACkF,YAflK;MAgBHsB,KAAK,EAAExG,SAAS,CAACkF,YAhBd;MAiBHuB,kBAAkB,EAAE,CAAC,CAAC1B,EAAE,GAAG5D,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACE,OAA5E,MAAyF,IAAzF,IAAiG0D,EAAE,KAAK,KAAK,CAA7G,GAAiH,KAAK,CAAtH,GAA0HA,EAAE,CAAC0B,kBAA9H,KAAqJzG,SAAS,CAACkF,YAjBhL;MAkBHwB,WAAW,EAAE,CAAC,CAAC1B,EAAE,GAAG7D,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACE,OAA5E,MAAyF,IAAzF,IAAiG2D,EAAE,KAAK,KAAK,CAA7G,GAAiH,KAAK,CAAtH,GAA0HA,EAAE,CAAC0B,WAA9H,KAA8I1G,SAAS,CAACkF,YAlBlK;MAmBHyB,IAAI,EAAElF,SAnBH;MAoBHmF,gBAAgB,EAAE;IApBf,CAAP;EAsBH,CApCD;;EAqCA,OAAO1G,UAAP;AACH,CAnN+B,EAAhC;;AAqNA,SAASA,UAAT"},"metadata":{},"sourceType":"module"}