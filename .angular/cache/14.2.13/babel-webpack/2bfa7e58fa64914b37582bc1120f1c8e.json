{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * @hidden\r\n */\n\nvar StringUtils =\n/** @class */\nfunction () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n\n\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n\n\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n\n\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n\n    return true;\n  };\n\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n\n\n  StringUtils.queryStringToObject = function (query) {\n    var obj = {};\n    var params = query.split(\"&\");\n\n    var decode = function (s) {\n      return decodeURIComponent(s.replace(/\\+/g, \" \"));\n    };\n\n    params.forEach(function (pair) {\n      if (pair.trim()) {\n        var _a = pair.split(/=(.+)/g, 2),\n            key = _a[0],\n            value = _a[1]; // Split on the first occurence of the '=' character\n\n\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n\n\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n\n\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n\n\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n\n\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\n\n    return regex.test(input);\n  };\n\n  return StringUtils;\n}();\n\nexport { StringUtils };","map":{"version":3,"names":["ClientAuthError","StringUtils","decodeAuthToken","authToken","isEmpty","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","createTokenParsingError","JSON","stringify","crackedToken","header","JWSPayload","JWSSig","str","isEmptyObj","strObj","obj","parse","Object","keys","e","startsWith","search","indexOf","endsWith","lastIndexOf","queryStringToObject","query","params","split","decode","s","decodeURIComponent","replace","forEach","pair","trim","_a","key","value","trimArrayEntries","arr","map","entry","removeEmptyStringsFromArray","filter","jsonParseHelper","matchPattern","pattern","input","regex","RegExp","test"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/utils/StringUtils.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    StringUtils.decodeAuthToken = function (authToken) {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    };\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    StringUtils.isEmptyObj = function (strObj) {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                var obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    };\r\n    StringUtils.startsWith = function (str, search) {\r\n        return str.indexOf(search) === 0;\r\n    };\r\n    StringUtils.endsWith = function (str, search) {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    };\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    StringUtils.queryStringToObject = function (query) {\r\n        var obj = {};\r\n        var params = query.split(\"&\");\r\n        var decode = function (s) { return decodeURIComponent(s.replace(/\\+/g, \" \")); };\r\n        params.forEach(function (pair) {\r\n            if (pair.trim()) {\r\n                var _a = pair.split(/=(.+)/g, 2), key = _a[0], value = _a[1]; // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj;\r\n    };\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    StringUtils.trimArrayEntries = function (arr) {\r\n        return arr.map(function (entry) { return entry.trim(); });\r\n    };\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    StringUtils.removeEmptyStringsFromArray = function (arr) {\r\n        return arr.filter(function (entry) {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    };\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    StringUtils.jsonParseHelper = function (str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    StringUtils.matchPattern = function (pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        var regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\r\n        return regex.test(input);\r\n    };\r\n    return StringUtils;\r\n}());\n\nexport { StringUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}