{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Authority } from './Authority.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar AuthorityFactory =\n/** @class */\nfunction () {\n  function AuthorityFactory() {}\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Also performs endpoint discovery.\r\n   *\r\n   * @param authorityUri\r\n   * @param networkClient\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityUriFinal, acquireTokenAuthority, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n            authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n            return [4\n            /*yield*/\n            , acquireTokenAuthority.resolveEndpointsAsync()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , acquireTokenAuthority];\n\n          case 3:\n            e_1 = _a.sent();\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Does not perform endpoint discovery.\r\n   *\r\n   * @param authorityUrl\r\n   * @param networkInterface\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    // Throw error if authority url is empty\n    if (StringUtils.isEmpty(authorityUrl)) {\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n  };\n\n  return AuthorityFactory;\n}();\n\nexport { AuthorityFactory };","map":{"version":3,"names":["__awaiter","__generator","Authority","ClientConfigurationError","StringUtils","ClientAuthError","PerformanceEvents","AuthorityFactory","createDiscoveredInstance","authorityUri","networkClient","cacheManager","authorityOptions","logger","performanceClient","correlationId","authorityUriFinal","acquireTokenAuthority","e_1","_a","label","addQueueMeasurement","AuthorityFactoryCreateDiscoveredInstance","transformCIAMAuthority","createInstance","trys","push","setPreQueueTime","AuthorityResolveEndpointsAsync","resolveEndpointsAsync","sent","createEndpointDiscoveryIncompleteError","authorityUrl","networkInterface","isEmpty","createUrlEmptyError"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/authority/AuthorityFactory.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Authority } from './Authority.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Also performs endpoint discovery.\r\n     *\r\n     * @param authorityUri\r\n     * @param networkClient\r\n     * @param protocolMode\r\n     */\r\n    AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var authorityUriFinal, acquireTokenAuthority, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\r\n                        authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\r\n                        acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\r\n                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, acquireTokenAuthority];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Does not perform endpoint discovery.\r\n     *\r\n     * @param authorityUrl\r\n     * @param networkInterface\r\n     * @param protocolMode\r\n     */\r\n    AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\r\n        // Throw error if authority url is empty\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\r\n    };\r\n    return AuthorityFactory;\r\n}());\n\nexport { AuthorityFactory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}