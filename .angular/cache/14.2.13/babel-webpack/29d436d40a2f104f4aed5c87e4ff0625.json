{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AuthenticationScheme, CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * On-Behalf-Of client\r\n */\n\nvar OnBehalfOfClient =\n/** @class */\nfunction (_super) {\n  __extends(OnBehalfOfClient, _super);\n\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []); // generate the user_assertion_hash for OBOAssertion\n\n            _a = this;\n            return [4\n            /*yield*/\n            , this.cryptoUtils.hashString(request.oboAssertion)];\n\n          case 1:\n            // generate the user_assertion_hash for OBOAssertion\n            _a.userAssertionHash = _b.sent();\n            if (!request.skipCache) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            _b.trys.push([3, 5,, 7]);\n\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 5:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n\n          case 6:\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * Find idtoken in the cache\r\n   * Find accessToken based on user assertion and account info in the cache\r\n   * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n   * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\n\n            if (!cachedAccessToken) {\n              // Must refresh due to non-existent access_token.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Access token expired, will need to renewed\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n\n            cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId);\n            cachedAccount = null;\n\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || Constants.EMPTY_STRING\n              };\n              cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\n            } // increment telemetry cache hit counter\n\n\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n   * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readIdTokenFromCacheForOBO = function (atHomeAccountId) {\n    var idTokenFilter = {\n      homeAccountId: atHomeAccountId,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant\n    };\n    var idTokens = this.cacheManager.getIdTokensByFilter(idTokenFilter); // When acquiring a token on behalf of an application, there might not be an id token in the cache\n\n    if (idTokens.length < 1) {\n      return null;\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * Fetches the cached access token based on incoming assertion\r\n   * @param clientId\r\n   * @param request\r\n   * @param userAssertionHash\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccessTokenFromCacheForOBO = function (clientId, request) {\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      credentialType: credentialType,\n      clientId: clientId,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray()),\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash,\n      userAssertionHash: this.userAssertionHash\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority, userAssertionHash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, userAssertionHash)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return OnBehalfOfClient;\n}(BaseClient);\n\nexport { OnBehalfOfClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","RequestParameterBuilder","ScopeSet","AuthenticationScheme","CredentialType","GrantType","AADServerParamKeys","CacheOutcome","Constants","ResponseHandler","TimeUtils","AuthToken","ClientAuthError","UrlString","OnBehalfOfClient","_super","configuration","call","prototype","acquireToken","request","_a","_b","label","scopeSet","scopes","cryptoUtils","hashString","oboAssertion","userAssertionHash","sent","skipCache","executeTokenRequest","authority","trys","push","getCachedAuthenticationResult","cachedAccessToken","cachedIdToken","idTokenObject","cachedAccount","localAccountId","accountInfo","_c","readAccessTokenFromCacheForOBO","config","authOptions","clientId","serverTelemetryManager","setCacheOutcome","NO_CACHED_ACCESS_TOKEN","logger","info","createRefreshRequiredError","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","readIdTokenFromCacheForOBO","homeAccountId","secret","cryptoInterface","claims","oid","sub","environment","tenantId","realm","username","EMPTY_STRING","cacheManager","readAccountFromCache","incrementCacheHits","generateAuthenticationResult","account","accessToken","idToken","refreshToken","appMetadata","atHomeAccountId","idTokenFilter","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","ID_TOKEN","tenant","idTokens","getIdTokensByFilter","length","authScheme","authenticationScheme","BEARER","toLowerCase","ACCESS_TOKEN_WITH_AUTH_SCHEME","ACCESS_TOKEN","accessTokenFilter","target","createSearchScopes","asArray","tokenType","keyId","sshKid","requestedClaimsHash","accessTokens","getAccessTokensByFilter","numAccessTokens","createMultipleMatchingTokensInCacheError","queryParametersString","endpoint","requestBody","headers","thumbprint","reqTimestamp","response","responseHandler","tokenResponse","createTokenQueryParameters","appendQueryString","tokenEndpoint","createTokenRequestBody","createTokenRequestHeaders","resourceRequestMethod","resourceRequestUri","shrClaims","nowSeconds","executePostToTokenEndpoint","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","parameterBuilder","addClientId","addScopes","addGrantType","JWT_BEARER","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","correlationId","createNewGuid","addCorrelationId","addRequestTokenUse","ON_BEHALF_OF","addOboAssertion","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","clientCapabilities","addClaims","createQueryString"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/client/OnBehalfOfClient.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AuthenticationScheme, CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nvar OnBehalfOfClient = /** @class */ (function (_super) {\r\n    __extends(OnBehalfOfClient, _super);\r\n    function OnBehalfOfClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        // generate the user_assertion_hash for OBOAssertion\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.cryptoUtils.hashString(request.oboAssertion)];\r\n                    case 1:\r\n                        // generate the user_assertion_hash for OBOAssertion\r\n                        _a.userAssertionHash = _b.sent();\r\n                        if (!request.skipCache) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\r\n                    case 2: return [2 /*return*/, _b.sent()];\r\n                    case 3:\r\n                        _b.trys.push([3, 5, , 7]);\r\n                        return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 4: return [2 /*return*/, _b.sent()];\r\n                    case 5:\r\n                        _b.sent();\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\r\n                    case 6: \r\n                    // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\r\n                    return [2 /*return*/, _b.sent()];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * look up cache for tokens\r\n     * Find idtoken in the cache\r\n     * Find accessToken based on user assertion and account info in the cache\r\n     * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n     * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\r\n                        if (!cachedAccessToken) {\r\n                            // Must refresh due to non-existent access_token.\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Access token expired, will need to renewed\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            this.logger.info(\"OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId);\r\n                        cachedAccount = null;\r\n                        if (cachedIdToken) {\r\n                            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n                            localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n                            accountInfo = {\r\n                                homeAccountId: cachedIdToken.homeAccountId,\r\n                                environment: cachedIdToken.environment,\r\n                                tenantId: cachedIdToken.realm,\r\n                                username: Constants.EMPTY_STRING,\r\n                                localAccountId: localAccountId || Constants.EMPTY_STRING\r\n                            };\r\n                            cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\r\n                        }\r\n                        // increment telemetry cache hit counter\r\n                        if (this.config.serverTelemetryManager) {\r\n                            this.config.serverTelemetryManager.incrementCacheHits();\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: cachedAccount,\r\n                                accessToken: cachedAccessToken,\r\n                                idToken: cachedIdToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request, idTokenObject)];\r\n                    case 1: return [2 /*return*/, _c.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n     * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.readIdTokenFromCacheForOBO = function (atHomeAccountId) {\r\n        var idTokenFilter = {\r\n            homeAccountId: atHomeAccountId,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant\r\n        };\r\n        var idTokens = this.cacheManager.getIdTokensByFilter(idTokenFilter);\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * Fetches the cached access token based on incoming assertion\r\n     * @param clientId\r\n     * @param request\r\n     * @param userAssertionHash\r\n     */\r\n    OnBehalfOfClient.prototype.readAccessTokenFromCacheForOBO = function (clientId, request) {\r\n        var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        var credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n        var accessTokenFilter = {\r\n            credentialType: credentialType,\r\n            clientId: clientId,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray()),\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n            userAssertionHash: this.userAssertionHash\r\n        };\r\n        var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority, userAssertionHash) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, userAssertionHash)];\r\n                    case 2:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (request.claims || (this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0)) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return OnBehalfOfClient;\r\n}(BaseClient));\n\nexport { OnBehalfOfClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}