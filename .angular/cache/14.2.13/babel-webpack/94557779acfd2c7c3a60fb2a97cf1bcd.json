{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CryptoOps } from './CryptoOps.js';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SignedHttpRequest =\n/** @class */\nfunction () {\n  function SignedHttpRequest(shrParameters, shrOptions) {\n    var loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\r\n   * Generates and caches a keypair for the given request options.\r\n   * @returns Public key digest, which should be sent to the token issuer.\r\n   */\n\n\n  SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.popTokenGenerator.generateKid(this.shrParameters)];\n\n          case 1:\n            kid = _a.sent().kid;\n            return [2\n            /*return*/\n            , kid];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a signed http request for the given payload with the given key.\r\n   * @param payload Payload to sign (e.g. access token)\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @param claims Additional claims to include/override in the signed JWT\r\n   * @returns Pop token signed with the corresponding private key\r\n   */\n\n\n  SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];\n      });\n    });\n  };\n  /**\r\n   * Removes cached keys from browser for given public key thumbprint\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @returns If keys are properly deleted\r\n   */\n\n\n  SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return SignedHttpRequest;\n}();\n\nexport { SignedHttpRequest };","map":{"version":3,"names":["__awaiter","__generator","CryptoOps","Logger","PopTokenGenerator","name","version","SignedHttpRequest","shrParameters","shrOptions","loggerOptions","logger","cryptoOps","popTokenGenerator","prototype","generatePublicKeyThumbprint","kid","_a","label","generateKid","sent","signRequest","payload","publicKeyThumbprint","claims","signPayload","removeKeys","removeTokenBindingKey"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/crypto/SignedHttpRequest.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CryptoOps } from './CryptoOps.js';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar SignedHttpRequest = /** @class */ (function () {\r\n    function SignedHttpRequest(shrParameters, shrOptions) {\r\n        var loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\r\n        this.logger = new Logger(loggerOptions, name, version);\r\n        this.cryptoOps = new CryptoOps(this.logger);\r\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\r\n        this.shrParameters = shrParameters;\r\n    }\r\n    /**\r\n     * Generates and caches a keypair for the given request options.\r\n     * @returns Public key digest, which should be sent to the token issuer.\r\n     */\r\n    SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var kid;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.popTokenGenerator.generateKid(this.shrParameters)];\r\n                    case 1:\r\n                        kid = (_a.sent()).kid;\r\n                        return [2 /*return*/, kid];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a signed http request for the given payload with the given key.\r\n     * @param payload Payload to sign (e.g. access token)\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @param claims Additional claims to include/override in the signed JWT\r\n     * @returns Pop token signed with the corresponding private key\r\n     */\r\n    SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes cached keys from browser for given public key thumbprint\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @returns If keys are properly deleted\r\n     */\r\n    SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SignedHttpRequest;\r\n}());\n\nexport { SignedHttpRequest };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,uBAAvC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,MAAT,EAAiBC,iBAAjB,QAA0C,oBAA1C;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,uBAA9B;AAEA;AACA;AACA;AACA;;AACA,IAAIC,iBAAiB;AAAG;AAAe,YAAY;EAC/C,SAASA,iBAAT,CAA2BC,aAA3B,EAA0CC,UAA1C,EAAsD;IAClD,IAAIC,aAAa,GAAID,UAAU,IAAIA,UAAU,CAACC,aAA1B,IAA4C,EAAhE;IACA,KAAKC,MAAL,GAAc,IAAIR,MAAJ,CAAWO,aAAX,EAA0BL,IAA1B,EAAgCC,OAAhC,CAAd;IACA,KAAKM,SAAL,GAAiB,IAAIV,SAAJ,CAAc,KAAKS,MAAnB,CAAjB;IACA,KAAKE,iBAAL,GAAyB,IAAIT,iBAAJ,CAAsB,KAAKQ,SAA3B,CAAzB;IACA,KAAKJ,aAAL,GAAqBA,aAArB;EACH;EACD;AACJ;AACA;AACA;;;EACID,iBAAiB,CAACO,SAAlB,CAA4BC,2BAA5B,GAA0D,YAAY;IAClE,OAAOf,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIgB,GAAJ;MACA,OAAOf,WAAW,CAAC,IAAD,EAAO,UAAUgB,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKL,iBAAL,CAAuBM,WAAvB,CAAmC,KAAKX,aAAxC,CAAd,CAAP;;UACR,KAAK,CAAL;YACIQ,GAAG,GAAIC,EAAE,CAACG,IAAH,EAAD,CAAYJ,GAAlB;YACA,OAAO,CAAC;YAAE;YAAH,EAAeA,GAAf,CAAP;QAJR;MAMH,CAPiB,CAAlB;IAQH,CAVe,CAAhB;EAWH,CAZD;EAaA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIT,iBAAiB,CAACO,SAAlB,CAA4BO,WAA5B,GAA0C,UAAUC,OAAV,EAAmBC,mBAAnB,EAAwCC,MAAxC,EAAgD;IACtF,OAAOxB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,OAAOC,WAAW,CAAC,IAAD,EAAO,UAAUgB,EAAV,EAAc;QACnC,OAAO,CAAC;QAAE;QAAH,EAAe,KAAKJ,iBAAL,CAAuBY,WAAvB,CAAmCH,OAAnC,EAA4CC,mBAA5C,EAAiE,KAAKf,aAAtE,EAAqFgB,MAArF,CAAf,CAAP;MACH,CAFiB,CAAlB;IAGH,CAJe,CAAhB;EAKH,CAND;EAOA;AACJ;AACA;AACA;AACA;;;EACIjB,iBAAiB,CAACO,SAAlB,CAA4BY,UAA5B,GAAyC,UAAUH,mBAAV,EAA+B;IACpE,OAAOvB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,OAAOC,WAAW,CAAC,IAAD,EAAO,UAAUgB,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKN,SAAL,CAAee,qBAAf,CAAqCJ,mBAArC,CAAd,CAAP;;UACR,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAeN,EAAE,CAACG,IAAH,EAAf,CAAP;QAFZ;MAIH,CALiB,CAAlB;IAMH,CAPe,CAAhB;EAQH,CATD;;EAUA,OAAOb,iBAAP;AACH,CAvDsC,EAAvC;;AAyDA,SAASA,iBAAT"},"metadata":{},"sourceType":"module"}