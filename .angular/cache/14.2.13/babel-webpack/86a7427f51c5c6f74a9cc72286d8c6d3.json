{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\nvar CryptoOps =\n/** @class */\nfunction () {\n  function CryptoOps(logger, performanceClient, cryptoConfig) {\n    this.logger = logger; // Browser crypto needs to be validated first before any other classes can be set.\n\n    this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.hashString(publicJwkString)];\n\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _b.sent(); // Store Keypair data in keystore\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.removeItem(kid)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.containsKey(kid)];\n\n          case 2:\n            keyFound = _a.sent();\n            return [2\n            /*return*/\n            , !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n\n\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.clear()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.getItem(kid)];\n\n          case 1:\n            cachedKeyPair = _b.sent();\n\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n\n\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(plainText)];\n\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2\n            /*return*/\n            , this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\n\nexport { CryptoOps };","map":{"version":3,"names":["__awaiter","__generator","PerformanceEvents","JoseHeader","GuidGenerator","Base64Encode","Base64Decode","PkceGenerator","BrowserCrypto","BrowserStringUtils","BrowserAuthError","CryptoKeyStore","CryptoOps","logger","performanceClient","cryptoConfig","browserCrypto","b64Encode","b64Decode","guidGenerator","pkceGenerator","cache","prototype","createNewGuid","generateGuid","base64Encode","input","encode","base64Decode","decode","generatePkceCodes","_a","generateCodes","getPublicKeyThumbprint","request","publicKeyThumbMeasurement","keyPair","publicKeyJwk","pubKeyThumprintObj","publicJwkString","publicJwkHash","privateKeyJwk","unextractablePrivateKey","_b","label","startMeasurement","CryptoOptsGetPublicKeyThumbprint","correlationId","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","sent","exportJwk","publicKey","e","kty","n","getSortedObjectString","hashString","privateKey","importJwk","asymmetricKeys","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","endMeasurement","success","removeTokenBindingKey","kid","keyFound","removeItem","containsKey","clearKeystore","clear","signJwt","payload","signJwtMeasurement","cachedKeyPair","publicKeyJwkString","encodedKeyIdThumbprint","shrHeader","encodedShrHeader","encodedPayload","tokenString","tokenBuffer","signatureBuffer","encodedSignature","signedJwt","CryptoOptsSignJwt","getItem","createSigningKeyNotFoundInStorageError","urlEncode","JSON","stringify","getShrHeaderString","alg","cnf","jwk","parse","stringToArrayBuffer","sign","urlEncodeArr","Uint8Array","plainText","hashBuffer","hashBytes","sha256Digest"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/crypto/CryptoOps.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nvar CryptoOps = /** @class */ (function () {\r\n    function CryptoOps(logger, performanceClient, cryptoConfig) {\r\n        this.logger = logger;\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n        this.cache = new CryptoKeyStore(this.logger);\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    CryptoOps.prototype.createNewGuid = function () {\r\n        return this.guidGenerator.generateGuid();\r\n    };\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input\r\n     */\r\n    CryptoOps.prototype.base64Encode = function (input) {\r\n        return this.b64Encode.encode(input);\r\n    };\r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input\r\n     */\r\n    CryptoOps.prototype.base64Decode = function (input) {\r\n        return this.b64Decode.decode(input);\r\n    };\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    CryptoOps.prototype.generatePkceCodes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.pkceGenerator.generateCodes()];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */\r\n    CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\r\n                        return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\r\n                    case 1:\r\n                        keyPair = _b.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\r\n                    case 2:\r\n                        publicKeyJwk = _b.sent();\r\n                        pubKeyThumprintObj = {\r\n                            e: publicKeyJwk.e,\r\n                            kty: publicKeyJwk.kty,\r\n                            n: publicKeyJwk.n\r\n                        };\r\n                        publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\r\n                        return [4 /*yield*/, this.hashString(publicJwkString)];\r\n                    case 3:\r\n                        publicJwkHash = _b.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\r\n                    case 4:\r\n                        privateKeyJwk = _b.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\r\n                    case 5:\r\n                        unextractablePrivateKey = _b.sent();\r\n                        // Store Keypair data in keystore\r\n                        return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {\r\n                                privateKey: unextractablePrivateKey,\r\n                                publicKey: keyPair.publicKey,\r\n                                requestMethod: request.resourceRequestMethod,\r\n                                requestUri: request.resourceRequestUri\r\n                            })];\r\n                    case 6:\r\n                        // Store Keypair data in keystore\r\n                        _b.sent();\r\n                        if (publicKeyThumbMeasurement) {\r\n                            publicKeyThumbMeasurement.endMeasurement({\r\n                                success: true\r\n                            });\r\n                        }\r\n                        return [2 /*return*/, publicJwkHash];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid\r\n     */\r\n    CryptoOps.prototype.removeTokenBindingKey = function (kid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var keyFound;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];\r\n                    case 2:\r\n                        keyFound = _a.sent();\r\n                        return [2 /*return*/, !keyFound];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes all cryptographic keys from IndexedDB storage\r\n     */\r\n    CryptoOps.prototype.clearKeystore = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cache.clear()];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload\r\n     * @param kid\r\n     */\r\n    CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\r\n                        return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];\r\n                    case 1:\r\n                        cachedKeyPair = _b.sent();\r\n                        if (!cachedKeyPair) {\r\n                            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\r\n                        }\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\r\n                    case 2:\r\n                        publicKeyJwk = _b.sent();\r\n                        publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\r\n                        encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));\r\n                        shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });\r\n                        encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\r\n                        // Generate payload\r\n                        payload.cnf = {\r\n                            jwk: JSON.parse(publicKeyJwkString)\r\n                        };\r\n                        encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\r\n                        tokenString = encodedShrHeader + \".\" + encodedPayload;\r\n                        tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\r\n                        return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\r\n                    case 3:\r\n                        signatureBuffer = _b.sent();\r\n                        encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\r\n                        signedJwt = tokenString + \".\" + encodedSignature;\r\n                        if (signJwtMeasurement) {\r\n                            signJwtMeasurement.endMeasurement({\r\n                                success: true\r\n                            });\r\n                        }\r\n                        return [2 /*return*/, signedJwt];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     * @param plainText\r\n     */\r\n    CryptoOps.prototype.hashString = function (plainText) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var hashBuffer, hashBytes;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];\r\n                    case 1:\r\n                        hashBuffer = _a.sent();\r\n                        hashBytes = new Uint8Array(hashBuffer);\r\n                        return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\r\n    CryptoOps.EXTRACTABLE = true;\r\n    return CryptoOps;\r\n}());\n\nexport { CryptoOps };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}