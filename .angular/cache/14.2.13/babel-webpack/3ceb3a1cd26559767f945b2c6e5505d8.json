{"ast":null,"code":"// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\n// and https://github.com/bpampuch/pdfmake/issues/205\n\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\n\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF â€“ use this option to remove them\r\n *   @param  {Boolean} [showHidden=false] TRUE if the 'display:none' elements should be displayed\r\n *   @param  {Boolean} [removeTagClasses=false] TRUE if we don't want to have 'html-TAG' added as a class for each node\r\n *   @param  {Array} [ignoreStyles=[]] An array of style property to ignore\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\n//var util = require(\"util\"); // to debug\nfunction htmlToPdfMake(htmlText, options) {\n  'use strict';\n\n  this.wndw = options && options.window ? options.window : window;\n  this.tableAutoSize = options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false;\n  this.imagesByReference = options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false;\n  this.removeExtraBlanks = options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false;\n  this.showHidden = options && typeof options.showHidden === \"boolean\" ? options.showHidden : false;\n  this.removeTagClasses = options && typeof options.removeTagClasses === \"boolean\" ? options.removeTagClasses : false;\n  this.ignoreStyles = options && Array.isArray(options.ignoreStyles) ? options.ignoreStyles : []; // A random string to be used in the image references\n\n  var imagesByReferenceSuffix = Math.random().toString(36).slice(2, 8); // Used with the size attribute on the font elements to calculate relative font size\n\n  this.fontSizes = options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]; // set default styles\n\n  this.defaultStyles = {\n    b: {\n      bold: true\n    },\n    strong: {\n      bold: true\n    },\n    u: {\n      decoration: 'underline'\n    },\n    del: {\n      decoration: 'lineThrough'\n    },\n    s: {\n      decoration: 'lineThrough'\n    },\n    em: {\n      italics: true\n    },\n    i: {\n      italics: true\n    },\n    h1: {\n      fontSize: 24,\n      bold: true,\n      marginBottom: 5\n    },\n    h2: {\n      fontSize: 22,\n      bold: true,\n      marginBottom: 5\n    },\n    h3: {\n      fontSize: 20,\n      bold: true,\n      marginBottom: 5\n    },\n    h4: {\n      fontSize: 18,\n      bold: true,\n      marginBottom: 5\n    },\n    h5: {\n      fontSize: 16,\n      bold: true,\n      marginBottom: 5\n    },\n    h6: {\n      fontSize: 14,\n      bold: true,\n      marginBottom: 5\n    },\n    a: {\n      color: 'blue',\n      decoration: 'underline'\n    },\n    strike: {\n      decoration: 'lineThrough'\n    },\n    p: {\n      margin: [0, 5, 0, 10]\n    },\n    ul: {\n      marginBottom: 5,\n      marginLeft: 5\n    },\n    table: {\n      marginBottom: 5\n    },\n    th: {\n      bold: true,\n      fillColor: '#EEEEEE'\n    }\n  }; // store the references to the images\n\n  this.imagesRef = [];\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\n\n  this.changeDefaultStyles = function () {\n    for (var keyStyle in options.defaultStyles) {\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\n        // if we want to remove a default style\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\n          delete this.defaultStyles[keyStyle];\n        } else {\n          for (var k in options.defaultStyles[keyStyle]) {\n            // if we want to delete a specific property\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\n          }\n        }\n      } else {\n        // if we add default styles\n        this.defaultStyles[keyStyle] = {};\n\n        for (var ks in options.defaultStyles[keyStyle]) {\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\n        }\n      }\n    }\n  };\n\n  if (options && options.defaultStyles) {\n    this.changeDefaultStyles();\n  }\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\n\n\n  this.convertHtml = function (htmlText) {\n    // Create a HTML DOM tree out of html string\n    var parser = new this.wndw.DOMParser();\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li))/gi, \"$1$4\");\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\n    var docDef = this.parseElement(parsedHtml.body, []); // remove first level\n\n    return docDef.stack || docDef.text;\n  };\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\n\n\n  this.parseElement = function (element, parents) {\n    var nodeName = element.nodeName.toUpperCase();\n    var nodeNameLowerCase = nodeName.toLowerCase();\n    var ret = {\n      text: []\n    };\n    var text,\n        needStack = false;\n\n    var dataset,\n        i,\n        key,\n        _this = this; // ignore some HTML tags\n\n\n    if (['COLGROUP', 'COL'].indexOf(nodeName) > -1) return '';\n\n    switch (element.nodeType) {\n      case 3:\n        {\n          // TEXT_NODE\n          if (element.textContent) {\n            text = element.textContent; // check if we have 'white-space' in the parent's style\n            // or if a parent is a <PRE>\n\n            var styleParentTextNode = this.parseStyle(parents[parents.length - 1], true);\n            var hasWhiteSpace = parents.findIndex(function (p) {\n              return p.nodeName === \"PRE\";\n            }) > -1;\n\n            for (i = 0; i < styleParentTextNode.length; i++) {\n              if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\n                hasWhiteSpace = styleParentTextNode[i].value;\n                break;\n              }\n            } // if no 'white-space' style, then deal with white spaces\n\n\n            if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\n            if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents); // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\n\n            if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR', 'UL', 'OL'].indexOf(parents[parents.length - 1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n            if (text) {\n              ret = {\n                'text': text\n              };\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n              return ret;\n            }\n          }\n\n          return '';\n        }\n\n      case 1:\n        {\n          // ELEMENT_NODE\n          if (!this.showHidden && element.style.display && element.style.display === 'none' || element.style.visibility && element.style.visibility === 'hidden') {\n            return;\n          }\n\n          ret.nodeName = nodeName;\n          if (element.id) ret.id = element.id;\n          parents.push(element);\n\n          if (element.childNodes && element.childNodes.length > 0) {\n            [].forEach.call(element.childNodes, function (child) {\n              var res = _this.parseElement(child, parents);\n\n              if (res) {\n                if (Array.isArray(res.text) && res.text.length === 0) res.text = '';\n                ret.text.push(res);\n              }\n            }); //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\n            // find if we need a 'stack' instead of a 'text'\n\n            needStack = this.searchForStack(ret);\n\n            if (needStack) {\n              ret.stack = ret.text.slice(0);\n              delete ret.text;\n            } else {\n              // apply all the inhirent classes and styles from the parents\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n            }\n          }\n\n          parents.pop();\n\n          switch (nodeName) {\n            case \"TABLE\":\n              {\n                var rowIndex; // the format for the table is table.body[[], [], â€¦]\n\n                ret.table = {\n                  body: []\n                };\n                var tbodies = ret.stack || ret.text;\n\n                if (Array.isArray(tbodies)) {\n                  rowIndex = 0; // Array with All Rows including THEAD\n\n                  var hasRowSpan = false; // TRUE if we have some rowspan\n                  // first round is to deal with colspan\n                  // for each THEAD / TBODY\n\n                  tbodies.forEach(function (tbody) {\n                    // for each row\n                    var rows = tbody.stack || tbody.text;\n\n                    if (Array.isArray(rows)) {\n                      rows.forEach(function (row) {\n                        var cells = row.stack || row.text; // for each cell\n\n                        if (Array.isArray(cells)) {\n                          ret.table.body[rowIndex] = [];\n                          cells.forEach(function (cell) {\n                            ret.table.body[rowIndex].push(cell); // do we have a colSpan?\n                            // if yes, insert empty cells due to colspan\n\n                            if (cell.colSpan > 1) {\n                              i = cell.colSpan; // insert an empty cell for each colspan\n\n                              while (--i > 0) {\n                                ret.table.body[rowIndex].push({\n                                  text: ''\n                                });\n                              }\n                            } // do we have a rowSpan ?\n\n\n                            if (cell.rowSpan > 1) hasRowSpan = true;\n                          });\n                          rowIndex++;\n                        }\n                      });\n                    }\n                  });\n\n                  if (hasRowSpan) {\n                    // we go through all again, just to deal with rowspan\n                    ret.table.body.forEach(function (row, rowIndex) {\n                      // for each row\n                      row.forEach(function (cell, cellIndex) {\n                        // do we have a rowSpan?\n                        if (cell.rowSpan > 1) {\n                          var len = cell.rowSpan;\n                          var cs,\n                              colspan = cell.colSpan ? cell.colSpan : 1;\n\n                          for (var i = 1; i <= len - 1; i++) {\n                            cs = colspan;\n\n                            if (ret.table.body[rowIndex + i]) {\n                              while (cs--) ret.table.body[rowIndex + i].splice(cellIndex, 0, {\n                                text: ''\n                              });\n                            } else {\n                              // if we have an empty <tr></tr>\n                              cell.rowSpan--;\n                            }\n                          }\n                        }\n                      });\n                    });\n                  }\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // if option tableAutoSize, then we try to apply the correct width/height on the table\n\n                if (this.tableAutoSize) {\n                  var cellsWidths = [];\n                  var cellsHeights = [];\n                  var tableWidths = [];\n                  var tableHeights = []; // determine if we have \"width:100%\" on the TABLE\n\n                  var fullWidth = element.getAttribute(\"width\") === \"100%\" || (element.getAttribute(\"style\") || \"\").replace(/width\\s*:\\s*100%/, \"width:100%\").includes(\"width:100%\");\n                  ret.table.body.forEach(function (row, rowIndex) {\n                    cellsWidths.push([]);\n                    cellsHeights.push([]);\n                    row.forEach(function (cell) {\n                      // we want to remember the different sizes\n                      var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\n                      var height = typeof cell.height !== 'undefined' ? cell.height : 'auto'; // check if we have colspan or rowspan\n                      // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\n\n                      if (width !== 'auto' && cell.colSpan > 1) {\n                        if (!isNaN(width)) width /= cell.colSpan;else width = 'auto';\n                      }\n\n                      if (height !== 'auto' && cell.rowSpan > 1) {\n                        if (!isNaN(height)) height /= cell.rowSpan;else height = 'auto';\n                      }\n\n                      cellsWidths[rowIndex].push(width);\n                      cellsHeights[rowIndex].push(height);\n                    });\n                  }); // determine the max width for each cell\n\n                  cellsWidths.forEach(function (row) {\n                    row.forEach(function (cellWidth, cellIndex) {\n                      var type = typeof tableWidths[cellIndex];\n\n                      if (type === \"undefined\" || cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex] || cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto') {\n                        tableWidths[cellIndex] = cellWidth;\n                      }\n                    });\n                  }); // determine the max height for each row\n\n                  cellsHeights.forEach(function (row, rowIndex) {\n                    row.forEach(function (cellHeight) {\n                      var type = typeof tableHeights[rowIndex];\n\n                      if (type === \"undefined\" || cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex] || cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto') {\n                        tableHeights[rowIndex] = cellHeight;\n                      }\n                    });\n                  });\n\n                  if (tableWidths.length > 0) {\n                    // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\n                    // then put widths:['*', '*' â€¦], for all columns\n                    //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\n                    // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\n                    // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\n                    if (fullWidth) tableWidths = tableWidths.map(function (w) {\n                      return w === 'auto' ? '*' : w;\n                    });\n                    ret.table.widths = tableWidths;\n                  }\n\n                  if (tableHeights.length > 0) ret.table.heights = tableHeights;\n                } // check if we have some data-pdfmake to apply\n\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\n                  dataset = element.dataset.pdfmake;\n                  if (dataset.charAt(1) === \"'\") dataset = dataset.replace(/'/g, '\"');\n\n                  try {\n                    dataset = JSON.parse(dataset);\n\n                    for (key in dataset) {\n                      if (key === \"layout\") {\n                        ret.layout = dataset[key];\n                      } else {\n                        ret.table[key] = dataset[key];\n                      }\n                    }\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }\n\n                break;\n              }\n\n            case \"TH\":\n            case \"TD\":\n              {\n                if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\") * 1;\n                if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\") * 1; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"SVG\":\n              {\n                ret = {\n                  svg: element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\n                  nodeName: 'SVG'\n                };\n                if (!this.removeTagClasses) ret.style = ['html-svg'];\n                break;\n              }\n\n            case \"BR\":\n              {\n                // for BR we return '\\n'\n                ret.text = [{\n                  text: '\\n'\n                }];\n                break;\n              }\n\n            case \"SUB\":\n            case \"SUP\":\n              {\n                ret[nodeName.toLowerCase()] = {\n                  offset: '30%',\n                  fontSize: 8\n                };\n                break;\n              }\n\n            case \"HR\":\n              {\n                // default style for the HR\n                var styleHR = {\n                  width: 514,\n                  type: \"line\",\n                  margin: [0, 12, 0, 12],\n                  thickness: 0.5,\n                  color: \"#000000\",\n                  left: 0\n                }; // we can override the default HR style with \"data-pdfmake\"\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  dataset = JSON.parse(element.dataset.pdfmake);\n\n                  for (key in dataset) {\n                    styleHR[key] = dataset[key];\n                  }\n                }\n\n                ret.margin = styleHR.margin;\n                ret.canvas = [{\n                  type: styleHR.type,\n                  x1: styleHR.left,\n                  y1: 0,\n                  x2: styleHR.width,\n                  y2: 0,\n                  lineWidth: styleHR.thickness,\n                  lineColor: styleHR.color\n                }];\n                delete ret.text;\n                break;\n              }\n\n            case \"OL\":\n            case \"UL\":\n              {\n                ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // check if we have `start`\n\n                if (element.getAttribute(\"start\")) {\n                  ret.start = element.getAttribute(\"start\") * 1;\n                } // check if we have \"type\"\n\n\n                switch (element.getAttribute(\"type\")) {\n                  case 'A':\n                    ret.type = 'upper-alpha';\n                    break;\n\n                  case 'a':\n                    ret.type = 'lower-alpha';\n                    break;\n\n                  case 'I':\n                    ret.type = 'upper-roman';\n                    break;\n\n                  case 'i':\n                    ret.type = 'lower-roman';\n                    break;\n                } // check if we have `list-style-type` or `list-style`\n\n\n                if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\n                break;\n              }\n\n            case \"LI\":\n              {\n                // if it's a stack, then check if the last child has a \"text\"\n                if (ret.stack && !ret.stack[ret.stack.length - 1].text) {\n                  // if not, we restructure our node\n                  text = ret.stack.slice(0, -1);\n                  ret = [{\n                    \"text\": text\n                  }, ret.stack[ret.stack.length - 1]];\n                } // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\n\n\n                if (Array.isArray(ret)) {\n                  ret = {\n                    stack: ret\n                  };\n                }\n\n                break;\n              }\n\n            case \"PRE\":\n              {\n                ret.preserveLeadingSpaces = true;\n                break;\n              }\n\n            case \"IMG\":\n              {\n                if (this.imagesByReference) {\n                  var src = element.getAttribute(\"data-src\") || element.getAttribute(\"src\");\n                  var index = this.imagesRef.indexOf(src);\n                  if (index > -1) ret.image = 'img_ref_' + imagesByReferenceSuffix + index;else {\n                    ret.image = 'img_ref_' + imagesByReferenceSuffix + this.imagesRef.length;\n                    this.imagesRef.push(src);\n                  }\n                } else {\n                  ret.image = element.getAttribute(\"src\");\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"A\":\n              {\n                // the link must be applied to the deeper `text` or stacked element (e.g. `image`)\n                var setLink = function (pointer, href) {\n                  pointer = pointer || {\n                    text: ''\n                  }; // for link without any text\n\n                  if (Array.isArray(pointer.text)) {\n                    return setLink(pointer.text[0], href);\n                  } else if (Array.isArray(pointer.stack)) {\n                    // if we have a more complex layer\n                    pointer.stack = pointer.stack.map(function (stack) {\n                      return setLink(stack, href);\n                    });\n                    return pointer;\n                  } // if 'href' starts with '#' then it's an internal link\n\n\n                  if (href.indexOf('#') === 0) pointer.linkToDestination = href.slice(1);else pointer.link = href;\n                  return pointer;\n                };\n\n                if (element.getAttribute(\"href\")) {\n                  ret = setLink(ret, element.getAttribute(\"href\"));\n                  ret.nodeName = \"A\";\n                }\n\n                break;\n              }\n\n            default:\n              {\n                // handle other cases\n                if (options && typeof options.customTag === \"function\") {\n                  ret = options.customTag.call(this, {\n                    element: element,\n                    parents: parents,\n                    ret: ret\n                  });\n                }\n              }\n          } // reduce the number of JSON properties\n\n\n          if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\n            ret.text = ret.text[0].text;\n          } // check if we have some data-pdfmake to apply\n\n\n          if (['HR', 'TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\n            dataset = JSON.parse(element.dataset.pdfmake);\n\n            for (key in dataset) {\n              ret[key] = dataset[key];\n            }\n          }\n\n          return ret;\n        }\n    }\n  };\n\n  this.searchForStack = function (ret) {\n    if (Array.isArray(ret.text)) {\n      for (var i = 0; i < ret.text.length; i++) {\n        if (ret.text[i].stack || ['P', 'DIV', 'TABLE', 'SVG', 'UL', 'OL', 'IMG', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(ret.text[i].nodeName) > -1) return true;\n        if (this.searchForStack(ret.text[i]) === true) return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\n\n\n  this.applyStyle = function (params) {\n    var cssClass = [];\n    var lastIndex = params.parents.length - 1;\n\n    var _this = this;\n\n    params.parents.forEach(function (parent, parentIndex) {\n      // classes\n      var parentNodeName = parent.nodeName.toLowerCase();\n\n      if (!_this.removeTagClasses) {\n        var htmlClass = 'html-' + parentNodeName;\n        if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\n      }\n\n      var parentClass = (parent.getAttribute(\"class\") || \"\").split(' ');\n      parentClass.forEach(function (p) {\n        if (p) cssClass.push(p);\n      }); // styles\n\n      var style; // not all the CSS properties should be inherent\n\n      var ignoreNonDescendentProperties = parentIndex !== lastIndex; // 1) the default styles\n\n      if (_this.defaultStyles[parentNodeName]) {\n        for (style in _this.defaultStyles[parentNodeName]) {\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\n            if (!ignoreNonDescendentProperties || ignoreNonDescendentProperties && style.indexOf('margin') === -1 && style.indexOf('border') === -1) {\n              // 'decoration' can be an array\n              if (style === 'decoration') {\n                if (!Array.isArray(params.ret[style])) params.ret[style] = []; // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\n\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\n                }\n              } else {\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\n              }\n            }\n          }\n        }\n      } // 2) element's style\n      // we want TD/TH to receive descendant properties from TR\n\n\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties = false;\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\n      style.forEach(function (stl) {\n        // 'decoration' can be an array\n        if (stl.key === \"decoration\") {\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key] = [];\n          params.ret[stl.key].push(stl.value);\n        } else {\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\n          // then we should change the correct index in `params.ret.margin` to reflect it\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\n            // order: left | top | right | bottom\n            switch (stl.key) {\n              case \"marginLeft\":\n                params.ret.margin[0] = stl.value;\n                break;\n\n              case \"marginTop\":\n                params.ret.margin[1] = stl.value;\n                break;\n\n              case \"marginRight\":\n                params.ret.margin[2] = stl.value;\n                break;\n\n              case \"marginBottom\":\n                params.ret.margin[3] = stl.value;\n                break;\n            }\n          } else {\n            params.ret[stl.key] = stl.value;\n          }\n        }\n      });\n    });\n    if (cssClass.length > 0) params.ret.style = cssClass;\n    return params.ret;\n  };\n  /**\r\n   * Border Value Rearrange a CSS expression (e.g. 'border:solid 10px red' to 'border:10px solid red')\r\n   *\r\n   * @param {String} styleStr The CSS expression values\r\n   * @returns {String} border value in global accepted format (e.g. 'border:10px solid red')\r\n   */\n\n\n  this.borderValueRearrange = function (styleStr) {\n    try {\n      var styleArray = styleStr.split(' ');\n      if (styleArray.length !== 3) return styleStr;\n      var v1 = \"0px\",\n          v2 = \"none\",\n          v3 = \"transparent\";\n      var style = [\"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\", \"mix\"];\n      styleArray.forEach(function (v) {\n        if (v.match(/^\\d/)) {\n          v1 = v;\n        } else if (style.indexOf(v) > -1) {\n          v2 = v;\n        } else {\n          v3 = v;\n        }\n      });\n      return v1 + ' ' + v2 + ' ' + v3;\n    } catch (e) {\n      return styleStr;\n    }\n  };\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\n\n\n  this.parseStyle = function (element, ignoreProperties) {\n    var style = element.getAttribute(\"style\") || \"\";\n    var ret = [];\n    style = style.split(';'); // check if we have \"width\" or \"height\"\n\n    var width = element.getAttribute(\"width\");\n    var height = element.getAttribute(\"height\");\n\n    if (width) {\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\n    }\n\n    if (height) {\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\n    } // check if we have 'color' or 'size' -- mainly for '<font>'\n\n\n    var color = element.getAttribute(\"color\");\n\n    if (color) {\n      ret.push({\n        key: \"color\",\n        value: this.parseColor(color)\n      });\n    }\n\n    var size = element.getAttribute(\"size\");\n\n    if (size !== null) {\n      // Getting and sanitizing the size value: it should be included between 1 and 7\n      size = Math.min(Math.max(1, parseInt(size)), 7); // Assigning the font size\n\n      ret.push({\n        key: 'fontSize',\n        value: Math.max(this.fontSizes[0], this.fontSizes[size - 1])\n      });\n    }\n\n    var styleDefs = style.map(function (style) {\n      return style.toLowerCase().split(':');\n    });\n    var borders = []; // special treatment for borders\n\n    var nodeName = element.nodeName.toUpperCase();\n\n    var _this = this;\n\n    styleDefs.forEach(function (styleDef) {\n      if (styleDef.length === 2) {\n        var key = styleDef[0].trim().toLowerCase();\n        var value = styleDef[1].trim();\n\n        if (_this.ignoreStyles.indexOf(key) === -1) {\n          switch (key) {\n            case \"margin\":\n              {\n                if (ignoreProperties) break; // pdfMake uses a different order than CSS\n\n                value = value.split(' ');\n                if (value.length === 1) value = [value[0], value[0], value[0], value[0]];else if (value.length === 2) value = [value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\n                else if (value.length === 3) value = [value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\n                else if (value.length === 4) value = [value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\n                // we now need to convert to PT\n\n                value.forEach(function (val, i) {\n                  value[i] = _this.convertToUnit(val);\n                }); // ignore if we have a FALSE in the table\n\n                if (value.indexOf(false) === -1) ret.push({\n                  key: key,\n                  value: value\n                });\n                break;\n              }\n\n            case \"line-height\":\n              {\n                // change % unit\n                if (typeof value === \"string\" && value.slice(-1) === '%') {\n                  value = value.slice(0, -1) / 100;\n                } else {\n                  value = _this.convertToUnit(value);\n                }\n\n                ret.push({\n                  key: \"lineHeight\",\n                  value: value\n                });\n                break;\n              }\n\n            case \"text-align\":\n              {\n                ret.push({\n                  key: \"alignment\",\n                  value: value\n                });\n                break;\n              }\n\n            case \"font-weight\":\n              {\n                if (value === \"bold\") ret.push({\n                  key: \"bold\",\n                  value: true\n                });\n                break;\n              }\n\n            case \"text-decoration\":\n              {\n                ret.push({\n                  key: \"decoration\",\n                  value: _this.toCamelCase(value)\n                });\n                break;\n              }\n\n            case \"font-style\":\n              {\n                if (value === \"italic\") ret.push({\n                  key: \"italics\",\n                  value: true\n                });\n                break;\n              }\n\n            case \"font-family\":\n              {\n                ret.push({\n                  key: \"font\",\n                  value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\n                    return g[0].toUpperCase();\n                  }).replace(/ ([a-z])/g, function (g) {\n                    return g[1].toUpperCase();\n                  })\n                });\n                break;\n              }\n\n            case \"color\":\n              {\n                ret.push({\n                  key: \"color\",\n                  value: _this.parseColor(value)\n                });\n                break;\n              }\n\n            case \"background-color\":\n              {\n                // if TH/TD and key is 'background', then we use 'fillColor' instead\n                ret.push({\n                  key: nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\",\n                  value: _this.parseColor(value)\n                });\n                break;\n              }\n\n            case \"text-indent\":\n              {\n                ret.push({\n                  key: \"leadingIndent\",\n                  value: _this.convertToUnit(value)\n                });\n                break;\n              }\n\n            case \"white-space\":\n              {\n                ret.push({\n                  key: \"preserveLeadingSpaces\",\n                  value: value === 'break-spaces' || value.slice(0, 3) === 'pre'\n                });\n                break;\n              }\n\n            default:\n              {\n                // for borders\n                if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\n                  if (!ignoreProperties) borders.push({\n                    key: key,\n                    value: value\n                  });\n                } else {\n                  // ignore some properties\n                  if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break; // for IMG only (see issue #181)\n\n                  if (nodeName === \"IMG\" && (key === 'width' || key === 'height')) {\n                    ret.push({\n                      key: key,\n                      value: _this.convertToUnit(value)\n                    });\n                    break;\n                  } // padding is not supported by PDFMake\n\n\n                  if (key.indexOf(\"padding\") === 0) break;\n                  if (key.indexOf(\"-\") > -1) key = _this.toCamelCase(key);\n\n                  if (value) {\n                    // convert value to a 'pt' when possible\n                    var parsedValue = _this.convertToUnit(value); // if we have 'font-size' with a parsedValue at false, then ignore it\n\n\n                    if (key === 'font-size' && parsedValue === false) break;\n                    ret.push({\n                      key: key,\n                      value: parsedValue === false ? value : parsedValue\n                    });\n                  }\n                }\n              }\n          }\n        }\n      }\n    }); // for borders\n\n    if (borders.length > 0) {\n      // we have to merge together the borders in two properties\n      var border = []; // array of boolean\n\n      var borderColor = []; // array of colors\n\n      borders.forEach(function (b) {\n        // we have 3 properties: width style color\n        b.value = _this.borderValueRearrange(b.value);\n        var properties = b.value.split(' ');\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g, \"$1$2 \").trim();\n        var index = -1,\n            i;\n        if (b.key.indexOf('-left') > -1) index = 0;else if (b.key.indexOf('-top') > -1) index = 1;else if (b.key.indexOf('-right') > -1) index = 2;else if (b.key.indexOf('-bottom') > -1) index = 3; // for the width\n\n        if (index > -1) {\n          border[index] = width > 0;\n        } else {\n          for (i = 0; i < 4; i++) border[i] = width > 0;\n        } // for the color\n\n\n        if (properties.length > 2) {\n          var color = properties.slice(2).join(' ');\n\n          if (index > -1) {\n            borderColor[index] = _this.parseColor(color);\n          } else {\n            for (i = 0; i < 4; i++) borderColor[i] = _this.parseColor(color);\n          }\n        }\n      }); // fill the gaps\n\n      for (var i = 0; i < 4; i++) {\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i] = true;\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i] = '#000000';\n      }\n\n      if (border.length > 0) ret.push({\n        key: 'border',\n        value: border\n      });\n      if (borderColor.length > 0) ret.push({\n        key: 'borderColor',\n        value: borderColor\n      });\n    }\n\n    return ret;\n  };\n\n  this.toCamelCase = function (str) {\n    return str.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n  }; // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0â€“255,0â€“255,0â€“255)\"\"\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\n\n\n  this.hsl2rgb = function (h, s, l) {\n    var a = s * Math.min(l, 1 - l);\n\n    var f = function (n) {\n      var k = (n + h / 30) % 12;\n      return Math.min(Math.floor((l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)) * 256), 255);\n    };\n\n    return \"rgb(\" + f(0) + \",\" + f(8) + \",\" + f(4) + \")\";\n  };\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\n\n\n  this.parseColor = function (color) {\n    // e.g. `#fff` or `#ff0048`\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$', 'i'); // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%) or rgba(0,125,250,0.8)\n\n    var rgbRegex = /^rgba?\\(\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?)(,\\s*\\d+(\\.\\d+)?)?\\)$/; // e.g. hsl(300, 10%, 20%)\n\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$'); // e.g. \"white\" or \"red\"\n\n    var nameRegex = new RegExp('^[a-z]+$', 'i');\n    var decimalColors,\n        decimalValue,\n        hexString,\n        ret = [];\n\n    if (haxRegex.test(color)) {\n      return color;\n    }\n\n    if (hslRegex.test(color)) {\n      // we want to convert to RGB\n      decimalColors = hslRegex.exec(color).slice(1); // first value should be from 0 to 360\n\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0, -1) * 360 / 100;else decimalValue = decimalColors[0] * 1;\n      ret.push(decimalValue); // next values should be % to convert to base 1\n\n      ret.push(decimalColors[2].slice(0, -1) / 100);\n      ret.push(decimalColors[4].slice(0, -1) / 100);\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\n      ret = [];\n    }\n\n    if (rgbRegex.test(color)) {\n      decimalColors = rgbRegex.exec(color).slice(1).filter(function (v, i) {\n        return i % 2 === 0 && typeof v !== \"undefined\";\n      });\n      decimalColors.forEach(function (decimalValue, i) {\n        // for the alpha number\n        if (i === 3) {\n          hexString = Math.round(decimalValue.replace(\",\", \"\") * 255).toString(16);\n        } else {\n          // if it ends with '%', we calculcate based on 100%=255\n          if (decimalValue.endsWith('%')) {\n            decimalValue = Math.round(decimalValue.slice(0, -1) * 255 / 100);\n          } else decimalValue = decimalValue * 1;\n\n          if (decimalValue > 255) {\n            decimalValue = 255;\n          }\n\n          hexString = '0' + decimalValue.toString(16);\n          hexString = hexString.slice(-2);\n        }\n\n        ret.push(hexString);\n      });\n      return '#' + ret.join('');\n    }\n\n    if (nameRegex.test(color)) return color;\n    console.error('Could not parse color \"' + color + '\"');\n    return color;\n  };\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em'/'in' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\n\n\n  this.convertToUnit = function (val) {\n    // if it's just a number, then return it\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val * 1;\n    var mtch = (val + \"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm|in)$/); // if we don't have a number with supported units, then return false\n\n    if (!mtch) return false;\n    val = mtch[1];\n\n    switch (mtch[3]) {\n      case 'px':\n        {\n          val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\n\n          break;\n        }\n\n      case 'em':\n      case 'rem':\n        {\n          val *= 12; // default font-size is 12pt\n\n          break;\n        }\n\n      case 'cm':\n        {\n          val = Math.round(val * 28.34646); // 1cm => 28.34646\n\n          break;\n        }\n\n      case 'in':\n        {\n          val *= 72; // 1in => 72 pt\n\n          break;\n        }\n    }\n\n    return val * 1;\n  };\n\n  var result = this.convertHtml(htmlText); // if we only pass a string without HTML code\n\n  if (typeof result === \"string\") result = {\n    text: result\n  }; // if images by reference\n\n  if (this.imagesByReference) {\n    result = {\n      content: result,\n      images: {}\n    };\n    this.imagesRef.forEach(function (src, i) {\n      // check if 'src' is a JSON string\n      result.images['img_ref_' + imagesByReferenceSuffix + i] = src.startsWith(\"{\") ? JSON.parse(src) : src;\n    });\n  }\n\n  return result;\n}\n\nmodule.exports = function (htmlText, options) {\n  return new htmlToPdfMake(htmlText, options);\n};","map":{"version":3,"names":["htmlToPdfMake","htmlText","options","wndw","window","tableAutoSize","imagesByReference","removeExtraBlanks","showHidden","removeTagClasses","ignoreStyles","Array","isArray","imagesByReferenceSuffix","Math","random","toString","slice","fontSizes","defaultStyles","b","bold","strong","u","decoration","del","s","em","italics","i","h1","fontSize","marginBottom","h2","h3","h4","h5","h6","a","color","strike","p","margin","ul","marginLeft","table","th","fillColor","imagesRef","changeDefaultStyles","keyStyle","hasOwnProperty","k","ks","convertHtml","parser","DOMParser","replace","parsedHtml","parseFromString","docDef","parseElement","body","stack","text","element","parents","nodeName","toUpperCase","nodeNameLowerCase","toLowerCase","ret","needStack","dataset","key","_this","indexOf","nodeType","textContent","styleParentTextNode","parseStyle","length","hasWhiteSpace","findIndex","value","replaceText","applyStyle","style","display","visibility","id","push","childNodes","forEach","call","child","res","searchForStack","pop","rowIndex","tbodies","hasRowSpan","tbody","rows","row","cells","cell","colSpan","rowSpan","cellIndex","len","cs","colspan","splice","concat","cellsWidths","cellsHeights","tableWidths","tableHeights","fullWidth","getAttribute","includes","width","height","isNaN","cellWidth","type","cellHeight","map","w","widths","heights","pdfmake","charAt","JSON","parse","layout","e","console","error","svg","outerHTML","offset","styleHR","thickness","left","canvas","x1","y1","x2","y2","lineWidth","lineColor","start","listStyle","listStyleType","preserveLeadingSpaces","src","index","image","setLink","pointer","href","linkToDestination","link","customTag","params","cssClass","lastIndex","parent","parentIndex","parentNodeName","htmlClass","unshift","parentClass","split","ignoreNonDescendentProperties","stringify","stl","borderValueRearrange","styleStr","styleArray","v1","v2","v3","v","match","ignoreProperties","convertToUnit","parseColor","size","min","max","parseInt","styleDefs","borders","styleDef","trim","val","toCamelCase","g","parsedValue","border","borderColor","properties","join","str","hsl2rgb","h","l","f","n","floor","haxRegex","RegExp","rgbRegex","hslRegex","nameRegex","decimalColors","decimalValue","hexString","test","exec","endsWith","filter","round","parseFloat","isFinite","mtch","result","content","images","startsWith","module","exports"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/html-to-pdfmake/index.js"],"sourcesContent":["// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\r\n// and https://github.com/bpampuch/pdfmake/issues/205\r\n\r\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\r\n\r\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF â€“ use this option to remove them\r\n *   @param  {Boolean} [showHidden=false] TRUE if the 'display:none' elements should be displayed\r\n *   @param  {Boolean} [removeTagClasses=false] TRUE if we don't want to have 'html-TAG' added as a class for each node\r\n *   @param  {Array} [ignoreStyles=[]] An array of style property to ignore\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\r\n//var util = require(\"util\"); // to debug\r\nfunction htmlToPdfMake(htmlText, options) {\r\n  'use strict';\r\n  this.wndw = (options && options.window ? options.window : window);\r\n  this.tableAutoSize = (options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false);\r\n  this.imagesByReference = (options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false);\r\n  this.removeExtraBlanks = (options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false);\r\n  this.showHidden = (options && typeof options.showHidden === \"boolean\" ? options.showHidden : false);\r\n  this.removeTagClasses = (options && typeof options.removeTagClasses === \"boolean\" ? options.removeTagClasses : false);\r\n  this.ignoreStyles = (options && Array.isArray(options.ignoreStyles) ? options.ignoreStyles : []);\r\n\r\n  // A random string to be used in the image references\r\n  var imagesByReferenceSuffix = (Math.random().toString(36).slice(2,8));\r\n\r\n  // Used with the size attribute on the font elements to calculate relative font size\r\n  this.fontSizes = (options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]);\r\n\r\n  // set default styles\r\n  this.defaultStyles = {\r\n    b: {bold:true},\r\n    strong: {bold:true},\r\n    u: {decoration:'underline'},\r\n    del: {decoration:'lineThrough'},\r\n    s: {decoration: 'lineThrough'},\r\n    em: {italics:true},\r\n    i: {italics:true},\r\n    h1: {fontSize:24, bold:true, marginBottom:5},\r\n    h2: {fontSize:22, bold:true, marginBottom:5},\r\n    h3: {fontSize:20, bold:true, marginBottom:5},\r\n    h4: {fontSize:18, bold:true, marginBottom:5},\r\n    h5: {fontSize:16, bold:true, marginBottom:5},\r\n    h6: {fontSize:14, bold:true, marginBottom:5},\r\n    a: {color:'blue', decoration:'underline'},\r\n    strike: {decoration: 'lineThrough'},\r\n    p: {margin:[0, 5, 0, 10]},\r\n    ul: {marginBottom:5,marginLeft:5},\r\n    table: {marginBottom:5},\r\n    th: {bold:true, fillColor:'#EEEEEE'}\r\n  }\r\n\r\n  // store the references to the images\r\n  this.imagesRef = [];\r\n\r\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\r\n  this.changeDefaultStyles = function () {\r\n    for (var keyStyle in options.defaultStyles) {\r\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\r\n        // if we want to remove a default style\r\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\r\n          delete this.defaultStyles[keyStyle];\r\n        } else {\r\n          for (var k in options.defaultStyles[keyStyle]) {\r\n            // if we want to delete a specific property\r\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];\r\n            else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\r\n          }\r\n        }\r\n      } else {\r\n        // if we add default styles\r\n        this.defaultStyles[keyStyle] = {}\r\n        for (var ks in options.defaultStyles[keyStyle]) {\r\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (options && options.defaultStyles) {\r\n    this.changeDefaultStyles();\r\n  }\r\n\r\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\r\n  this.convertHtml = function(htmlText) {\r\n    // Create a HTML DOM tree out of html string\r\n    var parser = new this.wndw.DOMParser();\r\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li))/gi, \"$1$4\");\r\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\r\n\r\n    var docDef = this.parseElement(parsedHtml.body, []);\r\n\r\n    // remove first level\r\n    return docDef.stack || docDef.text;\r\n  }\r\n\r\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\r\n  this.parseElement = function(element, parents) {\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var nodeNameLowerCase = nodeName.toLowerCase();\r\n    var ret = {text:[]};\r\n    var text, needStack=false;\r\n    var dataset, i, key, _this=this;\r\n\r\n    // ignore some HTML tags\r\n    if (['COLGROUP','COL'].indexOf(nodeName) > -1) return '';\r\n\r\n    switch(element.nodeType) {\r\n      case 3: { // TEXT_NODE\r\n        if (element.textContent) {\r\n          text = element.textContent;\r\n          // check if we have 'white-space' in the parent's style\r\n          // or if a parent is a <PRE>\r\n          var styleParentTextNode = this.parseStyle(parents[parents.length-1], true);\r\n          var hasWhiteSpace = (parents.findIndex(function(p) { return p.nodeName === \"PRE\" })>-1);\r\n          for (i=0; i<styleParentTextNode.length; i++) {\r\n            if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\r\n              hasWhiteSpace=styleParentTextNode[i].value;\r\n              break;\r\n            }\r\n          }\r\n          // if no 'white-space' style, then deal with white spaces\r\n          if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\r\n          if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\r\n\r\n          // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\r\n          if (['TABLE','THEAD','TBODY','TFOOT','TR','UL','OL'].indexOf(parents[parents.length-1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n          if (text) {\r\n            ret = {'text':text};\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        return '';\r\n      }\r\n      case 1: { // ELEMENT_NODE\r\n        if (!this.showHidden && (element.style.display && element.style.display === 'none') || (element.style.visibility && element.style.visibility === 'hidden')) {\r\n          return;\r\n        }\r\n\r\n        ret.nodeName = nodeName;\r\n        if (element.id) ret.id = element.id;\r\n        parents.push(element);\r\n\r\n        if (element.childNodes && element.childNodes.length>0) {\r\n          [].forEach.call(element.childNodes, function(child) {\r\n            var res = _this.parseElement(child, parents);\r\n            if (res) {\r\n              if (Array.isArray(res.text) && res.text.length===0) res.text='';\r\n              ret.text.push(res);\r\n            }\r\n          });\r\n          //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\r\n          // find if we need a 'stack' instead of a 'text'\r\n          needStack = this.searchForStack(ret);\r\n          if (needStack) {\r\n            ret.stack = ret.text.slice(0);\r\n            delete ret.text;\r\n          } else {\r\n            // apply all the inhirent classes and styles from the parents\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n          }\r\n        }\r\n        parents.pop();\r\n\r\n        switch(nodeName) {\r\n          case \"TABLE\":{\r\n            var rowIndex;\r\n            // the format for the table is table.body[[], [], â€¦]\r\n            ret.table = {body:[]};\r\n\r\n            var tbodies = (ret.stack || ret.text);\r\n            if (Array.isArray(tbodies)) {\r\n              rowIndex = 0;\r\n              // Array with All Rows including THEAD\r\n              var hasRowSpan = false; // TRUE if we have some rowspan\r\n              // first round is to deal with colspan\r\n              // for each THEAD / TBODY\r\n              tbodies.forEach(function(tbody) {\r\n                // for each row\r\n                var rows = (tbody.stack || tbody.text);\r\n                if (Array.isArray(rows)) {\r\n                  rows.forEach(function(row) {\r\n                    var cells = (row.stack || row.text);\r\n                    // for each cell\r\n                    if (Array.isArray(cells)) {\r\n                      ret.table.body[rowIndex] = [];\r\n                      cells.forEach(function(cell) {\r\n                        ret.table.body[rowIndex].push(cell);\r\n                        // do we have a colSpan?\r\n                        // if yes, insert empty cells due to colspan\r\n                        if (cell.colSpan>1) {\r\n                          i = cell.colSpan;\r\n                          // insert an empty cell for each colspan\r\n                          while (--i > 0) {\r\n                            ret.table.body[rowIndex].push({text:''});\r\n                          }\r\n                        }\r\n\r\n                        // do we have a rowSpan ?\r\n                        if (cell.rowSpan > 1) hasRowSpan=true;\r\n                      });\r\n                      rowIndex++;\r\n                    }\r\n                 });\r\n                }\r\n              });\r\n\r\n              if (hasRowSpan) {\r\n                // we go through all again, just to deal with rowspan\r\n                ret.table.body.forEach(function(row, rowIndex) {\r\n                  // for each row\r\n                  row.forEach(function(cell, cellIndex) {\r\n                    // do we have a rowSpan?\r\n                    if (cell.rowSpan>1) {\r\n                      var len = cell.rowSpan;\r\n                      var cs, colspan = (cell.colSpan ? cell.colSpan : 1);\r\n                      for (var i=1; i <= len-1; i++) {\r\n                        cs = colspan;\r\n                        if (ret.table.body[rowIndex+i]) {\r\n                          while (cs--) ret.table.body[rowIndex+i].splice(cellIndex, 0, {text:''});\r\n                        } else {\r\n                          // if we have an empty <tr></tr>\r\n                          cell.rowSpan--;\r\n                        }\r\n                      }\r\n                    }\r\n                  })\r\n                });\r\n              }\r\n            }\r\n\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n\r\n            // if option tableAutoSize, then we try to apply the correct width/height on the table\r\n            if (this.tableAutoSize) {\r\n              var cellsWidths = [];\r\n              var cellsHeights = [];\r\n              var tableWidths = [];\r\n              var tableHeights = [];\r\n              // determine if we have \"width:100%\" on the TABLE\r\n              var fullWidth = (element.getAttribute(\"width\") === \"100%\" || (element.getAttribute(\"style\")||\"\").replace(/width\\s*:\\s*100%/, \"width:100%\").includes(\"width:100%\"));\r\n\r\n              ret.table.body.forEach(function(row, rowIndex) {\r\n                cellsWidths.push([]);\r\n                cellsHeights.push([]);\r\n                row.forEach(function(cell) {\r\n                  // we want to remember the different sizes\r\n                  var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\r\n                  var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\r\n                  // check if we have colspan or rowspan\r\n                  // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\r\n                  if (width !== 'auto' && cell.colSpan>1) {\r\n                    if (!isNaN(width)) width /= cell.colSpan;\r\n                    else width = 'auto';\r\n                  }\r\n                  if (height !== 'auto' && cell.rowSpan>1) {\r\n                    if (!isNaN(height)) height /= cell.rowSpan;\r\n                    else height = 'auto';\r\n                  }\r\n                  cellsWidths[rowIndex].push(width);\r\n                  cellsHeights[rowIndex].push(height);\r\n                });\r\n              });\r\n\r\n              // determine the max width for each cell\r\n              cellsWidths.forEach(function(row) {\r\n                row.forEach(function(cellWidth, cellIndex) {\r\n                  var type = typeof tableWidths[cellIndex];\r\n                  if (type === \"undefined\" || (cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex]) || (cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto')) {\r\n                    tableWidths[cellIndex] = cellWidth;\r\n                  }\r\n                });\r\n              });\r\n              // determine the max height for each row\r\n              cellsHeights.forEach(function(row, rowIndex) {\r\n                row.forEach(function(cellHeight) {\r\n                  var type = typeof tableHeights[rowIndex];\r\n                  if (type === \"undefined\" || (cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex]) || (cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto')) {\r\n                    tableHeights[rowIndex] = cellHeight;\r\n                  }\r\n                });\r\n              });\r\n              if (tableWidths.length > 0) {\r\n                // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\r\n                // then put widths:['*', '*' â€¦], for all columns\r\n                //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\r\n                // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\r\n                // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\r\n                if (fullWidth) tableWidths=tableWidths.map(function(w) { return w==='auto' ? '*' : w });\r\n                ret.table.widths = tableWidths;\r\n              }\r\n              if (tableHeights.length > 0) ret.table.heights = tableHeights;\r\n            }\r\n\r\n            // check if we have some data-pdfmake to apply\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\r\n              dataset = element.dataset.pdfmake;\r\n              if (dataset.charAt(1) === \"'\") dataset=dataset.replace(/'/g,'\"');\r\n              try {\r\n                dataset = JSON.parse(dataset);\r\n                for (key in dataset) {\r\n                  if (key === \"layout\") {\r\n                    ret.layout = dataset[key];\r\n                  } else {\r\n                    ret.table[key] = dataset[key];\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case \"TH\":\r\n          case \"TD\":{\r\n            if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\")*1;\r\n            if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\")*1;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"SVG\": {\r\n            ret = {\r\n              svg:element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\r\n              nodeName:'SVG'\r\n            }\r\n            if (!this.removeTagClasses) ret.style=['html-svg'];\r\n            break;\r\n          }\r\n          case \"BR\": {\r\n            // for BR we return '\\n'\r\n            ret.text = [{text:'\\n'}];\r\n            break;\r\n          }\r\n          case \"SUB\":\r\n          case \"SUP\": {\r\n            ret[nodeName.toLowerCase()] = { offset: '30%', fontSize: 8 };\r\n            break;\r\n          }\r\n          case \"HR\": {\r\n            // default style for the HR\r\n            var styleHR = {\r\n              width: 514,\r\n              type: \"line\",\r\n              margin: [0, 12, 0, 12],\r\n              thickness: 0.5,\r\n              color: \"#000000\",\r\n              left: 0\r\n            };\r\n            // we can override the default HR style with \"data-pdfmake\"\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              dataset = JSON.parse(element.dataset.pdfmake);\r\n              for (key in dataset) {\r\n                styleHR[key] = dataset[key];\r\n              }\r\n            }\r\n\r\n            ret.margin = styleHR.margin;\r\n            ret.canvas = [\r\n              {\r\n                type: styleHR.type,\r\n                x1: styleHR.left,\r\n                y1: 0,\r\n                x2: styleHR.width,\r\n                y2: 0,\r\n                lineWidth: styleHR.thickness,\r\n                lineColor: styleHR.color\r\n              }\r\n            ];\r\n            delete ret.text;\r\n\r\n            break;\r\n          }\r\n          case \"OL\":\r\n          case \"UL\": {\r\n            ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            // check if we have `start`\r\n            if (element.getAttribute(\"start\")) {\r\n              ret.start = element.getAttribute(\"start\")*1;\r\n            }\r\n            // check if we have \"type\"\r\n            switch (element.getAttribute(\"type\")) {\r\n              case 'A': ret.type = 'upper-alpha'; break;\r\n              case 'a': ret.type = 'lower-alpha'; break;\r\n              case 'I': ret.type = 'upper-roman'; break;\r\n              case 'i': ret.type = 'lower-roman'; break;\r\n            }\r\n\r\n            // check if we have `list-style-type` or `list-style`\r\n            if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\r\n            break;\r\n          }\r\n          case \"LI\": {\r\n            // if it's a stack, then check if the last child has a \"text\"\r\n            if (ret.stack && !ret.stack[ret.stack.length-1].text) {\r\n              // if not, we restructure our node\r\n              text = ret.stack.slice(0, -1);\r\n              ret = [ {\"text\": text}, ret.stack[ret.stack.length-1] ];\r\n            }\r\n            // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\r\n            if (Array.isArray(ret)) {\r\n              ret = {stack:ret};\r\n            }\r\n            break;\r\n          }\r\n          case \"PRE\":{\r\n            ret.preserveLeadingSpaces = true;\r\n            break;\r\n          }\r\n          case \"IMG\": {\r\n            if (this.imagesByReference) {\r\n              var src = element.getAttribute(\"data-src\") || element.getAttribute(\"src\");\r\n              var index = this.imagesRef.indexOf(src);\r\n              if (index>-1) ret.image = 'img_ref_'+imagesByReferenceSuffix+index;\r\n              else {\r\n                ret.image = 'img_ref_'+imagesByReferenceSuffix+this.imagesRef.length;\r\n                this.imagesRef.push(src);\r\n              }\r\n            } else {\r\n              ret.image = element.getAttribute(\"src\");\r\n            }\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"A\": {\r\n            // the link must be applied to the deeper `text` or stacked element (e.g. `image`)\r\n            var setLink = function(pointer, href) {\r\n              pointer = pointer || {text:''}; // for link without any text\r\n              if (Array.isArray(pointer.text)) {\r\n                return setLink(pointer.text[0], href);\r\n              } else if (Array.isArray(pointer.stack)) {\r\n                // if we have a more complex layer\r\n                pointer.stack = pointer.stack.map(function(stack) {\r\n                  return setLink(stack, href);\r\n                });\r\n                return pointer;\r\n              }\r\n              // if 'href' starts with '#' then it's an internal link\r\n              if (href.indexOf('#') === 0) pointer.linkToDestination=href.slice(1);\r\n              else pointer.link = href;\r\n              return pointer;\r\n            }\r\n            if (element.getAttribute(\"href\")) {\r\n              ret = setLink(ret, element.getAttribute(\"href\"));\r\n              ret.nodeName = \"A\";\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            // handle other cases\r\n            if (options && typeof options.customTag === \"function\") {\r\n              ret = options.customTag.call(this, {element:element, parents:parents, ret:ret});\r\n            }\r\n          }\r\n        }\r\n\r\n        // reduce the number of JSON properties\r\n        if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\r\n          ret.text = ret.text[0].text;\r\n        }\r\n\r\n        // check if we have some data-pdfmake to apply\r\n        if (['HR','TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\r\n          dataset = JSON.parse(element.dataset.pdfmake);\r\n          for (key in dataset) {\r\n            ret[key] = dataset[key];\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  this.searchForStack = function(ret) {\r\n    if (Array.isArray(ret.text)) {\r\n      for (var i=0; i<ret.text.length; i++) {\r\n        if (ret.text[i].stack || ['P','DIV','TABLE','SVG','UL','OL','IMG','H1','H2','H3','H4','H5','H6'].indexOf(ret.text[i].nodeName) > -1) return true;\r\n        if (this.searchForStack(ret.text[i]) === true) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\r\n  this.applyStyle = function(params) {\r\n    var cssClass = [];\r\n    var lastIndex = params.parents.length-1;\r\n    var _this = this;\r\n    params.parents.forEach(function(parent, parentIndex) {\r\n      // classes\r\n      var parentNodeName = parent.nodeName.toLowerCase();\r\n      if (!_this.removeTagClasses) {\r\n        var htmlClass = 'html-' + parentNodeName;\r\n        if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\r\n      }\r\n      var parentClass = (parent.getAttribute(\"class\")||\"\").split(' ');\r\n      parentClass.forEach(function(p) {\r\n        if (p) cssClass.push(p);\r\n      });\r\n      // styles\r\n      var style;\r\n      // not all the CSS properties should be inherent\r\n      var ignoreNonDescendentProperties = (parentIndex!==lastIndex);\r\n      // 1) the default styles\r\n      if (_this.defaultStyles[parentNodeName]) {\r\n        for (style in _this.defaultStyles[parentNodeName]) {\r\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\r\n            if (!ignoreNonDescendentProperties ||\r\n                (ignoreNonDescendentProperties &&\r\n                  style.indexOf('margin') === -1 &&\r\n                  style.indexOf('border') === -1\r\n                )\r\n               ) {\r\n              // 'decoration' can be an array\r\n              if (style === 'decoration') {\r\n                if (!Array.isArray(params.ret[style])) params.ret[style]=[];\r\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\r\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\r\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\r\n                }\r\n              } else {\r\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 2) element's style\r\n      // we want TD/TH to receive descendant properties from TR\r\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties=false;\r\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\r\n      style.forEach(function(stl) {\r\n        // 'decoration' can be an array\r\n        if (stl.key === \"decoration\") {\r\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key]=[];\r\n          params.ret[stl.key].push(stl.value);\r\n        } else {\r\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\r\n          // then we should change the correct index in `params.ret.margin` to reflect it\r\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\r\n            // order: left | top | right | bottom\r\n            switch(stl.key) {\r\n              case \"marginLeft\": params.ret.margin[0]=stl.value; break;\r\n              case \"marginTop\": params.ret.margin[1]=stl.value; break;\r\n              case \"marginRight\": params.ret.margin[2]=stl.value; break;\r\n              case \"marginBottom\": params.ret.margin[3]=stl.value; break;\r\n            }\r\n          } else {\r\n            params.ret[stl.key] = stl.value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (cssClass.length>0) params.ret.style = cssClass;\r\n    return params.ret;\r\n  }\r\n\r\n\t/**\r\n\t * Border Value Rearrange a CSS expression (e.g. 'border:solid 10px red' to 'border:10px solid red')\r\n\t *\r\n\t * @param {String} styleStr The CSS expression values\r\n\t * @returns {String} border value in global accepted format (e.g. 'border:10px solid red')\r\n\t */\r\n\tthis.borderValueRearrange = function(styleStr) {\r\n\t\ttry {\r\n\t\t\tvar styleArray = styleStr.split(' ');\r\n      if (styleArray.length!==3) return styleStr;\r\n\t\t\tvar v1 = \"0px\", v2 = \"none\", v3 = \"transparent\";\r\n\t\t\tvar style = [\"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\", \"mix\"];\r\n\t\t\tstyleArray.forEach(function (v) {\r\n\t\t\t\tif (v.match(/^\\d/)) {\r\n\t\t\t\t\tv1 = v;\r\n\t\t\t\t} else if (style.indexOf(v) > -1) {\r\n\t\t\t\t\tv2 = v;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tv3 = v;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn v1 + ' ' + v2 + ' ' + v3;\r\n\t\t} catch (e) {\r\n\t\t\treturn styleStr;\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\r\n  this.parseStyle = function(element, ignoreProperties) {\r\n    var style = element.getAttribute(\"style\") || \"\";\r\n    var ret = [];\r\n    style = style.split(';');\r\n    // check if we have \"width\" or \"height\"\r\n    var width = element.getAttribute(\"width\");\r\n    var height = element.getAttribute(\"height\");\r\n    if (width) {\r\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\r\n    }\r\n    if (height) {\r\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\r\n    }\r\n    // check if we have 'color' or 'size' -- mainly for '<font>'\r\n    var color = element.getAttribute(\"color\");\r\n    if (color) {\r\n      ret.push({key:\"color\", value:this.parseColor(color)});\r\n    }\r\n    var size = element.getAttribute(\"size\");\r\n    if (size !== null) {\r\n      // Getting and sanitizing the size value: it should be included between 1 and 7\r\n      size = Math.min(Math.max(1, parseInt(size)), 7);\r\n      // Assigning the font size\r\n      ret.push({key:'fontSize', value:Math.max(this.fontSizes[0], this.fontSizes[size - 1])});\r\n    }\r\n\r\n    var styleDefs = style.map(function(style) { return style.toLowerCase().split(':') });\r\n    var borders = []; // special treatment for borders\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var _this=this;\r\n    styleDefs.forEach(function(styleDef) {\r\n      if (styleDef.length===2) {\r\n        var key = styleDef[0].trim().toLowerCase();\r\n        var value = styleDef[1].trim();\r\n        if (_this.ignoreStyles.indexOf(key) === -1) {\r\n          switch (key) {\r\n            case \"margin\": {\r\n              if (ignoreProperties) break;\r\n              // pdfMake uses a different order than CSS\r\n              value = value.split(' ');\r\n              if (value.length===1) value=[value[0], value[0], value[0], value[0]];\r\n              else if (value.length===2) value=[value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\r\n              else if (value.length===3) value=[value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\r\n              else if (value.length===4) value=[value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\r\n\r\n              // we now need to convert to PT\r\n              value.forEach(function(val, i) {\r\n                value[i] = _this.convertToUnit(val);\r\n              });\r\n              // ignore if we have a FALSE in the table\r\n              if (value.indexOf(false) === -1) ret.push({key:key, value:value});\r\n              break;\r\n            }\r\n            case \"line-height\": {\r\n              // change % unit\r\n              if (typeof value === \"string\" && value.slice(-1) === '%') {\r\n                value = value.slice(0,-1) / 100;\r\n              } else {\r\n                value = _this.convertToUnit(value);\r\n              }\r\n              ret.push({key:\"lineHeight\", value:value});\r\n              break;\r\n            }\r\n            case \"text-align\": {\r\n              ret.push({key:\"alignment\", value:value});\r\n              break;\r\n            }\r\n            case \"font-weight\": {\r\n              if (value === \"bold\") ret.push({key:\"bold\", value:true});\r\n              break;\r\n            }\r\n            case \"text-decoration\": {\r\n              ret.push({key:\"decoration\", value:_this.toCamelCase(value)})\r\n              break;\r\n            }\r\n            case \"font-style\": {\r\n              if (value===\"italic\") ret.push({key:\"italics\", value:true});\r\n              break;\r\n            }\r\n            case \"font-family\": {\r\n\t\t\t\t\t\t\tret.push({\r\n\t\t\t\t\t\t\t\tkey: \"font\", value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\r\n\t\t\t\t\t\t\t\t\treturn g[0].toUpperCase();\r\n\t\t\t\t\t\t\t\t}).replace(/ ([a-z])/g, function (g) {\r\n\t\t\t\t\t\t\t\t\treturn g[1].toUpperCase();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tbreak;\r\n            }\r\n            case \"color\": {\r\n              ret.push({key:\"color\", value:_this.parseColor(value)})\r\n              break;\r\n            }\r\n            case \"background-color\": {\r\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\r\n              ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\"), value:_this.parseColor(value)})\r\n              break;\r\n            }\r\n            case \"text-indent\": {\r\n              ret.push({key:\"leadingIndent\", value:_this.convertToUnit(value)});\r\n              break;\r\n            }\r\n            case \"white-space\": {\r\n              ret.push({key:\"preserveLeadingSpaces\", value:(value==='break-spaces' || value.slice(0,3) === 'pre')});\r\n              break;\r\n            }\r\n            default: {\r\n              // for borders\r\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\r\n                if (!ignoreProperties) borders.push({key:key, value:value});\r\n              } else {\r\n                // ignore some properties\r\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\r\n                // for IMG only (see issue #181)\r\n                if (nodeName === \"IMG\" && (key === 'width' || key === 'height')) {\r\n                  ret.push({key:key, value: _this.convertToUnit(value)});\r\n                  break;\r\n                }\r\n\r\n                // padding is not supported by PDFMake\r\n                if (key.indexOf(\"padding\") === 0) break;\r\n                if (key.indexOf(\"-\") > -1) key=_this.toCamelCase(key);\r\n                if (value) {\r\n                  // convert value to a 'pt' when possible\r\n                  var parsedValue = _this.convertToUnit(value);\r\n                  // if we have 'font-size' with a parsedValue at false, then ignore it\r\n                  if (key === 'font-size' && parsedValue === false) break;\r\n                  ret.push({key:key, value:(parsedValue === false ? value : parsedValue)});\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // for borders\r\n    if (borders.length > 0) {\r\n      // we have to merge together the borders in two properties\r\n      var border = []; // array of boolean\r\n      var borderColor = []; // array of colors\r\n      borders.forEach(function(b) {\r\n        // we have 3 properties: width style color\r\n\t\t\t\tb.value = _this.borderValueRearrange(b.value);\r\n        var properties = b.value.split(' ');\r\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g,\"$1$2 \").trim();\r\n        var index = -1, i;\r\n        if (b.key.indexOf('-left') > -1) index=0;\r\n        else if (b.key.indexOf('-top') > -1) index=1;\r\n        else if (b.key.indexOf('-right') > -1) index=2;\r\n        else if (b.key.indexOf('-bottom') > -1) index=3;\r\n        // for the width\r\n        if (index > -1) {\r\n          border[index] = (width > 0);\r\n        } else {\r\n          for (i=0; i<4; i++) border[i] = (width > 0);\r\n        }\r\n        // for the color\r\n        if (properties.length > 2) {\r\n          var color = properties.slice(2).join(' ');\r\n          if (index > -1) {\r\n            borderColor[index] = _this.parseColor(color);\r\n          } else {\r\n            for (i=0; i<4; i++) borderColor[i] = _this.parseColor(color);\r\n          }\r\n        }\r\n      });\r\n      // fill the gaps\r\n      for (var i=0; i<4; i++) {\r\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i]=true;\r\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i]='#000000';\r\n      }\r\n      if (border.length > 0) ret.push({key:'border', value:border});\r\n      if (borderColor.length > 0) ret.push({key:'borderColor', value:borderColor});\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  this.toCamelCase = function(str) {\r\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\r\n  }\r\n\r\n  // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0â€“255,0â€“255,0â€“255)\"\"\r\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\r\n  this.hsl2rgb = function(h,s,l) {\r\n    var a = s*Math.min(l,1-l);\r\n    var f = function(n) {\r\n      var k=(n+h/30)%12;\r\n      return Math.min(Math.floor((l - a*Math.max(Math.min(k-3,9-k,1),-1))*256),255);\r\n    }\r\n    return \"rgb(\"+f(0)+\",\"+f(8)+\",\"+f(4)+\")\";\r\n  }\r\n\r\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\r\n  this.parseColor = function(color) {\r\n    // e.g. `#fff` or `#ff0048`\r\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$', 'i');\r\n\r\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%) or rgba(0,125,250,0.8)\r\n    var rgbRegex = /^rgba?\\(\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?)(,\\s*\\d+(\\.\\d+)?)?\\)$/;\r\n\r\n    // e.g. hsl(300, 10%, 20%)\r\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\r\n\r\n    // e.g. \"white\" or \"red\"\r\n    var nameRegex = new RegExp('^[a-z]+$', 'i');\r\n\r\n    var decimalColors, decimalValue, hexString, ret=[];\r\n\r\n    if (haxRegex.test(color)) {\r\n      return color;\r\n    }\r\n\r\n    if (hslRegex.test(color)) {\r\n      // we want to convert to RGB\r\n      decimalColors = hslRegex.exec(color).slice(1);\r\n      // first value should be from 0 to 360\r\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0,-1) * 360 / 100;\r\n      else decimalValue = decimalColors[0]*1;\r\n      ret.push(decimalValue);\r\n      // next values should be % to convert to base 1\r\n      ret.push(decimalColors[2].slice(0,-1) / 100);\r\n      ret.push(decimalColors[4].slice(0,-1) / 100);\r\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\r\n      ret = [];\r\n    }\r\n    if (rgbRegex.test(color)) {\r\n      decimalColors = rgbRegex.exec(color).slice(1).filter(function(v,i) {\r\n        return i%2===0 && typeof v !== \"undefined\";\r\n      });\r\n\r\n      decimalColors.forEach(function(decimalValue, i) {\r\n        // for the alpha number\r\n        if (i === 3) {\r\n          hexString = Math.round(decimalValue.replace(\",\",\"\") * 255).toString(16);\r\n        } else {\r\n          // if it ends with '%', we calculcate based on 100%=255\r\n          if (decimalValue.endsWith('%')) {\r\n            decimalValue = Math.round(decimalValue.slice(0,-1) * 255 / 100);\r\n          } else decimalValue = decimalValue*1;\r\n          if (decimalValue > 255) {\r\n            decimalValue = 255;\r\n          }\r\n          hexString = '0' + decimalValue.toString(16);\r\n          hexString = hexString.slice(-2);\r\n        }\r\n        ret.push(hexString);\r\n      })\r\n      return '#' + ret.join('');\r\n    }\r\n    if (nameRegex.test(color)) return color;\r\n\r\n    console.error('Could not parse color \"' + color + '\"');\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em'/'in' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\r\n  this.convertToUnit = function(val) {\r\n    // if it's just a number, then return it\r\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val*1;\r\n    var mtch = (val+\"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm|in)$/);\r\n    // if we don't have a number with supported units, then return false\r\n    if (!mtch) return false;\r\n    val = mtch[1];\r\n    switch(mtch[3]) {\r\n      case 'px':{\r\n        val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\r\n        break;\r\n      }\r\n      case 'em':\r\n      case 'rem':{\r\n        val *= 12; // default font-size is 12pt\r\n        break;\r\n      }\r\n      case 'cm':{\r\n        val = Math.round(val * 28.34646); // 1cm => 28.34646\r\n        break;\r\n      }\r\n      case 'in':{\r\n        val *= 72; // 1in => 72 pt\r\n        break;\r\n      }\r\n    }\r\n    return val*1;\r\n  }\r\n\r\n  var result = this.convertHtml(htmlText);\r\n  // if we only pass a string without HTML code\r\n  if (typeof result === \"string\") result={text:result};\r\n  // if images by reference\r\n  if (this.imagesByReference) {\r\n    result = {content:result, images:{}};\r\n    this.imagesRef.forEach(function(src, i) {\r\n      // check if 'src' is a JSON string\r\n      result.images['img_ref_'+imagesByReferenceSuffix+i] = (src.startsWith(\"{\") ? JSON.parse(src) : src);\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = function(htmlText, options) {\r\n  return new htmlToPdfMake(htmlText, options);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}