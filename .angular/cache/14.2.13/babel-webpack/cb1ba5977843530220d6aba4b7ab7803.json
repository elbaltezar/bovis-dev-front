{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar JoseHeader =\n/** @class */\nfunction () {\n  function JoseHeader(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n\n\n  JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    } // Alg is required on the SHR header\n\n\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n\n    var shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  };\n\n  return JoseHeader;\n}();\n\nexport { JoseHeader };","map":{"version":3,"names":["JoseHeaderError","JsonTypes","JoseHeader","options","typ","alg","kid","getShrHeaderString","shrHeaderOptions","createMissingKidError","createMissingAlgError","shrHeader","Pop","JSON","stringify"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/crypto/JoseHeader.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar JoseHeader = /** @class */ (function () {\r\n    function JoseHeader(options) {\r\n        this.typ = options.typ;\r\n        this.alg = options.alg;\r\n        this.kid = options.kid;\r\n    }\r\n    /**\r\n     * Builds SignedHttpRequest formatted JOSE Header from the\r\n     * JOSE Header options provided or previously set on the object and returns\r\n     * the stringified header object.\r\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n     * @param shrHeaderOptions\r\n     * @returns\r\n     */\r\n    JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\r\n        // KeyID is required on the SHR header\r\n        if (!shrHeaderOptions.kid) {\r\n            throw JoseHeaderError.createMissingKidError();\r\n        }\r\n        // Alg is required on the SHR header\r\n        if (!shrHeaderOptions.alg) {\r\n            throw JoseHeaderError.createMissingAlgError();\r\n        }\r\n        var shrHeader = new JoseHeader({\r\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\r\n            typ: shrHeaderOptions.typ || JsonTypes.Pop,\r\n            kid: shrHeaderOptions.kid,\r\n            alg: shrHeaderOptions.alg\r\n        });\r\n        return JSON.stringify(shrHeader);\r\n    };\r\n    return JoseHeader;\r\n}());\n\nexport { JoseHeader };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;AAAe,YAAY;EACxC,SAASA,UAAT,CAAoBC,OAApB,EAA6B;IACzB,KAAKC,GAAL,GAAWD,OAAO,CAACC,GAAnB;IACA,KAAKC,GAAL,GAAWF,OAAO,CAACE,GAAnB;IACA,KAAKC,GAAL,GAAWH,OAAO,CAACG,GAAnB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIJ,UAAU,CAACK,kBAAX,GAAgC,UAAUC,gBAAV,EAA4B;IACxD;IACA,IAAI,CAACA,gBAAgB,CAACF,GAAtB,EAA2B;MACvB,MAAMN,eAAe,CAACS,qBAAhB,EAAN;IACH,CAJuD,CAKxD;;;IACA,IAAI,CAACD,gBAAgB,CAACH,GAAtB,EAA2B;MACvB,MAAML,eAAe,CAACU,qBAAhB,EAAN;IACH;;IACD,IAAIC,SAAS,GAAG,IAAIT,UAAJ,CAAe;MAC3B;MACAE,GAAG,EAAEI,gBAAgB,CAACJ,GAAjB,IAAwBH,SAAS,CAACW,GAFZ;MAG3BN,GAAG,EAAEE,gBAAgB,CAACF,GAHK;MAI3BD,GAAG,EAAEG,gBAAgB,CAACH;IAJK,CAAf,CAAhB;IAMA,OAAOQ,IAAI,CAACC,SAAL,CAAeH,SAAf,CAAP;EACH,CAhBD;;EAiBA,OAAOT,UAAP;AACH,CAhC+B,EAAhC;;AAkCA,SAASA,UAAT"},"metadata":{},"sourceType":"module"}