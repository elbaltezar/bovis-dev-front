{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AADAuthorityConstants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from './AuthorityMetadata.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { AzureCloudInstance } from './AuthorityOptions.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { isCloudInstanceDiscoveryErrorResponse } from './CloudInstanceDiscoveryErrorResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    this.canonicalAuthority = authority;\n\n    this._canonicalAuthority.validateAsUri();\n\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n    this.regionDiscovery = new RegionDiscovery(networkInterface, this.performanceClient, this.correlationId);\n  }\n  /**\r\n   * Get {@link AuthorityType}\r\n   * @param authorityUri {@link IUri}\r\n   * @private\r\n   */\n\n\n  Authority.prototype.getAuthorityType = function (authorityUri) {\n    // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n    if (authorityUri.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n      return AuthorityType.Ciam;\n    }\n\n    var pathSegments = authorityUri.PathSegments;\n\n    if (pathSegments.length) {\n      switch (pathSegments[0].toLowerCase()) {\n        case Constants.ADFS:\n          return AuthorityType.Adfs;\n\n        case Constants.DSTS:\n          return AuthorityType.Dsts;\n      }\n    }\n\n    return AuthorityType.Default;\n  };\n\n  Object.defineProperty(Authority.prototype, \"authorityType\", {\n    // See above for AuthorityType\n    get: function () {\n      return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"protocolMode\", {\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\n    get: function () {\n      return this.authorityOptions.protocolMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"options\", {\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\n    get: function () {\n      return this.authorityOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this._canonicalAuthority.urlString;\n    },\n\n    /**\r\n     * Sets canonical authority.\r\n     */\n    set: function (url) {\n      this._canonicalAuthority = new UrlString(url);\n\n      this._canonicalAuthority.validateAsUri();\n\n      this._canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\n    /**\r\n     * Get authority components.\r\n     */\n    get: function () {\n      if (!this._canonicalAuthorityUrlComponents) {\n        this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n      }\n\n      return this._canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tenant\", {\n    /**\r\n     * Get tenant for authority.\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        return this.replacePath(this.metadata.authorization_endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        return this.replacePath(this.metadata.token_endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\n    get: function () {\n      if (this.discoveryComplete()) {\n        return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        // ROPC policies may not have end_session_endpoint set\n        if (!this.metadata.end_session_endpoint) {\n          throw ClientAuthError.createLogoutNotSupportedError();\n        }\n\n        return this.replacePath(this.metadata.end_session_endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\n    /**\r\n     * OAuth issuer for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        return this.replacePath(this.metadata.issuer);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"jwksUri\", {\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        return this.replacePath(this.metadata.jwks_uri);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n   * @param authorityUri {@link IUri}\r\n   * @private\r\n   */\n\n  Authority.prototype.canReplaceTenant = function (authorityUri) {\n    return authorityUri.PathSegments.length === 1 && !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) && this.getAuthorityType(authorityUri) === AuthorityType.Default && this.protocolMode === ProtocolMode.AAD;\n  };\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n\n\n  Authority.prototype.replaceTenant = function (urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  };\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n\n\n  Authority.prototype.replacePath = function (urlString) {\n    var _this = this;\n\n    var endpoint = urlString;\n    var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n    var cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\n    var cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\n    var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach(function (currentPart, index) {\n      var cachedPart = cachedAuthorityParts[index];\n\n      if (index === 0 && _this.canReplaceTenant(cachedAuthorityUrlComponents)) {\n        var tenantId = new UrlString(_this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\n        /**\r\n         * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n         * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n         * always resolved with tenant id by OIDC.\r\n         */\n\n        if (cachedPart !== tenantId) {\n          _this.logger.verbose(\"Replacing tenant domain name \" + cachedPart + \" with id \" + tenantId);\n\n          cachedPart = tenantId;\n        }\n      }\n\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\n      }\n    });\n    return this.replaceTenant(endpoint);\n  };\n\n  Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\n    get: function () {\n      if (this.authorityType === AuthorityType.Adfs || this.authorityType === AuthorityType.Dsts || this.protocolMode === ProtocolMode.OIDC) {\n        return this.canonicalAuthority + \".well-known/openid-configuration\";\n      }\n\n      return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Boolean that returns whethr or not tenant discovery has been completed.\r\n   */\n\n  Authority.prototype.discoveryComplete = function () {\n    return !!this.metadata;\n  };\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n\n            if (!metadataEntity) {\n              metadataEntity = new AuthorityMetadataEntity();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateCloudDiscoveryMetadata(metadataEntity)];\n\n          case 1:\n            cloudDiscoverySource = _d.sent();\n            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateEndpointMetadata(metadataEntity)];\n\n          case 2:\n            endpointSource = _d.sent();\n\n            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n              // Reset the expiration time unless both values came from a successful cache lookup\n              metadataEntity.resetExpiresAt();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n            this.metadata = metadataEntity;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\n    var _a, _b, _c, _d, _e, _f;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, harcodedMetadata;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n            metadata = this.getEndpointMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateEndpointMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            }\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getEndpointMetadataFromNetwork()];\n\n          case 1:\n            metadata = _g.sent();\n            if (!metadata) return [3\n            /*break*/\n            , 4];\n            if (!((_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.azureRegion)) return [3\n            /*break*/\n            , 3];\n            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateMetadataWithRegionalInformation(metadata)];\n\n          case 2:\n            metadata = _g.sent();\n            _g.label = 3;\n\n          case 3:\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.NETWORK];\n\n          case 4:\n            harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            if (!(harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache)) return [3\n            /*break*/\n            , 7];\n            if (!((_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion)) return [3\n            /*break*/\n            , 6];\n            (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateMetadataWithRegionalInformation(harcodedMetadata)];\n\n          case 5:\n            harcodedMetadata = _g.sent();\n            _g.label = 6;\n\n          case 6:\n            metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.HARDCODED_VALUES];\n\n          case 7:\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n      });\n    });\n  };\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached\r\n   * authority metadata can be used for the requested authority. Protects against same domain different\r\n   * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.isAuthoritySameType = function (metadataEntity) {\n    var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n    var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  };\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromConfig = function () {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromNetwork = function () {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var options, response;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n            options = {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];\n\n          case 2:\n            response = _b.sent();\n            return [2\n            /*return*/\n            , isOpenIdConfigResponse(response.body) ? response.body : null];\n\n          case 3:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get OAuth endpoints for common authorities.\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromHardcodedValues = function () {\n    if (this.canonicalAuthority in EndpointMetadata) {\n      return EndpointMetadata[this.canonicalAuthority];\n    }\n\n    return null;\n  };\n  /**\r\n   * Update the retrieved metadata with regional information.\r\n   * User selected Azure region will be used if configured.\r\n   */\n\n\n  Authority.prototype.updateMetadataWithRegionalInformation = function (metadata) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var userConfiguredAzureRegion, autodetectedRegionName;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n            userConfiguredAzureRegion = (_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion;\n            if (!userConfiguredAzureRegion) return [3\n            /*break*/\n            , 2];\n\n            if (userConfiguredAzureRegion !== Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n              this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n              this.regionDiscoveryMetadata.region_used = userConfiguredAzureRegion;\n              return [2\n              /*return*/\n              , Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion)];\n            }\n\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n            return [4\n            /*yield*/\n            , this.regionDiscovery.detectRegion((_d = this.authorityOptions.azureRegionConfiguration) === null || _d === void 0 ? void 0 : _d.environmentRegion, this.regionDiscoveryMetadata)];\n\n          case 1:\n            autodetectedRegionName = _e.sent();\n\n            if (autodetectedRegionName) {\n              this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\n              this.regionDiscoveryMetadata.region_used = autodetectedRegionName;\n              return [2\n              /*return*/\n              , Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName)];\n            }\n\n            this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n            _e.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , metadata];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n   * and returns where the information was retrieved from\r\n   * @param metadataEntity\r\n   * @returns AuthorityMetadataSource\r\n   */\n\n\n  Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, metadataEntityExpired, harcodedMetadata;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId); // attempt to read metadata from the config\n\n            this.logger.verbose(\"Attempting to get cloud discovery metadata in the config\");\n            this.logger.verbosePii(\"Known Authorities: \" + (this.authorityOptions.knownAuthorities || Constants.NOT_APPLICABLE));\n            this.logger.verbosePii(\"Authority Metadata: \" + (this.authorityOptions.authorityMetadata || Constants.NOT_APPLICABLE));\n            this.logger.verbosePii(\"Canonical Authority: \" + (metadataEntity.canonical_authority || Constants.NOT_APPLICABLE));\n            metadata = this.getCloudDiscoveryMetadataFromConfig();\n\n            if (metadata) {\n              this.logger.verbose(\"Found cloud discovery metadata in the config.\");\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            } // If the cached metadata came from config but that config was not passed to this instance, we must go to the network\n\n\n            this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the cache.\");\n            metadataEntityExpired = metadataEntity.isExpired();\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\n              this.logger.verbose(\"Found metadata in the cache.\"); // No need to update\n\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            } else if (metadataEntityExpired) {\n              this.logger.verbose(\"The metadata entity is expired.\");\n            }\n\n            this.logger.verbose(\"Did not find cloud discovery metadata in the cache... Attempting to get cloud discovery metadata from the network.\");\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getCloudDiscoveryMetadataFromNetwork()];\n\n          case 1:\n            metadata = _c.sent();\n\n            if (metadata) {\n              this.logger.verbose(\"cloud discovery metadata was successfully returned from getCloudDiscoveryMetadataFromNetwork()\");\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.NETWORK];\n            }\n\n            this.logger.verbose(\"Did not find cloud discovery metadata from the network... Attempting to get cloud discovery metadata from hardcoded values.\");\n            harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\n\n            if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\n              this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n              metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.HARDCODED_VALUES];\n            } // Metadata could not be obtained from the config, cache, network or hardcoded values\n\n\n            this.logger.error(\"Did not find cloud discovery metadata from hardcoded values... Metadata could not be obtained from config, cache, network or hardcoded values. Throwing Untrusted Authority Error.\");\n            throw ClientConfigurationError.createUntrustedAuthorityError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\n    // CIAM does not support cloud discovery metadata\n    if (this.authorityType === AuthorityType.Ciam) {\n      this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    } // Check if network response was provided in config\n\n\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n\n      try {\n        this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n        var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n        this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n\n        if (metadata) {\n          this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n          return metadata;\n        } else {\n          this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n        }\n      } catch (e) {\n        this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n        throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n      }\n    } // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n\n\n    if (this.isInKnownAuthorities()) {\n      this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n\n    return null;\n  };\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var instanceDiscoveryEndpoint, options, match, response, typedResponseBody, metadata, error_1, typedError;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n            instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\n            options = {};\n            match = null;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];\n\n          case 2:\n            response = _b.sent();\n            typedResponseBody = void 0;\n            metadata = void 0;\n\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\n              typedResponseBody = response.body;\n              metadata = typedResponseBody.metadata;\n              this.logger.verbosePii(\"tenant_discovery_endpoint is: \" + typedResponseBody.tenant_discovery_endpoint);\n            } else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\n              this.logger.warning(\"A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: \" + response.status);\n              typedResponseBody = response.body;\n\n              if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\n                this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n                return [2\n                /*return*/\n                , null];\n              }\n\n              this.logger.warning(\"The CloudInstanceDiscoveryErrorResponse error is \" + typedResponseBody.error);\n              this.logger.warning(\"The CloudInstanceDiscoveryErrorResponse error description is \" + typedResponseBody.error_description);\n              this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n              metadata = [];\n            } else {\n              this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _b.sent();\n\n            if (error_1 instanceof AuthError) {\n              this.logger.error(\"There was a network error while attempting to get the cloud discovery instance metadata.\\nError: \" + error_1.errorCode + \"\\nError Description: \" + error_1.errorMessage);\n            } else {\n              typedError = error_1;\n              this.logger.error(\"A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: \" + typedError.name + \"\\nError Description: \" + typedError.message);\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n            if (!match) {\n              this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n              this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n              match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n            }\n\n            return [2\n            /*return*/\n            , match];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get cloud discovery metadata for common authorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromHarcodedValues = function () {\n    if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\n      return InstanceDiscoveryMetadata[this.canonicalAuthority];\n    }\n\n    return null;\n  };\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n\n\n  Authority.prototype.isInKnownAuthorities = function () {\n    var _this = this;\n\n    var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\n      return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  };\n  /**\r\n   * helper function to populate the authority based on azureCloudOptions\r\n   * @param authorityString\r\n   * @param azureCloudOptions\r\n   */\n\n\n  Authority.generateAuthority = function (authorityString, azureCloudOptions) {\n    var authorityAzureCloudInstance;\n\n    if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n      var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n      authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + \"/\" + tenant + \"/\";\n    }\n\n    return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n  };\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n\n\n  Authority.createCloudDiscoveryMetadataFromHost = function (host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  };\n  /**\r\n   * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n   * @param response\r\n   * @param authority\r\n   */\n\n\n  Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\n    for (var i = 0; i < response.length; i++) {\n      var metadata = response[i];\n\n      if (metadata.aliases.indexOf(authority) > -1) {\n        return metadata;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n\n\n  Authority.prototype.getPreferredCache = function () {\n    if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n    }\n  };\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n\n\n  Authority.prototype.isAlias = function (host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  };\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n\n\n  Authority.isPublicCloudAuthority = function (host) {\n    return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  };\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n\n\n  Authority.buildRegionalAuthorityString = function (host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    var authorityUrlInstance = new UrlString(host);\n    authorityUrlInstance.validateAsUri();\n    var authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\n\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\n    } // Include the query string portion of the url\n\n\n    var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), {\n      HostNameAndPort: hostNameAndPort\n    })).urlString; // Add the query string if a query string was provided\n\n    if (queryString) return url + \"?\" + queryString;\n    return url;\n  };\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n\n\n  Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\n    metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion); // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n\n    metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, Constants.REGIONAL_AUTH_NON_MSI_QUERY_STRING);\n\n    if (metadata.end_session_endpoint) {\n      metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n    }\n\n    return metadata;\n  };\n  /**\r\n   * Transform CIAM_AUTHORIY as per the below rules:\r\n   * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n   *\r\n   * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n   * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n   *\r\n   * @param authority\r\n   */\n\n\n  Authority.transformCIAMAuthority = function (authority) {\n    var ciamAuthority = authority.endsWith(Constants.FORWARD_SLASH) ? authority : \"\" + authority + Constants.FORWARD_SLASH;\n    var authorityUrl = new UrlString(authority);\n    var authorityUrlComponents = authorityUrl.getUrlComponents(); // check if transformation is needed\n\n    if (authorityUrlComponents.PathSegments.length === 0 && authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n      var tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n      ciamAuthority = \"\" + ciamAuthority + tenantIdOrDomain + Constants.AAD_TENANT_DOMAIN_SUFFIX;\n    }\n\n    return ciamAuthority;\n  }; // Reserved tenant domain names that will not be replaced with tenant id\n\n\n  Authority.reservedTenantDomains = new Set([\"{tenant}\", \"{tenantid}\", AADAuthorityConstants.COMMON, AADAuthorityConstants.CONSUMERS, AADAuthorityConstants.ORGANIZATIONS]);\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"names":["__awaiter","__generator","__assign","AuthorityType","isOpenIdConfigResponse","UrlString","ClientAuthError","Constants","AADAuthorityConstants","AuthorityMetadataSource","RegionDiscoveryOutcomes","EndpointMetadata","InstanceDiscoveryMetadata","ClientConfigurationError","ProtocolMode","AuthorityMetadataEntity","AzureCloudInstance","isCloudInstanceDiscoveryResponse","isCloudInstanceDiscoveryErrorResponse","RegionDiscovery","AuthError","PerformanceEvents","Authority","authority","networkInterface","cacheManager","authorityOptions","logger","performanceClient","correlationId","canonicalAuthority","_canonicalAuthority","validateAsUri","regionDiscoveryMetadata","region_used","undefined","region_source","region_outcome","regionDiscovery","prototype","getAuthorityType","authorityUri","HostNameAndPort","endsWith","CIAM_AUTH_URL","Ciam","pathSegments","PathSegments","length","toLowerCase","ADFS","Adfs","DSTS","Dsts","Default","Object","defineProperty","get","canonicalAuthorityUrlComponents","enumerable","configurable","protocolMode","urlString","set","url","_canonicalAuthorityUrlComponents","getUrlComponents","discoveryComplete","replacePath","metadata","authorization_endpoint","createEndpointDiscoveryIncompleteError","token_endpoint","replace","end_session_endpoint","createLogoutNotSupportedError","issuer","jwks_uri","canReplaceTenant","reservedTenantDomains","has","AAD","replaceTenant","tenant","_this","endpoint","cachedAuthorityUrl","canonical_authority","cachedAuthorityUrlComponents","cachedAuthorityParts","currentAuthorityParts","forEach","currentPart","index","cachedPart","tenantId","verbose","authorityType","OIDC","resolveEndpointsAsync","_a","_b","_c","metadataEntity","cloudDiscoverySource","endpointSource","cacheKey","_d","label","addQueueMeasurement","AuthorityResolveEndpointsAsync","getAuthorityMetadataByAlias","hostnameAndPort","updateCanonicalAuthority","setPreQueueTime","AuthorityUpdateCloudDiscoveryMetadata","updateCloudDiscoveryMetadata","sent","preferred_network","AuthorityUpdateEndpointMetadata","updateEndpointMetadata","CACHE","resetExpiresAt","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","_e","_f","harcodedMetadata","_g","getEndpointMetadataFromConfig","CONFIG","isAuthoritySameType","endpointsFromNetwork","isExpired","AuthorityGetEndpointMetadataFromNetwork","getEndpointMetadataFromNetwork","azureRegionConfiguration","azureRegion","AuthorityUpdateMetadataWithRegionalInformation","updateMetadataWithRegionalInformation","NETWORK","getEndpointMetadataFromHardcodedValues","skipAuthorityMetadataCache","HARDCODED_VALUES","createUnableToGetOpenidConfigError","defaultOpenIdConfigurationEndpoint","cachedParts","authorityMetadata","JSON","parse","e","createInvalidAuthorityMetadataError","options","response","trys","push","sendGetRequestAsync","body","userConfiguredAzureRegion","autodetectedRegionName","AZURE_REGION_AUTO_DISCOVER_FLAG","CONFIGURED_NO_AUTO_DETECTION","replaceWithRegionalInformation","RegionDiscoveryDetectRegion","detectRegion","environmentRegion","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","metadataEntityExpired","verbosePii","knownAuthorities","NOT_APPLICABLE","getCloudDiscoveryMetadataFromConfig","aliasesFromNetwork","AuthorityGetCloudDiscoveryMetadataFromNetwork","getCloudDiscoveryMetadataFromNetwork","getCloudDiscoveryMetadataFromHarcodedValues","error","createUntrustedAuthorityError","createCloudDiscoveryMetadataFromHost","cloudDiscoveryMetadata","parsedResponse","getCloudDiscoveryMetadataFromNetworkResponse","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","instanceDiscoveryEndpoint","match","typedResponseBody","error_1","typedError","AAD_INSTANCE_DISCOVERY_ENDPT","tenant_discovery_endpoint","warning","status","INVALID_INSTANCE","error_description","errorCode","errorMessage","name","message","matches","filter","getDomainFromUrl","generateAuthority","authorityString","azureCloudOptions","authorityAzureCloudInstance","azureCloudInstance","None","DEFAULT_COMMON_TENANT","host","aliases","i","indexOf","getPreferredCache","isAlias","isPublicCloudAuthority","KNOWN_PUBLIC_CLOUDS","buildRegionalAuthorityString","region","queryString","authorityUrlInstance","authorityUrlParts","hostNameAndPort","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","constructAuthorityUriFromObject","REGIONAL_AUTH_NON_MSI_QUERY_STRING","transformCIAMAuthority","ciamAuthority","FORWARD_SLASH","authorityUrl","authorityUrlComponents","tenantIdOrDomain","split","AAD_TENANT_DOMAIN_SUFFIX","Set","COMMON","CONSUMERS","ORGANIZATIONS"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/authority/Authority.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AADAuthorityConstants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from './AuthorityMetadata.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { AzureCloudInstance } from './AuthorityOptions.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { isCloudInstanceDiscoveryErrorResponse } from './CloudInstanceDiscoveryErrorResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface, this.performanceClient, this.correlationId);\r\n    }\r\n    /**\r\n     * Get {@link AuthorityType}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    Authority.prototype.getAuthorityType = function (authorityUri) {\r\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\r\n        if (authorityUri.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\r\n            return AuthorityType.Ciam;\r\n        }\r\n        var pathSegments = authorityUri.PathSegments;\r\n        if (pathSegments.length) {\r\n            switch (pathSegments[0].toLowerCase()) {\r\n                case Constants.ADFS:\r\n                    return AuthorityType.Adfs;\r\n                case Constants.DSTS:\r\n                    return AuthorityType.Dsts;\r\n            }\r\n        }\r\n        return AuthorityType.Default;\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"authorityType\", {\r\n        // See above for AuthorityType\r\n        get: function () {\r\n            return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"protocolMode\", {\r\n        /**\r\n         * ProtocolMode enum representing the way endpoints are constructed.\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions.protocolMode;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"options\", {\r\n        /**\r\n         * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this._canonicalAuthority.urlString;\r\n        },\r\n        /**\r\n         * Sets canonical authority.\r\n         */\r\n        set: function (url) {\r\n            this._canonicalAuthority = new UrlString(url);\r\n            this._canonicalAuthority.validateAsUri();\r\n            this._canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\r\n        /**\r\n         * Get authority components.\r\n         */\r\n        get: function () {\r\n            if (!this._canonicalAuthorityUrlComponents) {\r\n                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\r\n            }\r\n            return this._canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\r\n        /**\r\n         * Get hostname and port i.e. login.microsoftonline.com\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tenant\", {\r\n        /**\r\n         * Get tenant for authority.\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\r\n        /**\r\n         * OAuth /authorize endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replacePath(this.metadata.authorization_endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\r\n        /**\r\n         * OAuth /token endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replacePath(this.metadata.token_endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\r\n        /**\r\n         * OAuth logout endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                // ROPC policies may not have end_session_endpoint set\r\n                if (!this.metadata.end_session_endpoint) {\r\n                    throw ClientAuthError.createLogoutNotSupportedError();\r\n                }\r\n                return this.replacePath(this.metadata.end_session_endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\r\n        /**\r\n         * OAuth issuer for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replacePath(this.metadata.issuer);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"jwksUri\", {\r\n        /**\r\n         * Jwks_uri for token signing keys\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                return this.replacePath(this.metadata.jwks_uri);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    Authority.prototype.canReplaceTenant = function (authorityUri) {\r\n        return authorityUri.PathSegments.length === 1\r\n            && !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0])\r\n            && this.getAuthorityType(authorityUri) === AuthorityType.Default\r\n            && this.protocolMode === ProtocolMode.AAD;\r\n    };\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replaceTenant = function (urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    };\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replacePath = function (urlString) {\r\n        var _this = this;\r\n        var endpoint = urlString;\r\n        var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        var cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\r\n        var cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\r\n        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach(function (currentPart, index) {\r\n            var cachedPart = cachedAuthorityParts[index];\r\n            if (index === 0 && _this.canReplaceTenant(cachedAuthorityUrlComponents)) {\r\n                var tenantId = (new UrlString(_this.metadata.authorization_endpoint)).getUrlComponents().PathSegments[0];\r\n                /**\r\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n                 * always resolved with tenant id by OIDC.\r\n                 */\r\n                if (cachedPart !== tenantId) {\r\n                    _this.logger.verbose(\"Replacing tenant domain name \" + cachedPart + \" with id \" + tenantId);\r\n                    cachedPart = tenantId;\r\n                }\r\n            }\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\r\n            }\r\n        });\r\n        return this.replaceTenant(endpoint);\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\r\n        /**\r\n         * The default open id configuration endpoint for any canonical authority.\r\n         */\r\n        get: function () {\r\n            if (this.authorityType === AuthorityType.Adfs ||\r\n                this.authorityType === AuthorityType.Dsts ||\r\n                this.protocolMode === ProtocolMode.OIDC) {\r\n                return this.canonicalAuthority + \".well-known/openid-configuration\";\r\n            }\r\n            return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Boolean that returns whethr or not tenant discovery has been completed.\r\n     */\r\n    Authority.prototype.discoveryComplete = function () {\r\n        return !!this.metadata;\r\n    };\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\r\n                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n                        if (!metadataEntity) {\r\n                            metadataEntity = new AuthorityMetadataEntity();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\r\n                        return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];\r\n                    case 1:\r\n                        cloudDiscoverySource = _d.sent();\r\n                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\r\n                        return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];\r\n                    case 2:\r\n                        endpointSource = _d.sent();\r\n                        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\r\n                            // Reset the expiration time unless both values came from a successful cache lookup\r\n                            metadataEntity.resetExpiresAt();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n                        this.metadata = metadataEntity;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata, harcodedMetadata;\r\n            return __generator(this, function (_g) {\r\n                switch (_g.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\r\n                        metadata = this.getEndpointMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateEndpointMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\r\n                        return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _g.sent();\r\n                        if (!metadata) return [3 /*break*/, 4];\r\n                        if (!((_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.azureRegion)) return [3 /*break*/, 3];\r\n                        (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\r\n                        return [4 /*yield*/, this.updateMetadataWithRegionalInformation(metadata)];\r\n                    case 2:\r\n                        metadata = _g.sent();\r\n                        _g.label = 3;\r\n                    case 3:\r\n                        metadataEntity.updateEndpointMetadata(metadata, true);\r\n                        return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                    case 4:\r\n                        harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\r\n                        if (!(harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache)) return [3 /*break*/, 7];\r\n                        if (!((_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion)) return [3 /*break*/, 6];\r\n                        (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\r\n                        return [4 /*yield*/, this.updateMetadataWithRegionalInformation(harcodedMetadata)];\r\n                    case 5:\r\n                        harcodedMetadata = _g.sent();\r\n                        _g.label = 6;\r\n                    case 6:\r\n                        metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\r\n                        return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];\r\n                    case 7: throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.isAuthoritySameType = function (metadataEntity) {\r\n        var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\r\n    };\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromConfig = function () {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromNetwork = function () {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var options, response;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\r\n                        options = {};\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.\r\n                                sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];\r\n                    case 3:\r\n                        _b.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromHardcodedValues = function () {\r\n        if (this.canonicalAuthority in EndpointMetadata) {\r\n            return EndpointMetadata[this.canonicalAuthority];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     * User selected Azure region will be used if configured.\r\n     */\r\n    Authority.prototype.updateMetadataWithRegionalInformation = function (metadata) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var userConfiguredAzureRegion, autodetectedRegionName;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\r\n                        userConfiguredAzureRegion = (_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion;\r\n                        if (!userConfiguredAzureRegion) return [3 /*break*/, 2];\r\n                        if (userConfiguredAzureRegion !== Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                            this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                            this.regionDiscoveryMetadata.region_used = userConfiguredAzureRegion;\r\n                            return [2 /*return*/, Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion)];\r\n                        }\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n                        return [4 /*yield*/, this.regionDiscovery.detectRegion((_d = this.authorityOptions.azureRegionConfiguration) === null || _d === void 0 ? void 0 : _d.environmentRegion, this.regionDiscoveryMetadata)];\r\n                    case 1:\r\n                        autodetectedRegionName = _e.sent();\r\n                        if (autodetectedRegionName) {\r\n                            this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\r\n                            this.regionDiscoveryMetadata.region_used = autodetectedRegionName;\r\n                            return [2 /*return*/, Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName)];\r\n                        }\r\n                        this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n                        _e.label = 2;\r\n                    case 2: return [2 /*return*/, metadata];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param metadataEntity\r\n     * @returns AuthorityMetadataSource\r\n     */\r\n    Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata, metadataEntityExpired, harcodedMetadata;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\r\n                        // attempt to read metadata from the config\r\n                        this.logger.verbose(\"Attempting to get cloud discovery metadata in the config\");\r\n                        this.logger.verbosePii(\"Known Authorities: \" + (this.authorityOptions.knownAuthorities || Constants.NOT_APPLICABLE));\r\n                        this.logger.verbosePii(\"Authority Metadata: \" + (this.authorityOptions.authorityMetadata || Constants.NOT_APPLICABLE));\r\n                        this.logger.verbosePii(\"Canonical Authority: \" + (metadataEntity.canonical_authority || Constants.NOT_APPLICABLE));\r\n                        metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n                        if (metadata) {\r\n                            this.logger.verbose(\"Found cloud discovery metadata in the config.\");\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        // If the cached metadata came from config but that config was not passed to this instance, we must go to the network\r\n                        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the cache.\");\r\n                        metadataEntityExpired = metadataEntity.isExpired();\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\r\n                            this.logger.verbose(\"Found metadata in the cache.\");\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        else if (metadataEntityExpired) {\r\n                            this.logger.verbose(\"The metadata entity is expired.\");\r\n                        }\r\n                        this.logger.verbose(\"Did not find cloud discovery metadata in the cache... Attempting to get cloud discovery metadata from the network.\");\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\r\n                        return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _c.sent();\r\n                        if (metadata) {\r\n                            this.logger.verbose(\"cloud discovery metadata was successfully returned from getCloudDiscoveryMetadataFromNetwork()\");\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\r\n                            return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                        }\r\n                        this.logger.verbose(\"Did not find cloud discovery metadata from the network... Attempting to get cloud discovery metadata from hardcoded values.\");\r\n                        harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\r\n                        if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\r\n                            this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\r\n                            metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];\r\n                        }\r\n                        // Metadata could not be obtained from the config, cache, network or hardcoded values\r\n                        this.logger.error(\"Did not find cloud discovery metadata from hardcoded values... Metadata could not be obtained from config, cache, network or hardcoded values. Throwing Untrusted Authority Error.\");\r\n                        throw ClientConfigurationError.createUntrustedAuthorityError();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\r\n        // CIAM does not support cloud discovery metadata\r\n        if (this.authorityType === AuthorityType.Ciam) {\r\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\r\n            try {\r\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\r\n                var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\r\n                if (metadata) {\r\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\r\n                    return metadata;\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\r\n                }\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\r\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var instanceDiscoveryEndpoint, options, match, response, typedResponseBody, metadata, error_1, typedError;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\r\n                        instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\r\n                        options = {};\r\n                        match = null;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        typedResponseBody = void 0;\r\n                        metadata = void 0;\r\n                        if (isCloudInstanceDiscoveryResponse(response.body)) {\r\n                            typedResponseBody = response.body;\r\n                            metadata = typedResponseBody.metadata;\r\n                            this.logger.verbosePii(\"tenant_discovery_endpoint is: \" + typedResponseBody.tenant_discovery_endpoint);\r\n                        }\r\n                        else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\r\n                            this.logger.warning(\"A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: \" + response.status);\r\n                            typedResponseBody = response.body;\r\n                            if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\r\n                                this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\r\n                                return [2 /*return*/, null];\r\n                            }\r\n                            this.logger.warning(\"The CloudInstanceDiscoveryErrorResponse error is \" + typedResponseBody.error);\r\n                            this.logger.warning(\"The CloudInstanceDiscoveryErrorResponse error description is \" + typedResponseBody.error_description);\r\n                            this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\r\n                            metadata = [];\r\n                        }\r\n                        else {\r\n                            this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n                        match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        error_1 = _b.sent();\r\n                        if (error_1 instanceof AuthError) {\r\n                            this.logger.error(\"There was a network error while attempting to get the cloud discovery instance metadata.\\nError: \" + error_1.errorCode + \"\\nError Description: \" + error_1.errorMessage);\r\n                        }\r\n                        else {\r\n                            typedError = error_1;\r\n                            this.logger.error(\"A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: \" + typedError.name + \"\\nError Description: \" + typedError.message);\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 4:\r\n                        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\r\n                        if (!match) {\r\n                            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n                            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\r\n                            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n                        }\r\n                        return [2 /*return*/, match];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get cloud discovery metadata for common authorities\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromHarcodedValues = function () {\r\n        if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\r\n            return InstanceDiscoveryMetadata[this.canonicalAuthority];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    Authority.prototype.isInKnownAuthorities = function () {\r\n        var _this = this;\r\n        var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\r\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\r\n        });\r\n        return matches.length > 0;\r\n    };\r\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */\r\n    Authority.generateAuthority = function (authorityString, azureCloudOptions) {\r\n        var authorityAzureCloudInstance;\r\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\r\n            var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\r\n            authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + \"/\" + tenant + \"/\";\r\n        }\r\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\r\n    };\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    Authority.createCloudDiscoveryMetadataFromHost = function (host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host]\r\n        };\r\n    };\r\n    /**\r\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n     * @param response\r\n     * @param authority\r\n     */\r\n    Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\r\n        for (var i = 0; i < response.length; i++) {\r\n            var metadata = response[i];\r\n            if (metadata.aliases.indexOf(authority) > -1) {\r\n                return metadata;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    Authority.prototype.getPreferredCache = function () {\r\n        if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    Authority.prototype.isAlias = function (host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    };\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    Authority.isPublicCloudAuthority = function (host) {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    };\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    Authority.buildRegionalAuthorityString = function (host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        var authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        var authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\r\n        }\r\n        // Include the query string portion of the url\r\n        var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return url + \"?\" + queryString;\r\n        return url;\r\n    };\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\r\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\r\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\r\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, Constants.REGIONAL_AUTH_NON_MSI_QUERY_STRING);\r\n        if (metadata.end_session_endpoint) {\r\n            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\r\n        }\r\n        return metadata;\r\n    };\r\n    /**\r\n     * Transform CIAM_AUTHORIY as per the below rules:\r\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n     *\r\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n     *\r\n     * @param authority\r\n     */\r\n    Authority.transformCIAMAuthority = function (authority) {\r\n        var ciamAuthority = authority.endsWith(Constants.FORWARD_SLASH) ? authority : \"\" + authority + Constants.FORWARD_SLASH;\r\n        var authorityUrl = new UrlString(authority);\r\n        var authorityUrlComponents = authorityUrl.getUrlComponents();\r\n        // check if transformation is needed\r\n        if (authorityUrlComponents.PathSegments.length === 0 && (authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL))) {\r\n            var tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\r\n            ciamAuthority = \"\" + ciamAuthority + tenantIdOrDomain + Constants.AAD_TENANT_DOMAIN_SUFFIX;\r\n        }\r\n        return ciamAuthority;\r\n    };\r\n    // Reserved tenant domain names that will not be replaced with tenant id\r\n    Authority.reservedTenantDomains = (new Set([\r\n        \"{tenant}\",\r\n        \"{tenantid}\",\r\n        AADAuthorityConstants.COMMON,\r\n        AADAuthorityConstants.CONSUMERS,\r\n        AADAuthorityConstants.ORGANIZATIONS\r\n    ]));\r\n    return Authority;\r\n}());\n\nexport { Authority };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}