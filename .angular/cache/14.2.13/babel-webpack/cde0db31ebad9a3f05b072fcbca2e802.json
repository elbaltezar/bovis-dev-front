{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, HeaderNames } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\n\nvar UsernamePasswordClient =\n/** @class */\nfunction (_super) {\n  __extends(UsernamePasswordClient, _super);\n\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, responseHandler, tokenResponse;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in username-password client\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _c.sent();\n            httpVerToken = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              httpVerToken: httpVerToken\n            });\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createTokenQueryParameters(request);\n        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2\n        /*return*/\n        , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addResponseTypeForTokenAndIdToken();\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return UsernamePasswordClient;\n}(BaseClient);\n\nexport { UsernamePasswordClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","ResponseHandler","RequestParameterBuilder","GrantType","HeaderNames","StringUtils","TimeUtils","CcsCredentialType","UrlString","UsernamePasswordClient","_super","configuration","call","prototype","acquireToken","request","_a","_b","atsMeasurement","reqTimestamp","response","httpVerToken","responseHandler","tokenResponse","_c","label","performanceClient","startMeasurement","correlationId","logger","info","nowSeconds","executeTokenRequest","authority","sent","headers","X_MS_HTTP_VERSION","addStaticFields","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","queryParametersString","endpoint","requestBody","thumbprint","createTokenQueryParameters","appendQueryString","tokenEndpoint","createTokenRequestBody","createTokenRequestHeaders","credential","username","type","UPN","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addResponseTypeForTokenAndIdToken","addGrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/client/UsernamePasswordClient.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, HeaderNames } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nvar UsernamePasswordClient = /** @class */ (function (_super) {\r\n    __extends(UsernamePasswordClient, _super);\r\n    function UsernamePasswordClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.acquireToken = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var atsMeasurement, reqTimestamp, response, httpVerToken, responseHandler, tokenResponse;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\r\n                        this.logger.info(\"in acquireToken call in username-password client\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _c.sent();\r\n                        httpVerToken = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_HTTP_VERSION];\r\n                        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\r\n                            httpVerToken: httpVerToken\r\n                        });\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, requestBody, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryParametersString = this.createTokenQueryParameters(request);\r\n                endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                requestBody = this.createTokenRequestBody(request);\r\n                headers = this.createTokenRequestHeaders({\r\n                    credential: request.username,\r\n                    type: CcsCredentialType.UPN\r\n                });\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: authority.canonicalAuthority,\r\n                    scopes: request.scopes,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return UsernamePasswordClient;\r\n}(BaseClient));\n\nexport { UsernamePasswordClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}