{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\n\nvar DatabaseStorage =\n/** @class */\nfunction () {\n  function DatabaseStorage() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n\n\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function () {\n            return reject(BrowserAuthError.createDatabaseUnavailableError());\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Closes the connection to IndexedDB database when all pending transactions\r\n   * complete.\r\n   */\n\n\n  DatabaseStorage.prototype.closeConnection = function () {\n    var db = this.db;\n\n    if (db && this.dbOpen) {\n      db.close();\n      this.dbOpen = false;\n    }\n  };\n  /**\r\n   * Opens database if it's not already open\r\n   */\n\n\n  DatabaseStorage.prototype.validateDbIsOpen = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.open()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n\n\n  DatabaseStorage.prototype.setItem = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function () {\n                _this.closeConnection();\n\n                resolve();\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes item from IndexedDB under given key\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbDelete = objectStore.delete(key);\n              dbDelete.addEventListener(\"success\", function () {\n                _this.closeConnection();\n\n                resolve();\n              });\n              dbDelete.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the storage object as an iterable array of strings.\r\n   */\n\n\n  DatabaseStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGetKeys = objectStore.getAllKeys();\n              dbGetKeys.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result);\n              });\n              dbGetKeys.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Checks whether there is an object under the search key in the object store\r\n   */\n\n\n  DatabaseStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbContainsKey = objectStore.count(key);\n              dbContainsKey.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result === 1);\n              });\n              dbContainsKey.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n   * with IndexedDB database versions.\r\n   */\n\n\n  DatabaseStorage.prototype.deleteDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // Check if database being deleted exists\n        if (this.db && this.dbOpen) {\n          this.closeConnection();\n        }\n\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n          deleteDbRequest.addEventListener(\"success\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"blocked\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"error\", function () {\n            return reject(false);\n          });\n        })];\n      });\n    });\n  };\n\n  return DatabaseStorage;\n}();\n\nexport { DatabaseStorage };","map":{"version":3,"names":["__awaiter","__generator","BrowserAuthError","DB_NAME","DB_VERSION","DB_TABLE_NAME","DatabaseStorage","dbName","version","tableName","dbOpen","prototype","open","_this","_a","Promise","resolve","reject","openDB","window","indexedDB","addEventListener","e","event","target","result","createObjectStore","db","createDatabaseUnavailableError","closeConnection","close","validateDbIsOpen","label","sent","getItem","key","createDatabaseNotOpenError","transaction","objectStore","dbGet","get","setItem","payload","dbPut","put","removeItem","dbDelete","delete","getKeys","dbGetKeys","getAllKeys","containsKey","dbContainsKey","count","deleteDatabase","deleteDbRequest"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\r\nvar DatabaseStorage = /** @class */ (function () {\r\n    function DatabaseStorage() {\r\n        this.dbName = DB_NAME;\r\n        this.version = DB_VERSION;\r\n        this.tableName = DB_TABLE_NAME;\r\n        this.dbOpen = false;\r\n    }\r\n    /**\r\n     * Opens IndexedDB instance.\r\n     */\r\n    DatabaseStorage.prototype.open = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var openDB = window.indexedDB.open(_this.dbName, _this.version);\r\n                        openDB.addEventListener(\"upgradeneeded\", function (e) {\r\n                            var event = e;\r\n                            event.target.result.createObjectStore(_this.tableName);\r\n                        });\r\n                        openDB.addEventListener(\"success\", function (e) {\r\n                            var event = e;\r\n                            _this.db = event.target.result;\r\n                            _this.dbOpen = true;\r\n                            resolve();\r\n                        });\r\n                        openDB.addEventListener(\"error\", function () { return reject(BrowserAuthError.createDatabaseUnavailableError()); });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Closes the connection to IndexedDB database when all pending transactions\r\n     * complete.\r\n     */\r\n    DatabaseStorage.prototype.closeConnection = function () {\r\n        var db = this.db;\r\n        if (db && this.dbOpen) {\r\n            db.close();\r\n            this.dbOpen = false;\r\n        }\r\n    };\r\n    /**\r\n     * Opens database if it's not already open\r\n     */\r\n    DatabaseStorage.prototype.validateDbIsOpen = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!!this.dbOpen) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.open()];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves item from IndexedDB instance.\r\n     * @param key\r\n     */\r\n    DatabaseStorage.prototype.getItem = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                // TODO: Add timeouts?\r\n                                if (!_this.db) {\r\n                                    return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n                                }\r\n                                var transaction = _this.db.transaction([_this.tableName], \"readonly\");\r\n                                var objectStore = transaction.objectStore(_this.tableName);\r\n                                var dbGet = objectStore.get(key);\r\n                                dbGet.addEventListener(\"success\", function (e) {\r\n                                    var event = e;\r\n                                    _this.closeConnection();\r\n                                    resolve(event.target.result);\r\n                                });\r\n                                dbGet.addEventListener(\"error\", function (e) {\r\n                                    _this.closeConnection();\r\n                                    reject(e);\r\n                                });\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Adds item to IndexedDB under given key\r\n     * @param key\r\n     * @param payload\r\n     */\r\n    DatabaseStorage.prototype.setItem = function (key, payload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                // TODO: Add timeouts?\r\n                                if (!_this.db) {\r\n                                    return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n                                }\r\n                                var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\r\n                                var objectStore = transaction.objectStore(_this.tableName);\r\n                                var dbPut = objectStore.put(payload, key);\r\n                                dbPut.addEventListener(\"success\", function () {\r\n                                    _this.closeConnection();\r\n                                    resolve();\r\n                                });\r\n                                dbPut.addEventListener(\"error\", function (e) {\r\n                                    _this.closeConnection();\r\n                                    reject(e);\r\n                                });\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes item from IndexedDB under given key\r\n     * @param key\r\n     */\r\n    DatabaseStorage.prototype.removeItem = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                if (!_this.db) {\r\n                                    return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n                                }\r\n                                var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\r\n                                var objectStore = transaction.objectStore(_this.tableName);\r\n                                var dbDelete = objectStore.delete(key);\r\n                                dbDelete.addEventListener(\"success\", function () {\r\n                                    _this.closeConnection();\r\n                                    resolve();\r\n                                });\r\n                                dbDelete.addEventListener(\"error\", function (e) {\r\n                                    _this.closeConnection();\r\n                                    reject(e);\r\n                                });\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get all the keys from the storage object as an iterable array of strings.\r\n     */\r\n    DatabaseStorage.prototype.getKeys = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                if (!_this.db) {\r\n                                    return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n                                }\r\n                                var transaction = _this.db.transaction([_this.tableName], \"readonly\");\r\n                                var objectStore = transaction.objectStore(_this.tableName);\r\n                                var dbGetKeys = objectStore.getAllKeys();\r\n                                dbGetKeys.addEventListener(\"success\", function (e) {\r\n                                    var event = e;\r\n                                    _this.closeConnection();\r\n                                    resolve(event.target.result);\r\n                                });\r\n                                dbGetKeys.addEventListener(\"error\", function (e) {\r\n                                    _this.closeConnection();\r\n                                    reject(e);\r\n                                });\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * Checks whether there is an object under the search key in the object store\r\n     */\r\n    DatabaseStorage.prototype.containsKey = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.validateDbIsOpen()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                if (!_this.db) {\r\n                                    return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n                                }\r\n                                var transaction = _this.db.transaction([_this.tableName], \"readonly\");\r\n                                var objectStore = transaction.objectStore(_this.tableName);\r\n                                var dbContainsKey = objectStore.count(key);\r\n                                dbContainsKey.addEventListener(\"success\", function (e) {\r\n                                    var event = e;\r\n                                    _this.closeConnection();\r\n                                    resolve(event.target.result === 1);\r\n                                });\r\n                                dbContainsKey.addEventListener(\"error\", function (e) {\r\n                                    _this.closeConnection();\r\n                                    reject(e);\r\n                                });\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n     * with IndexedDB database versions.\r\n     */\r\n    DatabaseStorage.prototype.deleteDatabase = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                // Check if database being deleted exists\r\n                if (this.db && this.dbOpen) {\r\n                    this.closeConnection();\r\n                }\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\r\n                        deleteDbRequest.addEventListener(\"success\", function () { return resolve(true); });\r\n                        deleteDbRequest.addEventListener(\"blocked\", function () { return resolve(true); });\r\n                        deleteDbRequest.addEventListener(\"error\", function () { return reject(false); });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseStorage;\r\n}());\n\nexport { DatabaseStorage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}