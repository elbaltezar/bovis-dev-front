{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, PerformanceEvents, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectClient =\n/** @class */\nfunction (_super) {\n  __extends(RedirectClient, _super);\n\n  function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n\n\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n            handleBackButton = function (event) {\n              // Clear temporary cache if the back button is clicked during the redirect flow.\n              if (event.persisted) {\n                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n\n                _this.browserStorage.cleanRequestByState(validRequest.state);\n\n                _this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\n              }\n            };\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]); // Create auth code request and generate PKCE params\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent(); // Initialize the client\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage); // Clear temporary cache if the back button is clicked during the redirect flow.\n\n            window.addEventListener(\"pageshow\", handleBackButton);\n            return [4\n            /*yield*/\n            , interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            state = void 0;\n\n            try {\n              serverParams = UrlString.getDeserializedHash(responseHash);\n              state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3\n            /*break*/\n            , 3]; // We are on the page we need to navigate to - handle hash\n\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4\n            /*yield*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 2:\n            handleHashResult = _a.sent();\n\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n\n            return [2\n            /*return*/\n            , handleHashResult];\n\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3\n            /*break*/\n            , 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2\n            /*return*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3\n            /*break*/\n            , 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3\n            /*break*/\n            , 6];\n            homepage = BrowserUtils.getHomepage(); // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(homepage, navigationOptions)];\n\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2\n              /*return*/\n              , this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n\n            _a.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , null];\n\n          case 10:\n            e_2 = _a.sent();\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\"); // Get current location hash from window or cache.\n\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n\n\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            serverParams = UrlString.getDeserializedHash(hash);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n\n\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest); // Clear cache on logout\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validLogoutRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\"); // Ensure interaction is in progress\n\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            // Ensure interaction is not in progress\n            this.browserStorage.setInteractionInProgress(false);\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 8:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            e_3 = _a.sent();\n\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n\n\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n\n  return RedirectClient;\n}(StandardInteractionClient);\n\nexport { RedirectClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","UrlString","AuthError","PerformanceEvents","Constants","ThrottlingUtils","ProtocolUtils","StandardInteractionClient","TemporaryCacheKeys","ApiId","InteractionType","RedirectHandler","BrowserUtils","EventType","BrowserAuthError","NativeInteractionClient","NativeMessageHandler","RedirectClient","_super","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_this","call","nativeStorage","prototype","acquireToken","request","validRequest","serverTelemetryManager","handleBackButton","authCodeRequest","authClient","interactionHandler","navigateUrl","redirectStartPage","e_1","_a","label","setPreQueueTime","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","Redirect","sent","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","EMPTY_STRING","account","initializeServerTelemetryManager","acquireTokenRedirect","event","persisted","verbose","cleanRequestByState","emitEvent","RESTORE_FROM_BFCACHE","trys","push","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","getAuthCodeUrl","nativeBroker","isNativeAvailable","authenticationScheme","getRedirectStartPage","verbosePii","window","addEventListener","initiateAuthRequest","redirectTimeout","system","redirectNavigationTimeout","onRedirectNavigate","setCorrelationId","removeEventListener","cacheFailedRequest","handleRedirectPromise","hash","responseHash","serverParams","loginRequestUrl","loginRequestUrlNormalized","currentUrlNormalized","handleHashResult","navigationOptions","processHashOnRedirect","homepage","e_2","isInteractionInProgress","info","getRedirectResponseHash","location","cleanRequestByInteractionType","getDeserializedHash","validateAndExtractStateFromHash","e","getTemporaryCache","ORIGIN_URI","removeHashFromUrl","href","auth","navigateToLoginRequestUrl","handleHash","indexOf","replaceHash","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","apiId","timeout","noHistory","getHomepage","warning","navigateInternal","isResponseHash","hashContainsKnownProperties","clearHash","cachedHash","removeItem","generateCacheKey","cachedRequest","nativeInteractionClient","userRequestState","currentAuthority","getCachedRequest","accountId","createNativeConnectionNotEstablishedError","acquireTokenPopup","parseRequestState","prompt","undefined","finally","getCachedAuthority","createNoCachedAuthorityError","removeThrottle","clientId","handleCodeResponseFromHash","networkClient","logout","logoutRequest","validLogoutRequest","logoutUri","navigate","e_3","initializeLogoutRequest","LOGOUT_START","clearCacheOnLogout","getLogoutUri","LOGOUT_SUCCESS","getInteractionInProgress","setInteractionInProgress","navigateExternal","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, PerformanceEvents, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RedirectClient = /** @class */ (function (_super) {\r\n    __extends(RedirectClient, _super);\r\n    function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\r\n        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\r\n        _this.nativeStorage = nativeStorageImpl;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Redirects the page to the /authorize endpoint of the IDP\r\n     * @param request\r\n     */\r\n    RedirectClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\r\n                    case 1:\r\n                        validRequest = _a.sent();\r\n                        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\r\n                        handleBackButton = function (event) {\r\n                            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n                            if (event.persisted) {\r\n                                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\r\n                                _this.browserStorage.cleanRequestByState(validRequest.state);\r\n                                _this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\r\n                            }\r\n                        };\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 7, , 8]);\r\n                        // Create auth code request and generate PKCE params\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];\r\n                    case 3:\r\n                        authCodeRequest = _a.sent();\r\n                        // Initialize the client\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\r\n                    case 4:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n                        return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), { nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme) }))];\r\n                    case 5:\r\n                        navigateUrl = _a.sent();\r\n                        redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\r\n                        this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage);\r\n                        // Clear temporary cache if the back button is clicked during the redirect flow.\r\n                        window.addEventListener(\"pageshow\", handleBackButton);\r\n                        return [4 /*yield*/, interactionHandler.initiateAuthRequest(navigateUrl, {\r\n                                navigationClient: this.navigationClient,\r\n                                redirectTimeout: this.config.system.redirectNavigationTimeout,\r\n                                redirectStartPage: redirectStartPage,\r\n                                onRedirectNavigate: request.onRedirectNavigate\r\n                            })];\r\n                    case 6: \r\n                    // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\r\n                    return [2 /*return*/, _a.sent()];\r\n                    case 7:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof AuthError) {\r\n                            e_1.setCorrelationId(this.correlationId);\r\n                        }\r\n                        window.removeEventListener(\"pageshow\", handleBackButton);\r\n                        serverTelemetryManager.cacheFailedRequest(e_1);\r\n                        this.browserStorage.cleanRequestByState(validRequest.state);\r\n                        throw e_1;\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks if navigateToLoginRequestUrl is set, and:\r\n     * - if true, performs logic to cache and navigate\r\n     * - if false, handles hash string and parses response\r\n     * @param hash\r\n     */\r\n    RedirectClient.prototype.handleRedirectPromise = function (hash) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 10, , 11]);\r\n                        if (!this.browserStorage.isInteractionInProgress(true)) {\r\n                            this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        responseHash = this.getRedirectResponseHash(hash || window.location.hash);\r\n                        if (!responseHash) {\r\n                            // Not a recognized server response hash or hash not associated with a redirect request\r\n                            this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\r\n                            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        state = void 0;\r\n                        try {\r\n                            serverParams = UrlString.getDeserializedHash(responseHash);\r\n                            state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\r\n                            this.logger.verbose(\"State extracted from hash\");\r\n                        }\r\n                        catch (e) {\r\n                            this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\r\n                            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\r\n                        loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\r\n                        currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\r\n                        if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 3];\r\n                        // We are on the page we need to navigate to - handle hash\r\n                        this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\r\n                        return [4 /*yield*/, this.handleHash(responseHash, state, serverTelemetryManager)];\r\n                    case 2:\r\n                        handleHashResult = _a.sent();\r\n                        if (loginRequestUrl.indexOf(\"#\") > -1) {\r\n                            // Replace current hash with non-msal hash, if present\r\n                            BrowserUtils.replaceHash(loginRequestUrl);\r\n                        }\r\n                        return [2 /*return*/, handleHashResult];\r\n                    case 3:\r\n                        if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 4];\r\n                        this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\r\n                        return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\r\n                    case 4:\r\n                        if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3 /*break*/, 9];\r\n                        /*\r\n                         * Returned from authority using redirect - need to perform navigation before processing response\r\n                         * Cache the hash to be retrieved after the next redirect\r\n                         */\r\n                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\r\n                        navigationOptions = {\r\n                            apiId: ApiId.handleRedirectPromise,\r\n                            timeout: this.config.system.redirectNavigationTimeout,\r\n                            noHistory: true\r\n                        };\r\n                        processHashOnRedirect = true;\r\n                        if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3 /*break*/, 6];\r\n                        homepage = BrowserUtils.getHomepage();\r\n                        // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\r\n                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\r\n                        this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                        return [4 /*yield*/, this.navigationClient.navigateInternal(homepage, navigationOptions)];\r\n                    case 5:\r\n                        processHashOnRedirect = _a.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 6:\r\n                        // Navigate to page that initiated the redirect request\r\n                        this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\r\n                        return [4 /*yield*/, this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\r\n                    case 7:\r\n                        processHashOnRedirect = _a.sent();\r\n                        _a.label = 8;\r\n                    case 8:\r\n                        // If navigateInternal implementation returns false, handle the hash now\r\n                        if (!processHashOnRedirect) {\r\n                            return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\r\n                        }\r\n                        _a.label = 9;\r\n                    case 9: return [2 /*return*/, null];\r\n                    case 10:\r\n                        e_2 = _a.sent();\r\n                        if (e_2 instanceof AuthError) {\r\n                            e_2.setCorrelationId(this.correlationId);\r\n                        }\r\n                        serverTelemetryManager.cacheFailedRequest(e_2);\r\n                        this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                        throw e_2;\r\n                    case 11: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets the response hash for a redirect request\r\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n     * @param hash\r\n     */\r\n    RedirectClient.prototype.getRedirectResponseHash = function (hash) {\r\n        this.logger.verbose(\"getRedirectResponseHash called\");\r\n        // Get current location hash from window or cache.\r\n        var isResponseHash = UrlString.hashContainsKnownProperties(hash);\r\n        if (isResponseHash) {\r\n            BrowserUtils.clearHash(window);\r\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\r\n            return hash;\r\n        }\r\n        var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\r\n        return cachedHash;\r\n    };\r\n    /**\r\n     * Checks if hash exists and handles in window.\r\n     * @param hash\r\n     * @param state\r\n     */\r\n    RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\r\n                        this.logger.verbose(\"handleHash called, retrieved cached request\");\r\n                        serverParams = UrlString.getDeserializedHash(hash);\r\n                        if (serverParams.accountId) {\r\n                            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n                            if (!this.nativeMessageHandler) {\r\n                                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n                            }\r\n                            nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\r\n                            userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\r\n                            return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), { state: userRequestState, prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n                                 })).finally(function () {\r\n                                    _this.browserStorage.cleanRequestByState(state);\r\n                                })];\r\n                        }\r\n                        currentAuthority = this.browserStorage.getCachedAuthority(state);\r\n                        if (!currentAuthority) {\r\n                            throw BrowserAuthError.createNoCachedAuthorityError();\r\n                        }\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\r\n                    case 1:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\r\n                        interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n                        return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */\r\n    RedirectClient.prototype.logout = function (logoutRequest) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.verbose(\"logoutRedirect called\");\r\n                        validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 10, , 11]);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\r\n                        // Clear cache on logout\r\n                        return [4 /*yield*/, this.clearCacheOnLogout(validLogoutRequest.account)];\r\n                    case 2:\r\n                        // Clear cache on logout\r\n                        _a.sent();\r\n                        navigationOptions = {\r\n                            apiId: ApiId.logout,\r\n                            timeout: this.config.system.redirectNavigationTimeout,\r\n                            noHistory: false\r\n                        };\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\r\n                    case 3:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        logoutUri = authClient.getLogoutUri(validLogoutRequest);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\r\n                        if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3 /*break*/, 7];\r\n                        navigate = logoutRequest.onRedirectNavigate(logoutUri);\r\n                        if (!(navigate !== false)) return [3 /*break*/, 5];\r\n                        this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\r\n                        // Ensure interaction is in progress\r\n                        if (!this.browserStorage.getInteractionInProgress()) {\r\n                            this.browserStorage.setInteractionInProgress(true);\r\n                        }\r\n                        return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 5:\r\n                        // Ensure interaction is not in progress\r\n                        this.browserStorage.setInteractionInProgress(false);\r\n                        this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\r\n                        _a.label = 6;\r\n                    case 6: return [3 /*break*/, 9];\r\n                    case 7:\r\n                        // Ensure interaction is in progress\r\n                        if (!this.browserStorage.getInteractionInProgress()) {\r\n                            this.browserStorage.setInteractionInProgress(true);\r\n                        }\r\n                        return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\r\n                    case 8:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 9: return [3 /*break*/, 11];\r\n                    case 10:\r\n                        e_3 = _a.sent();\r\n                        if (e_3 instanceof AuthError) {\r\n                            e_3.setCorrelationId(this.correlationId);\r\n                        }\r\n                        serverTelemetryManager.cacheFailedRequest(e_3);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n                        throw e_3;\r\n                    case 11:\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use to get the redirectStartPage either from request or use current window\r\n     * @param requestStartPage\r\n     */\r\n    RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\r\n        var redirectStartPage = requestStartPage || window.location.href;\r\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\r\n    };\r\n    return RedirectClient;\r\n}(StandardInteractionClient));\n\nexport { RedirectClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}