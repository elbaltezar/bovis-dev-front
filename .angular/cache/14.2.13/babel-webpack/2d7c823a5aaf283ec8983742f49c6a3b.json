{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentFlowClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentFlowClient, _super);\n\n  function SilentFlowClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n\n\n  SilentFlowClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, refreshTokenClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.acquireCachedToken(request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n              refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n              return [2\n              /*return*/\n              , refreshTokenClient.acquireTokenByRefreshToken(request)];\n            } else {\n              throw e_1;\n            }\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n\n\n  SilentFlowClient.prototype.acquireCachedToken = function (request) {\n    var _a, _b, _c, _d, _e;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var environment, cacheRecord;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            // Cannot renew token if no request object is given.\n            if (!request) {\n              throw ClientConfigurationError.createEmptyTokenRequestError();\n            }\n\n            if (request.forceRefresh) {\n              // Must refresh due to present force_refresh flag.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (!this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\n              // Must refresh due to presence of claims in request preventing cache lookup\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CLAIMS_REQUESTED_CACHE_SKIPPED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n            if (!request.account) {\n              throw ClientAuthError.createNoAccountInSilentRequestError();\n            }\n\n            environment = request.authority || this.authority.getPreferredCache();\n            cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\n\n            if (!cacheRecord.accessToken) {\n              // Must refresh due to non-existent access_token.\n              (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Must refresh due to expired access_token.\n              (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n              // Must refresh due to the refresh_in value.\n              (_e = this.serverTelemetryManager) === null || _e === void 0 ? void 0 : _e.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n\n            return [4\n            /*yield*/\n            , this.generateResultFromCacheRecord(cacheRecord, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _f.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n\n\n  SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, authTime;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (cacheRecord.idToken) {\n              idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n            } // token max_age check\n\n\n            if (request.maxAge || request.maxAge === 0) {\n              authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;\n\n              if (!authTime) {\n                throw ClientAuthError.createAuthTimeNotFoundError();\n              }\n\n              AuthToken.checkMaxAge(authTime, request.maxAge);\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return SilentFlowClient;\n}(BaseClient);\n\nexport { SilentFlowClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","AuthToken","TimeUtils","RefreshTokenClient","ClientAuthError","ClientAuthErrorMessage","ClientConfigurationError","ResponseHandler","CacheOutcome","StringUtils","SilentFlowClient","_super","configuration","performanceClient","call","prototype","acquireToken","request","e_1","refreshTokenClient","_a","label","trys","push","acquireCachedToken","sent","errorCode","tokenRefreshRequired","code","config","acquireTokenByRefreshToken","_b","_c","_d","_e","environment","cacheRecord","_f","createEmptyTokenRequestError","forceRefresh","serverTelemetryManager","setCacheOutcome","FORCE_REFRESH","logger","info","createRefreshRequiredError","cacheOptions","claimsBasedCachingEnabled","isEmptyObj","claims","CLAIMS_REQUESTED_CACHE_SKIPPED","account","createNoAccountInSilentRequestError","authority","getPreferredCache","cacheManager","readCacheRecord","accessToken","NO_CACHED_ACCESS_TOKEN","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","REFRESH_CACHED_ACCESS_TOKEN","incrementCacheHits","generateResultFromCacheRecord","idTokenObj","authTime","idToken","secret","cryptoInterface","maxAge","auth_time","createAuthTimeNotFoundError","checkMaxAge","generateAuthenticationResult","cryptoUtils"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/client/SilentFlowClient.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar SilentFlowClient = /** @class */ (function (_super) {\r\n    __extends(SilentFlowClient, _super);\r\n    function SilentFlowClient(configuration, performanceClient) {\r\n        return _super.call(this, configuration, performanceClient) || this;\r\n    }\r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1, refreshTokenClient;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.acquireCachedToken(request)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                            refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\r\n                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\r\n                        }\r\n                        else {\r\n                            throw e_1;\r\n                        }\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireCachedToken = function (request) {\r\n        var _a, _b, _c, _d, _e;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var environment, cacheRecord;\r\n            return __generator(this, function (_f) {\r\n                switch (_f.label) {\r\n                    case 0:\r\n                        // Cannot renew token if no request object is given.\r\n                        if (!request) {\r\n                            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                        }\r\n                        if (request.forceRefresh) {\r\n                            // Must refresh due to present force_refresh flag.\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (!this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\r\n                            // Must refresh due to presence of claims in request preventing cache lookup\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CLAIMS_REQUESTED_CACHE_SKIPPED);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                        if (!request.account) {\r\n                            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                        }\r\n                        environment = request.authority || this.authority.getPreferredCache();\r\n                        cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\r\n                        if (!cacheRecord.accessToken) {\r\n                            // Must refresh due to non-existent access_token.\r\n                            (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n                            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Must refresh due to expired access_token.\r\n                            (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n                            // Must refresh due to the refresh_in value.\r\n                            (_e = this.serverTelemetryManager) === null || _e === void 0 ? void 0 : _e.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        if (this.config.serverTelemetryManager) {\r\n                            this.config.serverTelemetryManager.incrementCacheHits();\r\n                        }\r\n                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\r\n                    case 1: return [2 /*return*/, _f.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var idTokenObj, authTime;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (cacheRecord.idToken) {\r\n                            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n                        }\r\n                        // token max_age check\r\n                        if (request.maxAge || (request.maxAge === 0)) {\r\n                            authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;\r\n                            if (!authTime) {\r\n                                throw ClientAuthError.createAuthTimeNotFoundError();\r\n                            }\r\n                            AuthToken.checkMaxAge(authTime, request.maxAge);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SilentFlowClient;\r\n}(BaseClient));\n\nexport { SilentFlowClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}