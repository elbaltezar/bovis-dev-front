{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 Device code client\r\n */\n\nvar DeviceCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(DeviceCodeClient, _super);\n\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getDeviceCode(request)];\n\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createExtraQueryParameters(request);\n        endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2\n        /*return*/\n        , this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the device code request\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.createExtraQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n\n\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2\n            /*return*/\n            , {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n\n\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError.createUserTimeoutReachedError();\n    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError.createDeviceCodeExpiredError();\n    }\n\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3\n            /*break*/\n            , 8];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error)) return [3\n            /*break*/\n            , 6];\n            if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3\n            /*break*/\n            , 4];\n            this.logger.info(\"Authorization pending. Continue polling.\");\n            return [4\n            /*yield*/\n            , TimeUtils.delay(pollingIntervalMilli)];\n\n          case 3:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            // for any other error, throw\n            this.logger.info(\"Unexpected error in polling from the server\");\n            throw ServerError.createPostRequestFailed(response.body.error);\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2\n            /*return*/\n            , response.body];\n\n          case 7:\n            return [3\n            /*break*/\n            , 1];\n\n          case 8:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n    requestParameters.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return requestParameters.createQueryString();\n  };\n\n  return DeviceCodeClient;\n}(BaseClient);\n\nexport { DeviceCodeClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","ClientAuthError","RequestParameterBuilder","GrantType","Constants","TimeUtils","ResponseHandler","StringUtils","ServerError","UrlString","DeviceCodeClient","_super","configuration","call","prototype","acquireToken","request","deviceCodeResponse","reqTimestamp","response","responseHandler","_a","label","getDeviceCode","sent","deviceCodeCallback","nowSeconds","acquireTokenWithDeviceCode","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","authority","queryParametersString","endpoint","queryString","headers","thumbprint","createExtraQueryParameters","appendQueryString","deviceCodeEndpoint","createQueryString","createTokenRequestHeaders","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostRequestToDeviceCodeEndpoint","parameterBuilder","extraQueryParameters","addExtraQueryParameters","userCode","deviceCode","verificationUri","expiresIn","interval","message","_b","networkManager","sendPostRequest","body","user_code","device_code","verification_uri","expires_in","addScopes","addClientId","isEmpty","clientCapabilities","length","addClaims","continuePolling","deviceCodeExpirationTime","userSpecifiedTimeout","userSpecifiedCancelFlag","error","createDeviceCodeCancelledError","createUserTimeoutReachedError","verbose","createDeviceCodeExpiredError","requestBody","pollingIntervalMilli","createTokenQueryParameters","tokenEndpoint","createTokenRequestBody","timeout","undefined","cancel","executePostToTokenEndpoint","AUTHORIZATION_PENDING","info","delay","createPostRequestFailed","createDeviceCodeUnknownError","requestParameters","addGrantType","DEVICE_CODE_GRANT","addDeviceCode","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","isEmptyObj"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/client/DeviceCodeClient.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nvar DeviceCodeClient = /** @class */ (function (_super) {\r\n    __extends(DeviceCodeClient, _super);\r\n    function DeviceCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deviceCodeResponse, reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getDeviceCode(request)];\r\n                    case 1:\r\n                        deviceCodeResponse = _a.sent();\r\n                        request.deviceCodeCallback(deviceCodeResponse);\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.getDeviceCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, queryString, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryParametersString = this.createExtraQueryParameters(request);\r\n                endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\r\n                queryString = this.createQueryString(request);\r\n                headers = this.createTokenRequestHeaders();\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: request.authority,\r\n                    scopes: request.scopes,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the device code request\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.createExtraQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\r\n                            body: queryString,\r\n                            headers: headers\r\n                        })];\r\n                    case 1:\r\n                        _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\r\n                        return [2 /*return*/, {\r\n                                userCode: userCode,\r\n                                deviceCode: deviceCode,\r\n                                verificationUri: verificationUri,\r\n                                expiresIn: expiresIn,\r\n                                interval: interval,\r\n                                message: message\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    DeviceCodeClient.prototype.createQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        }\r\n        else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        }\r\n        else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\r\n            }\r\n            this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\r\n                        requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n                        deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n                        pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 8];\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (!(response.body && response.body.error)) return [3 /*break*/, 6];\r\n                        if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\r\n                        this.logger.info(\"Authorization pending. Continue polling.\");\r\n                        return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // for any other error, throw\r\n                        this.logger.info(\"Unexpected error in polling from the server\");\r\n                        throw ServerError.createPostRequestFailed(response.body.error);\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                        return [2 /*return*/, response.body];\r\n                    case 7: return [3 /*break*/, 1];\r\n                    case 8:\r\n                        /*\r\n                         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n                         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n                         */\r\n                        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n                        throw ClientAuthError.createDeviceCodeUnknownError();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\r\n        var requestParameters = new RequestParameterBuilder();\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addApplicationTelemetry(this.config.telemetry.application);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    };\r\n    return DeviceCodeClient;\r\n}(BaseClient));\n\nexport { DeviceCodeClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}