{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\n\nvar AuthenticationHeaderParser =\n/** @class */\nfunction () {\n  function AuthenticationHeaderParser(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n\n\n  AuthenticationHeaderParser.prototype.getShrNonce = function () {\n    // Attempt to parse nonce from Authentiacation-Info\n    var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n\n    if (authenticationInfo) {\n      var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    } // Attempt to parse nonce from WWW-Authenticate\n\n\n    var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n\n    if (wwwAuthenticate) {\n      var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    } // If neither header is present, throw missing headers error\n\n\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  };\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n\n\n  AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\n    var schemeSeparator = header.indexOf(\" \");\n    var challenges = header.substr(schemeSeparator + 1).split(\",\");\n    var challengeMap = {};\n    challenges.forEach(function (challenge) {\n      var _a = challenge.split(\"=\"),\n          key = _a[0],\n          value = _a[1]; // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n\n\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  };\n\n  return AuthenticationHeaderParser;\n}();\n\nexport { AuthenticationHeaderParser };","map":{"version":3,"names":["ClientConfigurationError","HeaderNames","Constants","AuthenticationHeaderParser","headers","prototype","getShrNonce","authenticationInfo","AuthenticationInfo","authenticationInfoChallenges","parseChallenges","nextnonce","createInvalidAuthenticationHeaderError","wwwAuthenticate","WWWAuthenticate","wwwAuthenticateChallenges","nonce","createMissingNonceAuthenticationHeadersError","header","schemeSeparator","indexOf","challenges","substr","split","challengeMap","forEach","challenge","_a","key","value","unescape","replace","EMPTY_STRING"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/request/AuthenticationHeaderParser.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\r\nvar AuthenticationHeaderParser = /** @class */ (function () {\r\n    function AuthenticationHeaderParser(headers) {\r\n        this.headers = headers;\r\n    }\r\n    /**\r\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n     * @returns\r\n     */\r\n    AuthenticationHeaderParser.prototype.getShrNonce = function () {\r\n        // Attempt to parse nonce from Authentiacation-Info\r\n        var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\r\n        if (authenticationInfo) {\r\n            var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\r\n            if (authenticationInfoChallenges.nextnonce) {\r\n                return authenticationInfoChallenges.nextnonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\r\n        }\r\n        // Attempt to parse nonce from WWW-Authenticate\r\n        var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\r\n        if (wwwAuthenticate) {\r\n            var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\r\n            if (wwwAuthenticateChallenges.nonce) {\r\n                return wwwAuthenticateChallenges.nonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\r\n        }\r\n        // If neither header is present, throw missing headers error\r\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\r\n    };\r\n    /**\r\n     * Parses an HTTP header's challenge set into a key/value map.\r\n     * @param header\r\n     * @returns\r\n     */\r\n    AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\r\n        var schemeSeparator = header.indexOf(\" \");\r\n        var challenges = header.substr(schemeSeparator + 1).split(\",\");\r\n        var challengeMap = {};\r\n        challenges.forEach(function (challenge) {\r\n            var _a = challenge.split(\"=\"), key = _a[0], value = _a[1];\r\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\r\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\r\n        });\r\n        return challengeMap;\r\n    };\r\n    return AuthenticationHeaderParser;\r\n}());\n\nexport { AuthenticationHeaderParser };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,wBAAT,QAAyC,sCAAzC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,uBAAvC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,IAAIC,0BAA0B;AAAG;AAAe,YAAY;EACxD,SAASA,0BAAT,CAAoCC,OAApC,EAA6C;IACzC,KAAKA,OAAL,GAAeA,OAAf;EACH;EACD;AACJ;AACA;AACA;;;EACID,0BAA0B,CAACE,SAA3B,CAAqCC,WAArC,GAAmD,YAAY;IAC3D;IACA,IAAIC,kBAAkB,GAAG,KAAKH,OAAL,CAAaH,WAAW,CAACO,kBAAzB,CAAzB;;IACA,IAAID,kBAAJ,EAAwB;MACpB,IAAIE,4BAA4B,GAAG,KAAKC,eAAL,CAAqBH,kBAArB,CAAnC;;MACA,IAAIE,4BAA4B,CAACE,SAAjC,EAA4C;QACxC,OAAOF,4BAA4B,CAACE,SAApC;MACH;;MACD,MAAMX,wBAAwB,CAACY,sCAAzB,CAAgEX,WAAW,CAACO,kBAA5E,EAAgG,iCAAhG,CAAN;IACH,CAT0D,CAU3D;;;IACA,IAAIK,eAAe,GAAG,KAAKT,OAAL,CAAaH,WAAW,CAACa,eAAzB,CAAtB;;IACA,IAAID,eAAJ,EAAqB;MACjB,IAAIE,yBAAyB,GAAG,KAAKL,eAAL,CAAqBG,eAArB,CAAhC;;MACA,IAAIE,yBAAyB,CAACC,KAA9B,EAAqC;QACjC,OAAOD,yBAAyB,CAACC,KAAjC;MACH;;MACD,MAAMhB,wBAAwB,CAACY,sCAAzB,CAAgEX,WAAW,CAACa,eAA5E,EAA6F,6BAA7F,CAAN;IACH,CAlB0D,CAmB3D;;;IACA,MAAMd,wBAAwB,CAACiB,4CAAzB,EAAN;EACH,CArBD;EAsBA;AACJ;AACA;AACA;AACA;;;EACId,0BAA0B,CAACE,SAA3B,CAAqCK,eAArC,GAAuD,UAAUQ,MAAV,EAAkB;IACrE,IAAIC,eAAe,GAAGD,MAAM,CAACE,OAAP,CAAe,GAAf,CAAtB;IACA,IAAIC,UAAU,GAAGH,MAAM,CAACI,MAAP,CAAcH,eAAe,GAAG,CAAhC,EAAmCI,KAAnC,CAAyC,GAAzC,CAAjB;IACA,IAAIC,YAAY,GAAG,EAAnB;IACAH,UAAU,CAACI,OAAX,CAAmB,UAAUC,SAAV,EAAqB;MACpC,IAAIC,EAAE,GAAGD,SAAS,CAACH,KAAV,CAAgB,GAAhB,CAAT;MAAA,IAA+BK,GAAG,GAAGD,EAAE,CAAC,CAAD,CAAvC;MAAA,IAA4CE,KAAK,GAAGF,EAAE,CAAC,CAAD,CAAtD,CADoC,CAEpC;;;MACAH,YAAY,CAACI,GAAD,CAAZ,GAAoBE,QAAQ,CAACD,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwB7B,SAAS,CAAC8B,YAAlC,CAAD,CAA5B;IACH,CAJD;IAKA,OAAOR,YAAP;EACH,CAVD;;EAWA,OAAOrB,0BAAP;AACH,CA/C+C,EAAhD;;AAiDA,SAASA,0BAAT"},"metadata":{},"sourceType":"module"}