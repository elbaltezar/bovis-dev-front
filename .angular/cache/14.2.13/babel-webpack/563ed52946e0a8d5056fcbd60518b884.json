{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ThrottlingUtils } from './ThrottlingUtils.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar NetworkManager =\n/** @class */\nfunction () {\n  function NetworkManager(networkClient, cacheManager) {\n    this.networkClient = networkClient;\n    this.cacheManager = cacheManager;\n  }\n  /**\r\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n   * @param thumbprint\r\n   * @param tokenEndpoint\r\n   * @param options\r\n   */\n\n\n  NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              throw e_1;\n            } else {\n              throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);\n            }\n\n          case 4:\n            ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  return NetworkManager;\n}();\n\nexport { NetworkManager };","map":{"version":3,"names":["__awaiter","__generator","ThrottlingUtils","AuthError","ClientAuthError","NetworkManager","networkClient","cacheManager","prototype","sendPostRequest","thumbprint","tokenEndpoint","options","response","e_1","_a","label","preProcess","trys","push","sendPostRequestAsync","sent","createNetworkError","postProcess"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/network/NetworkManager.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ThrottlingUtils } from './ThrottlingUtils.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar NetworkManager = /** @class */ (function () {\r\n    function NetworkManager(networkClient, cacheManager) {\r\n        this.networkClient = networkClient;\r\n        this.cacheManager = cacheManager;\r\n    }\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint\r\n     * @param tokenEndpoint\r\n     * @param options\r\n     */\r\n    NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof AuthError) {\r\n                            throw e_1;\r\n                        }\r\n                        else {\r\n                            throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);\r\n                        }\r\n                    case 4:\r\n                        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return NetworkManager;\r\n}());\n\nexport { NetworkManager };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,uBAAvC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA;AACA;AACA;AACA;;AACA,IAAIC,cAAc;AAAG;AAAe,YAAY;EAC5C,SAASA,cAAT,CAAwBC,aAAxB,EAAuCC,YAAvC,EAAqD;IACjD,KAAKD,aAAL,GAAqBA,aAArB;IACA,KAAKC,YAAL,GAAoBA,YAApB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIF,cAAc,CAACG,SAAf,CAAyBC,eAAzB,GAA2C,UAAUC,UAAV,EAAsBC,aAAtB,EAAqCC,OAArC,EAA8C;IACrF,OAAOZ,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIa,QAAJ,EAAcC,GAAd;MACA,OAAOb,WAAW,CAAC,IAAD,EAAO,UAAUc,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YACId,eAAe,CAACe,UAAhB,CAA2B,KAAKV,YAAhC,EAA8CG,UAA9C;YACAK,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACID,EAAE,CAACG,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKb,aAAL,CAAmBc,oBAAnB,CAAwCT,aAAxC,EAAuDC,OAAvD,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,QAAQ,GAAGE,EAAE,CAACM,IAAH,EAAX;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,GAAG,GAAGC,EAAE,CAACM,IAAH,EAAN;;YACA,IAAIP,GAAG,YAAYX,SAAnB,EAA8B;cAC1B,MAAMW,GAAN;YACH,CAFD,MAGK;cACD,MAAMV,eAAe,CAACkB,kBAAhB,CAAmCX,aAAnC,EAAkDG,GAAlD,CAAN;YACH;;UACL,KAAK,CAAL;YACIZ,eAAe,CAACqB,WAAhB,CAA4B,KAAKhB,YAAjC,EAA+CG,UAA/C,EAA2DG,QAA3D;YACA,OAAO,CAAC;YAAE;YAAH,EAAeA,QAAf,CAAP;QApBR;MAsBH,CAvBiB,CAAlB;IAwBH,CA1Be,CAAhB;EA2BH,CA5BD;;EA6BA,OAAOR,cAAP;AACH,CAzCmC,EAApC;;AA2CA,SAASA,cAAT"},"metadata":{},"sourceType":"module"}