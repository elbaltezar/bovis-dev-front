{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../../_virtual/_tslib.js';\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.js';\nimport { AuthError, AuthenticationScheme, PerformanceEvents } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.js';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar NativeMessageHandler =\n/** @class */\nfunction () {\n  function NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n\n    this.responseId = 0;\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n\n    this.performanceClient = performanceClient;\n    this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\n  }\n  /**\r\n   * Sends a given message to the extension and resolves with the extension response\r\n   * @param body\r\n   */\n\n\n  NativeMessageHandler.prototype.sendMessage = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: body\n        };\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Sending request to browser extension: \" + JSON.stringify(req));\n        this.messageChannel.port1.postMessage(req);\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          _this.resolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n   * @param {Logger} logger\r\n   * @param {number} handshakeTimeoutMs\r\n   * @param {IPerformanceClient} performanceClient\r\n   */\n\n\n  NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs, performanceClient) {\n    return __awaiter(this, void 0, void 0, function () {\n      var preferredProvider, backupProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.trace(\"NativeMessageHandler - createProvider called.\");\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 5]);\n\n            preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\n            return [4\n            /*yield*/\n            , preferredProvider.sendHandshakeRequest()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , preferredProvider];\n\n          case 3:\n            _a.sent();\n\n            backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\n            return [4\n            /*yield*/\n            , backupProvider.sendHandshakeRequest()];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , backupProvider];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Send handshake request helper.\r\n   */\n\n\n  NativeMessageHandler.prototype.sendHandshakeRequest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\"); // Register this event listener before sending handshake\n\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: {\n            method: NativeExtensionMethod.HandshakeRequest\n          }\n        };\n        this.handshakeEvent.addStaticFields({\n          extensionId: this.extensionId,\n          extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n        });\n\n        this.messageChannel.port1.onmessage = function (event) {\n          _this.onChannelMessage(event);\n        };\n\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          _this.handshakeResolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n\n          _this.timeoutId = window.setTimeout(function () {\n            /*\r\n             * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n             * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n             */\n            window.removeEventListener(\"message\", _this.windowListener, false);\n\n            _this.messageChannel.port1.close();\n\n            _this.messageChannel.port2.close();\n\n            _this.handshakeEvent.endMeasurement({\n              extensionHandshakeTimedOut: true,\n              success: false\n            });\n\n            reject(BrowserAuthError.createNativeHandshakeTimeoutError());\n\n            _this.handshakeResolvers.delete(req.responseId);\n          }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        })];\n      });\n    });\n  };\n  /**\r\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n   * @param event\r\n   */\n\n\n  NativeMessageHandler.prototype.onWindowMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onWindowMessage called\"); // We only accept messages from ourselves\n\n    if (event.source !== window) {\n      return;\n    }\n\n    var request = event.data;\n\n    if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n      return;\n    }\n\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? \"Extension with id: \" + request.extensionId + \" not installed\" : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n\n      if (handshakeResolver) {\n        this.handshakeEvent.endMeasurement({\n          success: false,\n          extensionInstalled: false\n        });\n        handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\n      }\n    }\n  };\n  /**\r\n   * Invoked when a message is received from the extension on the MessageChannel port\r\n   * @param event\r\n   */\n\n\n  NativeMessageHandler.prototype.onChannelMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n    var request = event.data;\n    var resolver = this.resolvers.get(request.responseId);\n    var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n\n    try {\n      var method = request.body.method;\n\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n\n        var response = request.body.response;\n        this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Received response from browser extension: \" + JSON.stringify(response));\n\n        if (response.status !== \"Success\") {\n          resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n        }\n\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          return;\n        }\n\n        clearTimeout(this.timeoutId); // Clear setTimeout\n\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n\n        this.extensionId = request.extensionId;\n        this.extensionVersion = request.body.version;\n        this.logger.verbose(\"NativeMessageHandler - Received HandshakeResponse from extension: \" + this.extensionId);\n        this.handshakeEvent.endMeasurement({\n          extensionInstalled: true,\n          success: true\n        });\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      } // Do nothing if method is not Response or HandshakeResponse\n\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(\"Error parsing response from WAM Extension: \" + err.toString());\n      this.logger.errorPii(\"Unable to parse \" + event);\n\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  };\n  /**\r\n   * Returns the Id for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n\n\n  NativeMessageHandler.prototype.getExtensionId = function () {\n    return this.extensionId;\n  };\n  /**\r\n   * Returns the version for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n\n\n  NativeMessageHandler.prototype.getExtensionVersion = function () {\n    return this.extensionVersion;\n  };\n  /**\r\n   * Returns boolean indicating whether or not the request should attempt to use native broker\r\n   * @param logger\r\n   * @param config\r\n   * @param nativeExtensionProvider\r\n   * @param authenticationScheme\r\n   */\n\n\n  NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {\n    logger.trace(\"isNativeAvailable called\");\n\n    if (!config.system.allowNativeBroker) {\n      logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\"); // Developer disabled WAM\n\n      return false;\n    }\n\n    if (!nativeExtensionProvider) {\n      logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\"); // Extension is not available\n\n      return false;\n    }\n\n    if (authenticationScheme) {\n      switch (authenticationScheme) {\n        case AuthenticationScheme.BEARER:\n        case AuthenticationScheme.POP:\n          logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n          return true;\n\n        default:\n          logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n          return false;\n      }\n    }\n\n    return true;\n  };\n\n  return NativeMessageHandler;\n}();\n\nexport { NativeMessageHandler };","map":{"version":3,"names":["__awaiter","__generator","NativeConstants","NativeExtensionMethod","AuthError","AuthenticationScheme","PerformanceEvents","NativeAuthError","BrowserAuthError","NativeMessageHandler","logger","handshakeTimeoutMs","performanceClient","extensionId","resolvers","Map","handshakeResolvers","responseId","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","handshakeEvent","startMeasurement","NativeMessageHandlerHandshake","prototype","sendMessage","body","req","_this","_a","trace","channel","CHANNEL_ID","tracePii","JSON","stringify","port1","postMessage","Promise","resolve","reject","set","createProvider","preferredProvider","backupProvider","label","trys","push","PREFERRED_EXTENSION_ID","sendHandshakeRequest","sent","window","addEventListener","method","HandshakeRequest","addStaticFields","extensionHandshakeTimeoutMs","onmessage","event","onChannelMessage","origin","port2","timeoutId","setTimeout","removeEventListener","close","endMeasurement","extensionHandshakeTimedOut","success","createNativeHandshakeTimeoutError","delete","source","request","data","verbose","clearTimeout","handshakeResolver","get","extensionInstalled","createNativeExtensionNotInstalledError","resolver","Response","response","status","createError","code","description","ext","result","createUnexpectedError","HandshakeResponse","extensionVersion","version","err","error","errorPii","toString","getExtensionId","getExtensionVersion","isNativeAvailable","config","nativeExtensionProvider","authenticationScheme","system","allowNativeBroker","BEARER","POP"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../../_virtual/_tslib.js';\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.js';\nimport { AuthError, AuthenticationScheme, PerformanceEvents } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.js';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar NativeMessageHandler = /** @class */ (function () {\r\n    function NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, extensionId) {\r\n        this.logger = logger;\r\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\r\n        this.extensionId = extensionId;\r\n        this.resolvers = new Map(); // Used for non-handshake messages\r\n        this.handshakeResolvers = new Map(); // Used for handshake messages\r\n        this.responseId = 0;\r\n        this.messageChannel = new MessageChannel();\r\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\r\n        this.performanceClient = performanceClient;\r\n        this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\r\n    }\r\n    /**\r\n     * Sends a given message to the extension and resolves with the extension response\r\n     * @param body\r\n     */\r\n    NativeMessageHandler.prototype.sendMessage = function (body) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var req;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\r\n                req = {\r\n                    channel: NativeConstants.CHANNEL_ID,\r\n                    extensionId: this.extensionId,\r\n                    responseId: this.responseId++,\r\n                    body: body\r\n                };\r\n                this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\r\n                this.logger.tracePii(\"NativeMessageHandler - Sending request to browser extension: \" + JSON.stringify(req));\r\n                this.messageChannel.port1.postMessage(req);\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        _this.resolvers.set(req.responseId, { resolve: resolve, reject: reject });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n     * @param {Logger} logger\r\n     * @param {number} handshakeTimeoutMs\r\n     * @param {IPerformanceClient} performanceClient\r\n     */\r\n    NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs, performanceClient) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var preferredProvider, backupProvider;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        logger.trace(\"NativeMessageHandler - createProvider called.\");\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 5]);\r\n                        preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\r\n                        return [4 /*yield*/, preferredProvider.sendHandshakeRequest()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, preferredProvider];\r\n                    case 3:\r\n                        _a.sent();\r\n                        backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\r\n                        return [4 /*yield*/, backupProvider.sendHandshakeRequest()];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [2 /*return*/, backupProvider];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Send handshake request helper.\r\n     */\r\n    NativeMessageHandler.prototype.sendHandshakeRequest = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var req;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\r\n                // Register this event listener before sending handshake\r\n                window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\r\n                req = {\r\n                    channel: NativeConstants.CHANNEL_ID,\r\n                    extensionId: this.extensionId,\r\n                    responseId: this.responseId++,\r\n                    body: {\r\n                        method: NativeExtensionMethod.HandshakeRequest\r\n                    }\r\n                };\r\n                this.handshakeEvent.addStaticFields({\r\n                    extensionId: this.extensionId,\r\n                    extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\r\n                });\r\n                this.messageChannel.port1.onmessage = function (event) {\r\n                    _this.onChannelMessage(event);\r\n                };\r\n                window.postMessage(req, window.origin, [this.messageChannel.port2]);\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        _this.handshakeResolvers.set(req.responseId, { resolve: resolve, reject: reject });\r\n                        _this.timeoutId = window.setTimeout(function () {\r\n                            /*\r\n                             * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n                             * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n                             */\r\n                            window.removeEventListener(\"message\", _this.windowListener, false);\r\n                            _this.messageChannel.port1.close();\r\n                            _this.messageChannel.port2.close();\r\n                            _this.handshakeEvent.endMeasurement({ extensionHandshakeTimedOut: true, success: false });\r\n                            reject(BrowserAuthError.createNativeHandshakeTimeoutError());\r\n                            _this.handshakeResolvers.delete(req.responseId);\r\n                        }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n     * @param event\r\n     */\r\n    NativeMessageHandler.prototype.onWindowMessage = function (event) {\r\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\r\n        // We only accept messages from ourselves\r\n        if (event.source !== window) {\r\n            return;\r\n        }\r\n        var request = event.data;\r\n        if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\r\n            return;\r\n        }\r\n        if (request.extensionId && request.extensionId !== this.extensionId) {\r\n            return;\r\n        }\r\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\r\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\r\n            this.logger.verbose(request.extensionId ? \"Extension with id: \" + request.extensionId + \" not installed\" : \"No extension installed\");\r\n            clearTimeout(this.timeoutId);\r\n            this.messageChannel.port1.close();\r\n            this.messageChannel.port2.close();\r\n            window.removeEventListener(\"message\", this.windowListener, false);\r\n            var handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n            if (handshakeResolver) {\r\n                this.handshakeEvent.endMeasurement({ success: false, extensionInstalled: false });\r\n                handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Invoked when a message is received from the extension on the MessageChannel port\r\n     * @param event\r\n     */\r\n    NativeMessageHandler.prototype.onChannelMessage = function (event) {\r\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\r\n        var request = event.data;\r\n        var resolver = this.resolvers.get(request.responseId);\r\n        var handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n        try {\r\n            var method = request.body.method;\r\n            if (method === NativeExtensionMethod.Response) {\r\n                if (!resolver) {\r\n                    return;\r\n                }\r\n                var response = request.body.response;\r\n                this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\r\n                this.logger.tracePii(\"NativeMessageHandler - Received response from browser extension: \" + JSON.stringify(response));\r\n                if (response.status !== \"Success\") {\r\n                    resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\r\n                }\r\n                else if (response.result) {\r\n                    if (response.result[\"code\"] && response.result[\"description\"]) {\r\n                        resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\r\n                    }\r\n                    else {\r\n                        resolver.resolve(response.result);\r\n                    }\r\n                }\r\n                else {\r\n                    throw AuthError.createUnexpectedError(\"Event does not contain result.\");\r\n                }\r\n                this.resolvers.delete(request.responseId);\r\n            }\r\n            else if (method === NativeExtensionMethod.HandshakeResponse) {\r\n                if (!handshakeResolver) {\r\n                    return;\r\n                }\r\n                clearTimeout(this.timeoutId); // Clear setTimeout\r\n                window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\r\n                this.extensionId = request.extensionId;\r\n                this.extensionVersion = request.body.version;\r\n                this.logger.verbose(\"NativeMessageHandler - Received HandshakeResponse from extension: \" + this.extensionId);\r\n                this.handshakeEvent.endMeasurement({ extensionInstalled: true, success: true });\r\n                handshakeResolver.resolve();\r\n                this.handshakeResolvers.delete(request.responseId);\r\n            }\r\n            // Do nothing if method is not Response or HandshakeResponse\r\n        }\r\n        catch (err) {\r\n            this.logger.error(\"Error parsing response from WAM Extension\");\r\n            this.logger.errorPii(\"Error parsing response from WAM Extension: \" + err.toString());\r\n            this.logger.errorPii(\"Unable to parse \" + event);\r\n            if (resolver) {\r\n                resolver.reject(err);\r\n            }\r\n            else if (handshakeResolver) {\r\n                handshakeResolver.reject(err);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the Id for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    NativeMessageHandler.prototype.getExtensionId = function () {\r\n        return this.extensionId;\r\n    };\r\n    /**\r\n     * Returns the version for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    NativeMessageHandler.prototype.getExtensionVersion = function () {\r\n        return this.extensionVersion;\r\n    };\r\n    /**\r\n     * Returns boolean indicating whether or not the request should attempt to use native broker\r\n     * @param logger\r\n     * @param config\r\n     * @param nativeExtensionProvider\r\n     * @param authenticationScheme\r\n     */\r\n    NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {\r\n        logger.trace(\"isNativeAvailable called\");\r\n        if (!config.system.allowNativeBroker) {\r\n            logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\r\n            // Developer disabled WAM\r\n            return false;\r\n        }\r\n        if (!nativeExtensionProvider) {\r\n            logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\r\n            // Extension is not available\r\n            return false;\r\n        }\r\n        if (authenticationScheme) {\r\n            switch (authenticationScheme) {\r\n                case AuthenticationScheme.BEARER:\r\n                case AuthenticationScheme.POP:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\r\n                    return true;\r\n                default:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return NativeMessageHandler;\r\n}());\n\nexport { NativeMessageHandler };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,0BAAvC;AACA,SAASC,eAAT,EAA0BC,qBAA1B,QAAuD,iCAAvD;AACA,SAASC,SAAT,EAAoBC,oBAApB,EAA0CC,iBAA1C,QAAmE,oBAAnE;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB;AAAG;AAAe,YAAY;EAClD,SAASA,oBAAT,CAA8BC,MAA9B,EAAsCC,kBAAtC,EAA0DC,iBAA1D,EAA6EC,WAA7E,EAA0F;IACtF,KAAKH,MAAL,GAAcA,MAAd;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKE,WAAL,GAAmBA,WAAnB;IACA,KAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB,CAJsF,CAI1D;;IAC5B,KAAKC,kBAAL,GAA0B,IAAID,GAAJ,EAA1B,CALsF,CAKjD;;IACrC,KAAKE,UAAL,GAAkB,CAAlB;IACA,KAAKC,cAAL,GAAsB,IAAIC,cAAJ,EAAtB;IACA,KAAKC,cAAL,GAAsB,KAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAtB,CARsF,CAQ/B;;IACvD,KAAKV,iBAAL,GAAyBA,iBAAzB;IACA,KAAKW,cAAL,GAAsBX,iBAAiB,CAACY,gBAAlB,CAAmClB,iBAAiB,CAACmB,6BAArD,CAAtB;EACH;EACD;AACJ;AACA;AACA;;;EACIhB,oBAAoB,CAACiB,SAArB,CAA+BC,WAA/B,GAA6C,UAAUC,IAAV,EAAgB;IACzD,OAAO5B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI6B,GAAJ;;MACA,IAAIC,KAAK,GAAG,IAAZ;;MACA,OAAO7B,WAAW,CAAC,IAAD,EAAO,UAAU8B,EAAV,EAAc;QACnC,KAAKrB,MAAL,CAAYsB,KAAZ,CAAkB,4CAAlB;QACAH,GAAG,GAAG;UACFI,OAAO,EAAE/B,eAAe,CAACgC,UADvB;UAEFrB,WAAW,EAAE,KAAKA,WAFhB;UAGFI,UAAU,EAAE,KAAKA,UAAL,EAHV;UAIFW,IAAI,EAAEA;QAJJ,CAAN;QAMA,KAAKlB,MAAL,CAAYsB,KAAZ,CAAkB,6DAAlB;QACA,KAAKtB,MAAL,CAAYyB,QAAZ,CAAqB,kEAAkEC,IAAI,CAACC,SAAL,CAAeR,GAAf,CAAvF;QACA,KAAKX,cAAL,CAAoBoB,KAApB,CAA0BC,WAA1B,CAAsCV,GAAtC;QACA,OAAO,CAAC;QAAE;QAAH,EAAe,IAAIW,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;UACrDZ,KAAK,CAAChB,SAAN,CAAgB6B,GAAhB,CAAoBd,GAAG,CAACZ,UAAxB,EAAoC;YAAEwB,OAAO,EAAEA,OAAX;YAAoBC,MAAM,EAAEA;UAA5B,CAApC;QACH,CAFiB,CAAf,CAAP;MAGH,CAdiB,CAAlB;IAeH,CAlBe,CAAhB;EAmBH,CApBD;EAqBA;AACJ;AACA;AACA;AACA;AACA;;;EACIjC,oBAAoB,CAACmC,cAArB,GAAsC,UAAUlC,MAAV,EAAkBC,kBAAlB,EAAsCC,iBAAtC,EAAyD;IAC3F,OAAOZ,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI6C,iBAAJ,EAAuBC,cAAvB;MACA,OAAO7C,WAAW,CAAC,IAAD,EAAO,UAAU8B,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACgB,KAAX;UACI,KAAK,CAAL;YACIrC,MAAM,CAACsB,KAAP,CAAa,+CAAb;YACAD,EAAE,CAACgB,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIhB,EAAE,CAACiB,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACAJ,iBAAiB,GAAG,IAAIpC,oBAAJ,CAAyBC,MAAzB,EAAiCC,kBAAjC,EAAqDC,iBAArD,EAAwEV,eAAe,CAACgD,sBAAxF,CAApB;YACA,OAAO,CAAC;YAAE;YAAH,EAAcL,iBAAiB,CAACM,oBAAlB,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIpB,EAAE,CAACqB,IAAH;;YACA,OAAO,CAAC;YAAE;YAAH,EAAeP,iBAAf,CAAP;;UACJ,KAAK,CAAL;YACId,EAAE,CAACqB,IAAH;;YACAN,cAAc,GAAG,IAAIrC,oBAAJ,CAAyBC,MAAzB,EAAiCC,kBAAjC,EAAqDC,iBAArD,CAAjB;YACA,OAAO,CAAC;YAAE;YAAH,EAAckC,cAAc,CAACK,oBAAf,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIpB,EAAE,CAACqB,IAAH;;YACA,OAAO,CAAC;YAAE;YAAH,EAAeN,cAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAlBZ;MAoBH,CArBiB,CAAlB;IAsBH,CAxBe,CAAhB;EAyBH,CA1BD;EA2BA;AACJ;AACA;;;EACIrC,oBAAoB,CAACiB,SAArB,CAA+ByB,oBAA/B,GAAsD,YAAY;IAC9D,OAAOnD,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI6B,GAAJ;;MACA,IAAIC,KAAK,GAAG,IAAZ;;MACA,OAAO7B,WAAW,CAAC,IAAD,EAAO,UAAU8B,EAAV,EAAc;QACnC,KAAKrB,MAAL,CAAYsB,KAAZ,CAAkB,qDAAlB,EADmC,CAEnC;;QACAqB,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKlC,cAAxC,EAAwD,KAAxD,EAHmC,CAG6B;;QAChES,GAAG,GAAG;UACFI,OAAO,EAAE/B,eAAe,CAACgC,UADvB;UAEFrB,WAAW,EAAE,KAAKA,WAFhB;UAGFI,UAAU,EAAE,KAAKA,UAAL,EAHV;UAIFW,IAAI,EAAE;YACF2B,MAAM,EAAEpD,qBAAqB,CAACqD;UAD5B;QAJJ,CAAN;QAQA,KAAKjC,cAAL,CAAoBkC,eAApB,CAAoC;UAChC5C,WAAW,EAAE,KAAKA,WADc;UAEhC6C,2BAA2B,EAAE,KAAK/C;QAFF,CAApC;;QAIA,KAAKO,cAAL,CAAoBoB,KAApB,CAA0BqB,SAA1B,GAAsC,UAAUC,KAAV,EAAiB;UACnD9B,KAAK,CAAC+B,gBAAN,CAAuBD,KAAvB;QACH,CAFD;;QAGAP,MAAM,CAACd,WAAP,CAAmBV,GAAnB,EAAwBwB,MAAM,CAACS,MAA/B,EAAuC,CAAC,KAAK5C,cAAL,CAAoB6C,KAArB,CAAvC;QACA,OAAO,CAAC;QAAE;QAAH,EAAe,IAAIvB,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;UACrDZ,KAAK,CAACd,kBAAN,CAAyB2B,GAAzB,CAA6Bd,GAAG,CAACZ,UAAjC,EAA6C;YAAEwB,OAAO,EAAEA,OAAX;YAAoBC,MAAM,EAAEA;UAA5B,CAA7C;;UACAZ,KAAK,CAACkC,SAAN,GAAkBX,MAAM,CAACY,UAAP,CAAkB,YAAY;YAC5C;AAC5B;AACA;AACA;YAC4BZ,MAAM,CAACa,mBAAP,CAA2B,SAA3B,EAAsCpC,KAAK,CAACV,cAA5C,EAA4D,KAA5D;;YACAU,KAAK,CAACZ,cAAN,CAAqBoB,KAArB,CAA2B6B,KAA3B;;YACArC,KAAK,CAACZ,cAAN,CAAqB6C,KAArB,CAA2BI,KAA3B;;YACArC,KAAK,CAACP,cAAN,CAAqB6C,cAArB,CAAoC;cAAEC,0BAA0B,EAAE,IAA9B;cAAoCC,OAAO,EAAE;YAA7C,CAApC;;YACA5B,MAAM,CAAClC,gBAAgB,CAAC+D,iCAAjB,EAAD,CAAN;;YACAzC,KAAK,CAACd,kBAAN,CAAyBwD,MAAzB,CAAgC3C,GAAG,CAACZ,UAApC;UACH,CAXiB,EAWfa,KAAK,CAACnB,kBAXS,CAAlB,CAFqD,CAavB;QACjC,CAdiB,CAAf,CAAP;MAeH,CAnCiB,CAAlB;IAoCH,CAvCe,CAAhB;EAwCH,CAzCD;EA0CA;AACJ;AACA;AACA;;;EACIF,oBAAoB,CAACiB,SAArB,CAA+BL,eAA/B,GAAiD,UAAUuC,KAAV,EAAiB;IAC9D,KAAKlD,MAAL,CAAYsB,KAAZ,CAAkB,+CAAlB,EAD8D,CAE9D;;IACA,IAAI4B,KAAK,CAACa,MAAN,KAAiBpB,MAArB,EAA6B;MACzB;IACH;;IACD,IAAIqB,OAAO,GAAGd,KAAK,CAACe,IAApB;;IACA,IAAI,CAACD,OAAO,CAACzC,OAAT,IAAoByC,OAAO,CAACzC,OAAR,KAAoB/B,eAAe,CAACgC,UAA5D,EAAwE;MACpE;IACH;;IACD,IAAIwC,OAAO,CAAC7D,WAAR,IAAuB6D,OAAO,CAAC7D,WAAR,KAAwB,KAAKA,WAAxD,EAAqE;MACjE;IACH;;IACD,IAAI6D,OAAO,CAAC9C,IAAR,CAAa2B,MAAb,KAAwBpD,qBAAqB,CAACqD,gBAAlD,EAAoE;MAChE;MACA,KAAK9C,MAAL,CAAYkE,OAAZ,CAAoBF,OAAO,CAAC7D,WAAR,GAAsB,wBAAwB6D,OAAO,CAAC7D,WAAhC,GAA8C,gBAApE,GAAuF,wBAA3G;MACAgE,YAAY,CAAC,KAAKb,SAAN,CAAZ;MACA,KAAK9C,cAAL,CAAoBoB,KAApB,CAA0B6B,KAA1B;MACA,KAAKjD,cAAL,CAAoB6C,KAApB,CAA0BI,KAA1B;MACAd,MAAM,CAACa,mBAAP,CAA2B,SAA3B,EAAsC,KAAK9C,cAA3C,EAA2D,KAA3D;MACA,IAAI0D,iBAAiB,GAAG,KAAK9D,kBAAL,CAAwB+D,GAAxB,CAA4BL,OAAO,CAACzD,UAApC,CAAxB;;MACA,IAAI6D,iBAAJ,EAAuB;QACnB,KAAKvD,cAAL,CAAoB6C,cAApB,CAAmC;UAAEE,OAAO,EAAE,KAAX;UAAkBU,kBAAkB,EAAE;QAAtC,CAAnC;QACAF,iBAAiB,CAACpC,MAAlB,CAAyBlC,gBAAgB,CAACyE,sCAAjB,EAAzB;MACH;IACJ;EACJ,CA1BD;EA2BA;AACJ;AACA;AACA;;;EACIxE,oBAAoB,CAACiB,SAArB,CAA+BmC,gBAA/B,GAAkD,UAAUD,KAAV,EAAiB;IAC/D,KAAKlD,MAAL,CAAYsB,KAAZ,CAAkB,iDAAlB;IACA,IAAI0C,OAAO,GAAGd,KAAK,CAACe,IAApB;IACA,IAAIO,QAAQ,GAAG,KAAKpE,SAAL,CAAeiE,GAAf,CAAmBL,OAAO,CAACzD,UAA3B,CAAf;IACA,IAAI6D,iBAAiB,GAAG,KAAK9D,kBAAL,CAAwB+D,GAAxB,CAA4BL,OAAO,CAACzD,UAApC,CAAxB;;IACA,IAAI;MACA,IAAIsC,MAAM,GAAGmB,OAAO,CAAC9C,IAAR,CAAa2B,MAA1B;;MACA,IAAIA,MAAM,KAAKpD,qBAAqB,CAACgF,QAArC,EAA+C;QAC3C,IAAI,CAACD,QAAL,EAAe;UACX;QACH;;QACD,IAAIE,QAAQ,GAAGV,OAAO,CAAC9C,IAAR,CAAawD,QAA5B;QACA,KAAK1E,MAAL,CAAYsB,KAAZ,CAAkB,iEAAlB;QACA,KAAKtB,MAAL,CAAYyB,QAAZ,CAAqB,sEAAsEC,IAAI,CAACC,SAAL,CAAe+C,QAAf,CAA3F;;QACA,IAAIA,QAAQ,CAACC,MAAT,KAAoB,SAAxB,EAAmC;UAC/BH,QAAQ,CAACxC,MAAT,CAAgBnC,eAAe,CAAC+E,WAAhB,CAA4BF,QAAQ,CAACG,IAArC,EAA2CH,QAAQ,CAACI,WAApD,EAAiEJ,QAAQ,CAACK,GAA1E,CAAhB;QACH,CAFD,MAGK,IAAIL,QAAQ,CAACM,MAAb,EAAqB;UACtB,IAAIN,QAAQ,CAACM,MAAT,CAAgB,MAAhB,KAA2BN,QAAQ,CAACM,MAAT,CAAgB,aAAhB,CAA/B,EAA+D;YAC3DR,QAAQ,CAACxC,MAAT,CAAgBnC,eAAe,CAAC+E,WAAhB,CAA4BF,QAAQ,CAACM,MAAT,CAAgB,MAAhB,CAA5B,EAAqDN,QAAQ,CAACM,MAAT,CAAgB,aAAhB,CAArD,EAAqFN,QAAQ,CAACM,MAAT,CAAgB,KAAhB,CAArF,CAAhB;UACH,CAFD,MAGK;YACDR,QAAQ,CAACzC,OAAT,CAAiB2C,QAAQ,CAACM,MAA1B;UACH;QACJ,CAPI,MAQA;UACD,MAAMtF,SAAS,CAACuF,qBAAV,CAAgC,gCAAhC,CAAN;QACH;;QACD,KAAK7E,SAAL,CAAe0D,MAAf,CAAsBE,OAAO,CAACzD,UAA9B;MACH,CAtBD,MAuBK,IAAIsC,MAAM,KAAKpD,qBAAqB,CAACyF,iBAArC,EAAwD;QACzD,IAAI,CAACd,iBAAL,EAAwB;UACpB;QACH;;QACDD,YAAY,CAAC,KAAKb,SAAN,CAAZ,CAJyD,CAI3B;;QAC9BX,MAAM,CAACa,mBAAP,CAA2B,SAA3B,EAAsC,KAAK9C,cAA3C,EAA2D,KAA3D,EALyD,CAKU;;QACnE,KAAKP,WAAL,GAAmB6D,OAAO,CAAC7D,WAA3B;QACA,KAAKgF,gBAAL,GAAwBnB,OAAO,CAAC9C,IAAR,CAAakE,OAArC;QACA,KAAKpF,MAAL,CAAYkE,OAAZ,CAAoB,uEAAuE,KAAK/D,WAAhG;QACA,KAAKU,cAAL,CAAoB6C,cAApB,CAAmC;UAAEY,kBAAkB,EAAE,IAAtB;UAA4BV,OAAO,EAAE;QAArC,CAAnC;QACAQ,iBAAiB,CAACrC,OAAlB;QACA,KAAKzB,kBAAL,CAAwBwD,MAAxB,CAA+BE,OAAO,CAACzD,UAAvC;MACH,CArCD,CAsCA;;IACH,CAvCD,CAwCA,OAAO8E,GAAP,EAAY;MACR,KAAKrF,MAAL,CAAYsF,KAAZ,CAAkB,2CAAlB;MACA,KAAKtF,MAAL,CAAYuF,QAAZ,CAAqB,gDAAgDF,GAAG,CAACG,QAAJ,EAArE;MACA,KAAKxF,MAAL,CAAYuF,QAAZ,CAAqB,qBAAqBrC,KAA1C;;MACA,IAAIsB,QAAJ,EAAc;QACVA,QAAQ,CAACxC,MAAT,CAAgBqD,GAAhB;MACH,CAFD,MAGK,IAAIjB,iBAAJ,EAAuB;QACxBA,iBAAiB,CAACpC,MAAlB,CAAyBqD,GAAzB;MACH;IACJ;EACJ,CAxDD;EAyDA;AACJ;AACA;AACA;;;EACItF,oBAAoB,CAACiB,SAArB,CAA+ByE,cAA/B,GAAgD,YAAY;IACxD,OAAO,KAAKtF,WAAZ;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACIJ,oBAAoB,CAACiB,SAArB,CAA+B0E,mBAA/B,GAAqD,YAAY;IAC7D,OAAO,KAAKP,gBAAZ;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIpF,oBAAoB,CAAC4F,iBAArB,GAAyC,UAAUC,MAAV,EAAkB5F,MAAlB,EAA0B6F,uBAA1B,EAAmDC,oBAAnD,EAAyE;IAC9G9F,MAAM,CAACsB,KAAP,CAAa,0BAAb;;IACA,IAAI,CAACsE,MAAM,CAACG,MAAP,CAAcC,iBAAnB,EAAsC;MAClChG,MAAM,CAACsB,KAAP,CAAa,sEAAb,EADkC,CAElC;;MACA,OAAO,KAAP;IACH;;IACD,IAAI,CAACuE,uBAAL,EAA8B;MAC1B7F,MAAM,CAACsB,KAAP,CAAa,+EAAb,EAD0B,CAE1B;;MACA,OAAO,KAAP;IACH;;IACD,IAAIwE,oBAAJ,EAA0B;MACtB,QAAQA,oBAAR;QACI,KAAKnG,oBAAoB,CAACsG,MAA1B;QACA,KAAKtG,oBAAoB,CAACuG,GAA1B;UACIlG,MAAM,CAACsB,KAAP,CAAa,sEAAb;UACA,OAAO,IAAP;;QACJ;UACItB,MAAM,CAACsB,KAAP,CAAa,2EAAb;UACA,OAAO,KAAP;MAPR;IASH;;IACD,OAAO,IAAP;EACH,CAxBD;;EAyBA,OAAOvB,oBAAP;AACH,CA/PyC,EAA1C;;AAiQA,SAASA,oBAAT"},"metadata":{},"sourceType":"module"}