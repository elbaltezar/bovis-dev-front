{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\n\nvar XhrClient =\n/** @class */\nfunction () {\n  function XhrClient() {}\n  /**\r\n   * XhrClient for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  XhrClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\n      });\n    });\n  };\n  /**\r\n   * XhrClient for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  XhrClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\n      });\n    });\n  };\n  /**\r\n   * Helper for XhrClient requests.\r\n   * @param url\r\n   * @param method\r\n   * @param options\r\n   */\n\n\n  XhrClient.prototype.sendRequestAsync = function (url, method, options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url,\n      /* async: */\n      true);\n\n      _this.setXhrHeaders(xhr, options);\n\n      xhr.onload = function () {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        }\n\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n          var networkResponse = {\n            headers: _this.getHeaderDict(xhr),\n            body: jsonResponse,\n            status: xhr.status\n          };\n          resolve(networkResponse);\n        } catch (e) {\n          reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n        }\n      };\n\n      xhr.onerror = function () {\n        if (window.navigator.onLine) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        } else {\n          reject(BrowserAuthError.createNoNetworkConnectivityError());\n        }\n      };\n\n      if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n        xhr.send(options.body);\n      } else if (method === HTTP_REQUEST_TYPE.GET) {\n        xhr.send();\n      } else {\n        throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n      }\n    });\n  };\n  /**\r\n   * Helper to set XHR headers for request.\r\n   * @param xhr\r\n   * @param options\r\n   */\n\n\n  XhrClient.prototype.setXhrHeaders = function (xhr, options) {\n    if (options && options.headers) {\n      var headers_1 = options.headers;\n      Object.keys(headers_1).forEach(function (key) {\n        xhr.setRequestHeader(key, headers_1[key]);\n      });\n    }\n  };\n  /**\r\n   * Gets a string map of the headers received in the response.\r\n   *\r\n   * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n   * @param xhr\r\n   */\n\n\n  XhrClient.prototype.getHeaderDict = function (xhr) {\n    var headerString = xhr.getAllResponseHeaders();\n    var headerArr = headerString.trim().split(/[\\r\\n]+/);\n    var headerDict = {};\n    headerArr.forEach(function (value) {\n      var parts = value.split(\": \");\n      var headerName = parts.shift();\n      var headerVal = parts.join(\": \");\n\n      if (headerName && headerVal) {\n        headerDict[headerName] = headerVal;\n      }\n    });\n    return headerDict;\n  };\n\n  return XhrClient;\n}();\n\nexport { XhrClient };","map":{"version":3,"names":["__awaiter","__generator","BrowserAuthError","HTTP_REQUEST_TYPE","XhrClient","prototype","sendGetRequestAsync","url","options","_a","sendRequestAsync","GET","sendPostRequestAsync","POST","method","_this","Promise","resolve","reject","xhr","XMLHttpRequest","open","setXhrHeaders","onload","status","createPostRequestFailedError","createGetRequestFailedError","jsonResponse","JSON","parse","responseText","networkResponse","headers","getHeaderDict","body","e","createFailedToParseNetworkResponseError","onerror","window","navigator","onLine","createNoNetworkConnectivityError","send","createHttpMethodNotImplementedError","headers_1","Object","keys","forEach","key","setRequestHeader","headerString","getAllResponseHeaders","headerArr","trim","split","headerDict","value","parts","headerName","shift","headerVal","join"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/network/XhrClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\r\nvar XhrClient = /** @class */ (function () {\r\n    function XhrClient() {\r\n    }\r\n    /**\r\n     * XhrClient for REST endpoints - Get request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */\r\n    XhrClient.prototype.sendGetRequestAsync = function (url, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * XhrClient for REST endpoints - Post request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */\r\n    XhrClient.prototype.sendPostRequestAsync = function (url, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper for XhrClient requests.\r\n     * @param url\r\n     * @param method\r\n     * @param options\r\n     */\r\n    XhrClient.prototype.sendRequestAsync = function (url, method, options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            _this.setXhrHeaders(xhr, options);\r\n            xhr.onload = function () {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                    else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                }\r\n                try {\r\n                    var jsonResponse = JSON.parse(xhr.responseText);\r\n                    var networkResponse = {\r\n                        headers: _this.getHeaderDict(xhr),\r\n                        body: jsonResponse,\r\n                        status: xhr.status\r\n                    };\r\n                    resolve(networkResponse);\r\n                }\r\n                catch (e) {\r\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\r\n                }\r\n            };\r\n            xhr.onerror = function () {\r\n                if (window.navigator.onLine) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                    else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                }\r\n                else {\r\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\r\n                }\r\n            };\r\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\r\n                xhr.send(options.body);\r\n            }\r\n            else if (method === HTTP_REQUEST_TYPE.GET) {\r\n                xhr.send();\r\n            }\r\n            else {\r\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Helper to set XHR headers for request.\r\n     * @param xhr\r\n     * @param options\r\n     */\r\n    XhrClient.prototype.setXhrHeaders = function (xhr, options) {\r\n        if (options && options.headers) {\r\n            var headers_1 = options.headers;\r\n            Object.keys(headers_1).forEach(function (key) {\r\n                xhr.setRequestHeader(key, headers_1[key]);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Gets a string map of the headers received in the response.\r\n     *\r\n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n     * @param xhr\r\n     */\r\n    XhrClient.prototype.getHeaderDict = function (xhr) {\r\n        var headerString = xhr.getAllResponseHeaders();\r\n        var headerArr = headerString.trim().split(/[\\r\\n]+/);\r\n        var headerDict = {};\r\n        headerArr.forEach(function (value) {\r\n            var parts = value.split(\": \");\r\n            var headerName = parts.shift();\r\n            var headerVal = parts.join(\": \");\r\n            if (headerName && headerVal) {\r\n                headerDict[headerName] = headerVal;\r\n            }\r\n        });\r\n        return headerDict;\r\n    };\r\n    return XhrClient;\r\n}());\n\nexport { XhrClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}