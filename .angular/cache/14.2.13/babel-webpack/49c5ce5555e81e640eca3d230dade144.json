{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// RSA KeyGen Algorithm\n\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\"; // SHA-256 hashing algorithm\n\nvar S256_HASH_ALG = \"SHA-256\"; // MOD length for PoP tokens\n\nvar MODULUS_LENGTH = 2048; // Public Exponent\n\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\n\nvar BrowserCrypto =\n/** @class */\nfunction () {\n  function BrowserCrypto(logger, cryptoOptions) {\n    var _a, _b;\n\n    this.logger = logger;\n    this.cryptoOptions = cryptoOptions;\n\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else if (this.hasIECrypto()) {\n      // For IE11, use msCrypto interface\n      this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\n      this.subtleCrypto = new MsBrowserCrypto();\n    } else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\n      // For other browsers, use MSR Crypto if found\n      this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\n      this.subtleCrypto = new MsrBrowserCrypto();\n    } else {\n      if (this.hasMsrCrypto()) {\n        this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\n      }\n\n      this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\n    } // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\n\n\n    if (this.subtleCrypto.initPrng) {\n      this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\n\n      if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\n        this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\n        throw BrowserConfigurationAuthError.createEntropyNotProvided();\n      }\n\n      this.logger.verbose(\"BrowserCrypto: Entropy provided\");\n      this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\n    }\n\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\r\n   * Check whether IE crypto or other browser cryptography is available.\r\n   */\n\n\n  BrowserCrypto.prototype.hasIECrypto = function () {\n    return \"msCrypto\" in window;\n  };\n  /**\r\n   * Check whether browser crypto is available.\r\n   */\n\n\n  BrowserCrypto.prototype.hasBrowserCrypto = function () {\n    return \"crypto\" in window;\n  };\n  /**\r\n   * Check whether MSR crypto polyfill is available\r\n   */\n\n\n  BrowserCrypto.prototype.hasMsrCrypto = function () {\n    return \"msrCrypto\" in window;\n  };\n  /**\r\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n   * @param dataString\r\n   */\n\n\n  BrowserCrypto.prototype.sha256Digest = function (dataString) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = BrowserStringUtils.stringToUtf8Arr(dataString); // MSR Crypto wants object with name property, instead of string\n\n        return [2\n        /*return*/\n        , this.subtleCrypto.digest({\n          name: S256_HASH_ALG\n        }, data)];\n      });\n    });\n  };\n  /**\r\n   * Populates buffer with cryptographically random values.\r\n   * @param dataBuffer\r\n   */\n\n\n  BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  };\n  /**\r\n   * Generates a keypair based on current keygen algorithm config.\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Export key as Json Web Key (JWK)\r\n   * @param key\r\n   * @param format\r\n   */\n\n\n  BrowserCrypto.prototype.exportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.exportKey(key)];\n      });\n    });\n  };\n  /**\r\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Signs given data with given key\r\n   * @param key\r\n   * @param data\r\n   */\n\n\n  BrowserCrypto.prototype.sign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\n      });\n    });\n  };\n\n  return BrowserCrypto;\n}();\n\nexport { BrowserCrypto };","map":{"version":3,"names":["__awaiter","__generator","BrowserStringUtils","BrowserAuthError","ModernBrowserCrypto","MsrBrowserCrypto","MsBrowserCrypto","BrowserConfigurationAuthError","PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","BrowserCrypto","logger","cryptoOptions","_a","_b","hasBrowserCrypto","verbose","subtleCrypto","hasIECrypto","hasMsrCrypto","useMsrCrypto","info","error","createCryptoNotAvailableError","initPrng","entropy","createEntropyNotProvided","keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","prototype","window","sha256Digest","dataString","data","stringToUtf8Arr","digest","getRandomValues","dataBuffer","generateKeyPair","extractable","usages","generateKey","exportJwk","key","exportKey","importJwk","importKey","sign"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\r\n// RSA KeyGen Algorithm\r\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\r\n// SHA-256 hashing algorithm\r\nvar S256_HASH_ALG = \"SHA-256\";\r\n// MOD length for PoP tokens\r\nvar MODULUS_LENGTH = 2048;\r\n// Public Exponent\r\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\r\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\r\nvar BrowserCrypto = /** @class */ (function () {\r\n    function BrowserCrypto(logger, cryptoOptions) {\r\n        var _a, _b;\r\n        this.logger = logger;\r\n        this.cryptoOptions = cryptoOptions;\r\n        if (this.hasBrowserCrypto()) {\r\n            // Use standard modern web crypto if available\r\n            this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\r\n            this.subtleCrypto = new ModernBrowserCrypto();\r\n        }\r\n        else if (this.hasIECrypto()) {\r\n            // For IE11, use msCrypto interface\r\n            this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\r\n            this.subtleCrypto = new MsBrowserCrypto();\r\n        }\r\n        else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\r\n            // For other browsers, use MSR Crypto if found\r\n            this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\r\n            this.subtleCrypto = new MsrBrowserCrypto();\r\n        }\r\n        else {\r\n            if (this.hasMsrCrypto()) {\r\n                this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\r\n            }\r\n            this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\r\n        }\r\n        // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\r\n        if (this.subtleCrypto.initPrng) {\r\n            this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\r\n            if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\r\n                this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\r\n                throw BrowserConfigurationAuthError.createEntropyNotProvided();\r\n            }\r\n            this.logger.verbose(\"BrowserCrypto: Entropy provided\");\r\n            this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\r\n        }\r\n        this.keygenAlgorithmOptions = {\r\n            name: PKCS1_V15_KEYGEN_ALG,\r\n            hash: S256_HASH_ALG,\r\n            modulusLength: MODULUS_LENGTH,\r\n            publicExponent: PUBLIC_EXPONENT\r\n        };\r\n    }\r\n    /**\r\n     * Check whether IE crypto or other browser cryptography is available.\r\n     */\r\n    BrowserCrypto.prototype.hasIECrypto = function () {\r\n        return \"msCrypto\" in window;\r\n    };\r\n    /**\r\n     * Check whether browser crypto is available.\r\n     */\r\n    BrowserCrypto.prototype.hasBrowserCrypto = function () {\r\n        return \"crypto\" in window;\r\n    };\r\n    /**\r\n     * Check whether MSR crypto polyfill is available\r\n     */\r\n    BrowserCrypto.prototype.hasMsrCrypto = function () {\r\n        return \"msrCrypto\" in window;\r\n    };\r\n    /**\r\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n     * @param dataString\r\n     */\r\n    BrowserCrypto.prototype.sha256Digest = function (dataString) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return __generator(this, function (_a) {\r\n                data = BrowserStringUtils.stringToUtf8Arr(dataString);\r\n                // MSR Crypto wants object with name property, instead of string\r\n                return [2 /*return*/, this.subtleCrypto.digest({ name: S256_HASH_ALG }, data)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Populates buffer with cryptographically random values.\r\n     * @param dataBuffer\r\n     */\r\n    BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\r\n        return this.subtleCrypto.getRandomValues(dataBuffer);\r\n    };\r\n    /**\r\n     * Generates a keypair based on current keygen algorithm config.\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Export key as Json Web Key (JWK)\r\n     * @param key\r\n     * @param format\r\n     */\r\n    BrowserCrypto.prototype.exportJwk = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.exportKey(key)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n     * @param key\r\n     * @param format\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Signs given data with given key\r\n     * @param key\r\n     * @param data\r\n     */\r\n    BrowserCrypto.prototype.sign = function (key, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\r\n            });\r\n        });\r\n    };\r\n    return BrowserCrypto;\r\n}());\n\nexport { BrowserCrypto };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}