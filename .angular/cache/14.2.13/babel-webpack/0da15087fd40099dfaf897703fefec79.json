{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventHandler =\n/** @class */\nfunction () {\n  function EventHandler(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n    this.listeningToStorageEvents = false;\n    this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n\n\n  EventHandler.prototype.addEventCallback = function (callback) {\n    if (typeof window !== \"undefined\") {\n      var callbackId = this.browserCrypto.createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(\"Event callback registered with id: \" + callbackId);\n      return callbackId;\n    }\n\n    return null;\n  };\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n\n\n  EventHandler.prototype.removeEventCallback = function (callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\n  };\n  /**\r\n   * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.enableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (!this.listeningToStorageEvents) {\n      this.logger.verbose(\"Adding account storage listener.\");\n      this.listeningToStorageEvents = true;\n      window.addEventListener(\"storage\", this.handleAccountCacheChange);\n    } else {\n      this.logger.verbose(\"Account storage listener already registered.\");\n    }\n  };\n  /**\r\n   * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.disableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (this.listeningToStorageEvents) {\n      this.logger.verbose(\"Removing account storage listener.\");\n      window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n      this.listeningToStorageEvents = false;\n    } else {\n      this.logger.verbose(\"No account storage listener registered.\");\n    }\n  };\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n\n\n  EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\n    var _this = this;\n\n    if (typeof window !== \"undefined\") {\n      var message_1 = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(\"Emitting event: \" + eventType);\n      this.eventCallbacks.forEach(function (callback, callbackId) {\n        _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\n\n        callback.apply(null, [message_1]);\n      });\n    }\n  };\n  /**\r\n   * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n   */\n\n\n  EventHandler.prototype.handleAccountCacheChange = function (e) {\n    try {\n      var cacheValue = e.newValue || e.oldValue;\n\n      if (!cacheValue) {\n        return;\n      }\n\n      var parsedValue = JSON.parse(cacheValue);\n\n      if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n        return;\n      }\n\n      var accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\n      var accountInfo = accountEntity.getAccountInfo();\n\n      if (!e.oldValue && e.newValue) {\n        this.logger.info(\"Account was added to cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n      } else if (!e.newValue && e.oldValue) {\n        this.logger.info(\"Account was removed from cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"names":["AccountEntity","CacheManager","EventType","EventHandler","logger","browserCrypto","eventCallbacks","Map","listeningToStorageEvents","handleAccountCacheChange","bind","prototype","addEventCallback","callback","window","callbackId","createNewGuid","set","verbose","removeEventCallback","delete","enableAccountStorageEvents","addEventListener","disableAccountStorageEvents","removeEventListener","emitEvent","eventType","interactionType","payload","error","_this","message_1","timestamp","Date","now","info","forEach","apply","e","cacheValue","newValue","oldValue","parsedValue","JSON","parse","isAccountEntity","accountEntity","toObject","accountInfo","getAccountInfo","ACCOUNT_ADDED","undefined","ACCOUNT_REMOVED"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/event/EventHandler.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar EventHandler = /** @class */ (function () {\r\n    function EventHandler(logger, browserCrypto) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger;\r\n        this.browserCrypto = browserCrypto;\r\n        this.listeningToStorageEvents = false;\r\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\r\n    }\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    EventHandler.prototype.addEventCallback = function (callback) {\r\n        if (typeof window !== \"undefined\") {\r\n            var callbackId = this.browserCrypto.createNewGuid();\r\n            this.eventCallbacks.set(callbackId, callback);\r\n            this.logger.verbose(\"Event callback registered with id: \" + callbackId);\r\n            return callbackId;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    EventHandler.prototype.removeEventCallback = function (callbackId) {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\r\n    };\r\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    EventHandler.prototype.enableAccountStorageEvents = function () {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n        if (!this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Adding account storage listener.\");\r\n            this.listeningToStorageEvents = true;\r\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\r\n        }\r\n        else {\r\n            this.logger.verbose(\"Account storage listener already registered.\");\r\n        }\r\n    };\r\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    EventHandler.prototype.disableAccountStorageEvents = function () {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n        if (this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Removing account storage listener.\");\r\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\r\n            this.listeningToStorageEvents = false;\r\n        }\r\n        else {\r\n            this.logger.verbose(\"No account storage listener registered.\");\r\n        }\r\n    };\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\r\n        var _this = this;\r\n        if (typeof window !== \"undefined\") {\r\n            var message_1 = {\r\n                eventType: eventType,\r\n                interactionType: interactionType || null,\r\n                payload: payload || null,\r\n                error: error || null,\r\n                timestamp: Date.now()\r\n            };\r\n            this.logger.info(\"Emitting event: \" + eventType);\r\n            this.eventCallbacks.forEach(function (callback, callbackId) {\r\n                _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\r\n                callback.apply(null, [message_1]);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n     */\r\n    EventHandler.prototype.handleAccountCacheChange = function (e) {\r\n        try {\r\n            var cacheValue = e.newValue || e.oldValue;\r\n            if (!cacheValue) {\r\n                return;\r\n            }\r\n            var parsedValue = JSON.parse(cacheValue);\r\n            if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\r\n                return;\r\n            }\r\n            var accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\r\n            var accountInfo = accountEntity.getAccountInfo();\r\n            if (!e.oldValue && e.newValue) {\r\n                this.logger.info(\"Account was added to cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\r\n            }\r\n            else if (!e.newValue && e.oldValue) {\r\n                this.logger.info(\"Account was removed from cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return;\r\n        }\r\n    };\r\n    return EventHandler;\r\n}());\n\nexport { EventHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}