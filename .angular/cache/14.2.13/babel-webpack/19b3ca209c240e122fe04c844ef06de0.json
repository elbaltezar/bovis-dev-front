{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator, __assign, __extends } from '../_virtual/_tslib.js';\nimport { Separators, CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from './entities/AccountEntity.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { name, version } from '../packageMetadata.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\n\nvar CacheManager =\n/** @class */\nfunction () {\n  function CacheManager(clientId, cryptoImpl, logger) {\n    this.clientId = clientId;\n    this.cryptoImpl = cryptoImpl;\n    this.commonLogger = logger.clone(name, version);\n  }\n  /**\r\n   * Returns all accounts in cache\r\n   */\n\n\n  CacheManager.prototype.getAllAccounts = function () {\n    var _this = this;\n\n    var allAccountKeys = this.getAccountKeys();\n\n    if (allAccountKeys.length < 1) {\n      return [];\n    }\n\n    var accountEntities = allAccountKeys.reduce(function (accounts, key) {\n      var entity = _this.getAccount(key);\n\n      if (!entity) {\n        return accounts;\n      }\n\n      accounts.push(entity);\n      return accounts;\n    }, []);\n\n    if (accountEntities.length < 1) {\n      return [];\n    } else {\n      var allAccounts = accountEntities.map(function (accountEntity) {\n        return _this.getAccountInfoFromEntity(accountEntity);\n      });\n      return allAccounts;\n    }\n  };\n  /**\r\n   * Gets accountInfo object based on provided filters\r\n   */\n\n\n  CacheManager.prototype.getAccountInfoFilteredBy = function (accountFilter) {\n    var allAccounts = this.getAccountsFilteredBy(accountFilter);\n\n    if (allAccounts.length > 0) {\n      return this.getAccountInfoFromEntity(allAccounts[0]);\n    } else {\n      return null;\n    }\n  };\n\n  CacheManager.prototype.getAccountInfoFromEntity = function (accountEntity) {\n    var accountInfo = accountEntity.getAccountInfo();\n    var idToken = this.getIdToken(accountInfo);\n\n    if (idToken) {\n      accountInfo.idToken = idToken.secret;\n      accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\n    }\n\n    return accountInfo;\n  };\n  /**\r\n   * saves a cache record\r\n   * @param cacheRecord\r\n   */\n\n\n  CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!cacheRecord) {\n              throw ClientAuthError.createNullOrUndefinedCacheRecord();\n            }\n\n            if (!!cacheRecord.account) {\n              this.setAccount(cacheRecord.account);\n            }\n\n            if (!!cacheRecord.idToken) {\n              this.setIdTokenCredential(cacheRecord.idToken);\n            }\n\n            if (!!!cacheRecord.accessToken) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.saveAccessToken(cacheRecord.accessToken)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            if (!!cacheRecord.refreshToken) {\n              this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n\n            if (!!cacheRecord.appMetadata) {\n              this.setAppMetadata(cacheRecord.appMetadata);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * saves access token credential\r\n   * @param credential\r\n   */\n\n\n  CacheManager.prototype.saveAccessToken = function (credential) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessTokenFilter, tokenKeys, currentScopes, removedAccessTokens;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            accessTokenFilter = {\n              clientId: credential.clientId,\n              credentialType: credential.credentialType,\n              environment: credential.environment,\n              homeAccountId: credential.homeAccountId,\n              realm: credential.realm,\n              tokenType: credential.tokenType,\n              requestedClaimsHash: credential.requestedClaimsHash\n            };\n            tokenKeys = this.getTokenKeys();\n            currentScopes = ScopeSet.fromString(credential.target);\n            removedAccessTokens = [];\n            tokenKeys.accessToken.forEach(function (key) {\n              if (!_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n                return;\n              }\n\n              var tokenEntity = _this.getAccessTokenCredential(key);\n\n              if (tokenEntity && _this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                  removedAccessTokens.push(_this.removeAccessToken(key));\n                }\n              }\n            });\n            return [4\n            /*yield*/\n            , Promise.all(removedAccessTokens)];\n\n          case 1:\n            _a.sent();\n\n            this.setAccessTokenCredential(credential);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\n    var _this = this;\n\n    var allAccountKeys = this.getAccountKeys();\n    var matchingAccounts = [];\n    allAccountKeys.forEach(function (cacheKey) {\n      if (!_this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {\n        // Don't parse value if the key doesn't match the account filters\n        return;\n      }\n\n      var entity = _this.getAccount(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!accountFilter.homeAccountId && !_this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n        return;\n      }\n\n      if (!!accountFilter.localAccountId && !_this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\n        return;\n      }\n\n      if (!!accountFilter.username && !_this.matchUsername(entity, accountFilter.username)) {\n        return;\n      }\n\n      if (!!accountFilter.environment && !_this.matchEnvironment(entity, accountFilter.environment)) {\n        return;\n      }\n\n      if (!!accountFilter.realm && !_this.matchRealm(entity, accountFilter.realm)) {\n        return;\n      }\n\n      if (!!accountFilter.nativeAccountId && !_this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n        return;\n      }\n\n      matchingAccounts.push(entity);\n    });\n    return matchingAccounts;\n  };\n  /**\r\n   * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n   * @param key\r\n   * @param homeAccountId\r\n   * @param tenantId\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.isAccountKey = function (key, homeAccountId, tenantId) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\n      // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n\n    if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n      return false;\n    }\n\n    if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n      return false;\n    } // Do not check environment as aliasing can cause false negatives\n\n\n    return true;\n  };\n  /**\r\n   * Returns true if the given key matches our credential key schema.\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.isCredentialKey = function (key) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\n      // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n\n    var lowerCaseKey = key.toLowerCase(); // Credential keys must indicate what credential type they represent\n\n    if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\n      return false;\n    }\n\n    if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\n      // Refresh tokens must contain the client id or family id\n      var clientIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + this.clientId + Separators.CACHE_KEY_SEPARATOR;\n      var familyIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + THE_FAMILY_ID + Separators.CACHE_KEY_SEPARATOR;\n\n      if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n        return false;\n      }\n    } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n      // Tokens must contain the clientId\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Returns whether or not the given credential entity matches the filter\r\n   * @param entity\r\n   * @param filter\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.credentialMatchesFilter = function (entity, filter) {\n    if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n      return false;\n    }\n\n    if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n      return false;\n    }\n    /*\r\n     * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n     * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n     */\n\n\n    if (typeof filter.homeAccountId === \"string\" && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n      return false;\n    }\n\n    if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n      return false;\n    }\n\n    if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n      return false;\n    }\n\n    if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\n      return false;\n    }\n\n    if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n      return false;\n    }\n    /*\r\n     * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n     * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n     */\n\n\n    if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n      return false;\n    } // If request OR cached entity has requested Claims Hash, check if they match\n\n\n    if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n      // Don't match if either is undefined or they are different\n      if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n        return false;\n      }\n    } // Access Token with Auth Scheme specific matching\n\n\n    if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n      if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\n        return false;\n      } // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n\n\n      if (filter.tokenType === AuthenticationScheme.SSH) {\n        if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n   * @param filter\r\n   */\n\n\n  CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\n    return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n  };\n  /**\r\n   * Support function to help match appMetadata\r\n   * @param environment\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var matchingAppMetadata = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-appMetadata type cache entities\n      if (!_this.isAppMetadata(cacheKey)) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getAppMetadata(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n\n      matchingAppMetadata[cacheKey] = entity;\n    });\n    return matchingAppMetadata;\n  };\n  /**\r\n   * retrieve authorityMetadata that contains a matching alias\r\n   * @param filter\r\n   */\n\n\n  CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\n    var _this = this;\n\n    var allCacheKeys = this.getAuthorityMetadataKeys();\n    var matchedEntity = null;\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-authorityMetadata type cache entities\n      if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getAuthorityMetadata(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (entity.aliases.indexOf(host) === -1) {\n        return;\n      }\n\n      matchedEntity = entity;\n    });\n    return matchedEntity;\n  };\n  /**\r\n   * Removes all accounts and related tokens from cache.\r\n   */\n\n\n  CacheManager.prototype.removeAllAccounts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allAccountKeys, removedAccounts;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allAccountKeys = this.getAccountKeys();\n            removedAccounts = [];\n            allAccountKeys.forEach(function (cacheKey) {\n              removedAccounts.push(_this.removeAccount(cacheKey));\n            });\n            return [4\n            /*yield*/\n            , Promise.all(removedAccounts)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes the account and related tokens for a given account key\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.removeAccount = function (accountKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            account = this.getAccount(accountKey);\n\n            if (!account) {\n              throw ClientAuthError.createNoAccountFoundError();\n            }\n\n            return [4\n            /*yield*/\n            , this.removeAccountContext(account)];\n\n          case 1:\n            _a.sent();\n\n            this.removeItem(accountKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes credentials associated with the provided account\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.removeAccountContext = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allTokenKeys, accountId, removedCredentials;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allTokenKeys = this.getTokenKeys();\n            accountId = account.generateAccountId();\n            removedCredentials = [];\n            allTokenKeys.idToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                _this.removeIdToken(key);\n              }\n            });\n            allTokenKeys.accessToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(_this.removeAccessToken(key));\n              }\n            });\n            allTokenKeys.refreshToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                _this.removeRefreshToken(key);\n              }\n            });\n            return [4\n            /*yield*/\n            , Promise.all(removedCredentials)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * returns a boolean if the given credential is removed\r\n   * @param credential\r\n   */\n\n\n  CacheManager.prototype.removeAccessToken = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credential, accessTokenWithAuthSchemeEntity, kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            credential = this.getAccessTokenCredential(key);\n\n            if (!credential) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!(credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3\n            /*break*/\n            , 4];\n            if (!(credential.tokenType === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 4];\n            accessTokenWithAuthSchemeEntity = credential;\n            kid = accessTokenWithAuthSchemeEntity.keyId;\n            if (!kid) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.cryptoImpl.removeTokenBindingKey(kid)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            throw ClientAuthError.createBindingKeyNotRemovedError();\n\n          case 4:\n            return [2\n            /*return*/\n            , this.removeItem(key)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all app metadata objects from cache.\r\n   */\n\n\n  CacheManager.prototype.removeAppMetadata = function () {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      if (_this.isAppMetadata(cacheKey)) {\n        _this.removeItem(cacheKey);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * Retrieve the cached credentials into a cacherecord\r\n   * @param account\r\n   * @param clientId\r\n   * @param scopes\r\n   * @param environment\r\n   * @param authScheme\r\n   */\n\n\n  CacheManager.prototype.readCacheRecord = function (account, request, environment) {\n    var tokenKeys = this.getTokenKeys();\n    var cachedAccount = this.readAccountFromCache(account);\n    var cachedIdToken = this.getIdToken(account, tokenKeys);\n    var cachedAccessToken = this.getAccessToken(account, request, tokenKeys);\n    var cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);\n    var cachedAppMetadata = this.readAppMetadataFromCache(environment);\n\n    if (cachedAccount && cachedIdToken) {\n      cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n    }\n\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  };\n  /**\r\n   * Retrieve AccountEntity from cache\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.readAccountFromCache = function (account) {\n    var accountKey = AccountEntity.generateAccountCacheKey(account);\n    return this.getAccount(accountKey);\n  };\n  /**\r\n   * Retrieve IdTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param inputRealm\r\n   */\n\n\n  CacheManager.prototype.getIdToken = function (account, tokenKeys) {\n    var _this = this;\n\n    this.commonLogger.trace(\"CacheManager - getIdToken called\");\n    var idTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.clientId,\n      realm: account.tenantId\n    };\n    var idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n    var numIdTokens = idTokens.length;\n\n    if (numIdTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n      return null;\n    } else if (numIdTokens > 1) {\n      this.commonLogger.info(\"CacheManager:getIdToken - Multiple id tokens found, clearing them\");\n      idTokens.forEach(function (idToken) {\n        _this.removeIdToken(idToken.generateCredentialKey());\n      });\n      return null;\n    }\n\n    this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\n    return idTokens[0];\n  };\n  /**\r\n   * Gets all idTokens matching the given filter\r\n   * @param filter\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.getIdTokensByFilter = function (filter, tokenKeys) {\n    var _this = this;\n\n    var idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\n    var idTokens = [];\n    idTokenKeys.forEach(function (key) {\n      if (!_this.idTokenKeyMatchesFilter(key, __assign({\n        clientId: _this.clientId\n      }, filter))) {\n        return;\n      }\n\n      var idToken = _this.getIdTokenCredential(key);\n\n      if (idToken && _this.credentialMatchesFilter(idToken, filter)) {\n        idTokens.push(idToken);\n      }\n    });\n    return idTokens;\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.idTokenKeyMatchesFilter = function (inputKey, filter) {\n    var key = inputKey.toLowerCase();\n\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Removes idToken from the cache\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.removeIdToken = function (key) {\n    this.removeItem(key);\n  };\n  /**\r\n   * Removes refresh token from the cache\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.removeRefreshToken = function (key) {\n    this.removeItem(key);\n  };\n  /**\r\n   * Retrieve AccessTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param scopes\r\n   * @param authScheme\r\n   */\n\n\n  CacheManager.prototype.getAccessToken = function (account, request, tokenKeys) {\n    var _this = this;\n\n    this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n    var scopes = ScopeSet.createSearchScopes(request.scopes);\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: credentialType,\n      clientId: this.clientId,\n      realm: account.tenantId,\n      target: scopes,\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash\n    };\n    var accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\n    var accessTokens = [];\n    accessTokenKeys.forEach(function (key) {\n      // Validate key\n      if (_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n        var accessToken = _this.getAccessTokenCredential(key); // Validate value\n\n\n        if (accessToken && _this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n          accessTokens.push(accessToken);\n        }\n      }\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n      return null;\n    } else if (numAccessTokens > 1) {\n      this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\n      accessTokens.forEach(function (accessToken) {\n        _this.removeAccessToken(accessToken.generateCredentialKey());\n      });\n      return null;\n    }\n\n    this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n    return accessTokens[0];\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   * @param keyMustContainAllScopes\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.accessTokenKeyMatchesFilter = function (inputKey, filter, keyMustContainAllScopes) {\n    var key = inputKey.toLowerCase();\n\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n\n    if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n      return false;\n    }\n\n    if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n      return false;\n    }\n\n    if (filter.target) {\n      var scopes = filter.target.asArray();\n\n      for (var i = 0; i < scopes.length; i++) {\n        if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache lookup a missing scope would be a cache miss\n          return false;\n        } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache write, any token with a subset of requested scopes should be replaced\n          return true;\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Gets all access tokens matching the filter\r\n   * @param filter\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.getAccessTokensByFilter = function (filter) {\n    var _this = this;\n\n    var tokenKeys = this.getTokenKeys();\n    var accessTokens = [];\n    tokenKeys.accessToken.forEach(function (key) {\n      if (!_this.accessTokenKeyMatchesFilter(key, filter, true)) {\n        return;\n      }\n\n      var accessToken = _this.getAccessTokenCredential(key);\n\n      if (accessToken && _this.credentialMatchesFilter(accessToken, filter)) {\n        accessTokens.push(accessToken);\n      }\n    });\n    return accessTokens;\n  };\n  /**\r\n   * Helper to retrieve the appropriate refresh token from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param familyRT\r\n   */\n\n\n  CacheManager.prototype.getRefreshToken = function (account, familyRT, tokenKeys) {\n    var _this = this;\n\n    this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n    var id = familyRT ? THE_FAMILY_ID : undefined;\n    var refreshTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.REFRESH_TOKEN,\n      clientId: this.clientId,\n      familyId: id\n    };\n    var refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\n    var refreshTokens = [];\n    refreshTokenKeys.forEach(function (key) {\n      // Validate key\n      if (_this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n        var refreshToken = _this.getRefreshTokenCredential(key); // Validate value\n\n\n        if (refreshToken && _this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n          refreshTokens.push(refreshToken);\n        }\n      }\n    });\n    var numRefreshTokens = refreshTokens.length;\n\n    if (numRefreshTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n      return null;\n    } // address the else case after remove functions address environment aliases\n\n\n    this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n    return refreshTokens[0];\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   */\n\n\n  CacheManager.prototype.refreshTokenKeyMatchesFilter = function (inputKey, filter) {\n    var key = inputKey.toLowerCase();\n\n    if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\n      return false;\n    } // If familyId is used, clientId is not in the key\n\n\n    if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Retrieve AppMetadataEntity from cache\r\n   */\n\n\n  CacheManager.prototype.readAppMetadataFromCache = function (environment) {\n    var appMetadataFilter = {\n      environment: environment,\n      clientId: this.clientId\n    };\n    var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n    var appMetadataEntries = Object.keys(appMetadata).map(function (key) {\n      return appMetadata[key];\n    });\n    var numAppMetadata = appMetadataEntries.length;\n\n    if (numAppMetadata < 1) {\n      return null;\n    } else if (numAppMetadata > 1) {\n      throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n    }\n\n    return appMetadataEntries[0];\n  };\n  /**\r\n   * Return the family_id value associated  with FOCI\r\n   * @param environment\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.isAppMetadataFOCI = function (environment) {\n    var appMetadata = this.readAppMetadataFromCache(environment);\n    return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param value\r\n   * @param homeAccountId\r\n   */\n\n\n  CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\n    return !!(typeof entity.homeAccountId === \"string\" && homeAccountId === entity.homeAccountId);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param entity\r\n   * @param localAccountId\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.matchLocalAccountId = function (entity, localAccountId) {\n    return !!(typeof entity.localAccountId === \"string\" && localAccountId === entity.localAccountId);\n  };\n  /**\r\n   * helper to match usernames\r\n   * @param entity\r\n   * @param username\r\n   * @returns\r\n   */\n\n\n  CacheManager.prototype.matchUsername = function (entity, username) {\n    return !!(typeof entity.username === \"string\" && username.toLowerCase() === entity.username.toLowerCase());\n  };\n  /**\r\n   * helper to match assertion\r\n   * @param value\r\n   * @param oboAssertion\r\n   */\n\n\n  CacheManager.prototype.matchUserAssertionHash = function (entity, userAssertionHash) {\n    return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n  };\n  /**\r\n   * helper to match environment\r\n   * @param value\r\n   * @param environment\r\n   */\n\n\n  CacheManager.prototype.matchEnvironment = function (entity, environment) {\n    var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n\n    if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * helper to match credential type\r\n   * @param entity\r\n   * @param credentialType\r\n   */\n\n\n  CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\n    return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n  };\n  /**\r\n   * helper to match client ids\r\n   * @param entity\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.matchClientId = function (entity, clientId) {\n    return !!(entity.clientId && clientId === entity.clientId);\n  };\n  /**\r\n   * helper to match family ids\r\n   * @param entity\r\n   * @param familyId\r\n   */\n\n\n  CacheManager.prototype.matchFamilyId = function (entity, familyId) {\n    return !!(entity.familyId && familyId === entity.familyId);\n  };\n  /**\r\n   * helper to match realm\r\n   * @param entity\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.matchRealm = function (entity, realm) {\n    return !!(entity.realm && realm === entity.realm);\n  };\n  /**\r\n   * helper to match nativeAccountId\r\n   * @param entity\r\n   * @param nativeAccountId\r\n   * @returns boolean indicating the match result\r\n   */\n\n\n  CacheManager.prototype.matchNativeAccountId = function (entity, nativeAccountId) {\n    return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n  };\n  /**\r\n   * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n   * @param entity\r\n   * @param target\r\n   */\n\n\n  CacheManager.prototype.matchTarget = function (entity, target) {\n    var isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n\n    if (isNotAccessTokenCredential || !entity.target) {\n      return false;\n    }\n\n    var entityScopeSet = ScopeSet.fromString(entity.target);\n    return entityScopeSet.containsScopeSet(target);\n  };\n  /**\r\n   * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n\n\n  CacheManager.prototype.matchTokenType = function (entity, tokenType) {\n    return !!(entity.tokenType && entity.tokenType === tokenType);\n  };\n  /**\r\n   * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n\n\n  CacheManager.prototype.matchKeyId = function (entity, keyId) {\n    return !!(entity.keyId && entity.keyId === keyId);\n  };\n  /**\r\n   * returns if a given cache entity is of the type appmetadata\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.isAppMetadata = function (key) {\n    return key.indexOf(APP_METADATA) !== -1;\n  };\n  /**\r\n   * returns if a given cache entity is of the type authoritymetadata\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.isAuthorityMetadata = function (key) {\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n  };\n  /**\r\n   * returns cache key used for cloud instance metadata\r\n   */\n\n\n  CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\n    return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\n  };\n  /**\r\n   * Helper to convert serialized data to object\r\n   * @param obj\r\n   * @param json\r\n   */\n\n\n  CacheManager.toObject = function (obj, json) {\n    for (var propertyName in json) {\n      obj[propertyName] = json[propertyName];\n    }\n\n    return obj;\n  };\n\n  return CacheManager;\n}();\n\nvar DefaultStorageClass =\n/** @class */\nfunction (_super) {\n  __extends(DefaultStorageClass, _super);\n\n  function DefaultStorageClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DefaultStorageClass.prototype.setAccount = function () {\n    var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAccount = function () {\n    var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAppMetadata = function () {\n    var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAppMetadata = function () {\n    var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setServerTelemetry = function () {\n    var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getServerTelemetry = function () {\n    var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setThrottlingCache = function () {\n    var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getThrottlingCache = function () {\n    var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.removeItem = function () {\n    var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.containsKey = function () {\n    var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getKeys = function () {\n    var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAccountKeys = function () {\n    var notImplErr = \"Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getTokenKeys = function () {\n    var notImplErr = \"Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  };\n\n  DefaultStorageClass.prototype.updateCredentialCacheKey = function () {\n    var notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  return DefaultStorageClass;\n}(CacheManager);\n\nexport { CacheManager, DefaultStorageClass };","map":{"version":3,"names":["__awaiter","__generator","__assign","__extends","Separators","CredentialType","AuthenticationScheme","THE_FAMILY_ID","APP_METADATA","AUTHORITY_METADATA_CONSTANTS","ScopeSet","AccountEntity","AuthError","ClientAuthError","AuthToken","name","version","CacheManager","clientId","cryptoImpl","logger","commonLogger","clone","prototype","getAllAccounts","_this","allAccountKeys","getAccountKeys","length","accountEntities","reduce","accounts","key","entity","getAccount","push","allAccounts","map","accountEntity","getAccountInfoFromEntity","getAccountInfoFilteredBy","accountFilter","getAccountsFilteredBy","accountInfo","getAccountInfo","idToken","getIdToken","secret","idTokenClaims","claims","saveCacheRecord","cacheRecord","_a","label","createNullOrUndefinedCacheRecord","account","setAccount","setIdTokenCredential","accessToken","saveAccessToken","sent","refreshToken","setRefreshTokenCredential","appMetadata","setAppMetadata","credential","accessTokenFilter","tokenKeys","currentScopes","removedAccessTokens","credentialType","environment","homeAccountId","realm","tokenType","requestedClaimsHash","getTokenKeys","fromString","target","forEach","accessTokenKeyMatchesFilter","tokenEntity","getAccessTokenCredential","credentialMatchesFilter","tokenScopeSet","intersectingScopeSets","removeAccessToken","Promise","all","setAccessTokenCredential","matchingAccounts","cacheKey","isAccountKey","matchHomeAccountId","localAccountId","matchLocalAccountId","username","matchUsername","matchEnvironment","matchRealm","nativeAccountId","matchNativeAccountId","tenantId","split","CACHE_KEY_SEPARATOR","toLowerCase","includes","isCredentialKey","lowerCaseKey","indexOf","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","clientIdValidation","familyIdValidation","filter","matchClientId","userAssertionHash","matchUserAssertionHash","matchCredentialType","familyId","matchFamilyId","matchTarget","matchTokenType","SSH","keyId","matchKeyId","getAppMetadataFilteredBy","getAppMetadataFilteredByInternal","allCacheKeys","getKeys","matchingAppMetadata","isAppMetadata","getAppMetadata","getAuthorityMetadataByAlias","host","getAuthorityMetadataKeys","matchedEntity","isAuthorityMetadata","getAuthorityMetadata","aliases","removeAllAccounts","removedAccounts","removeAccount","accountKey","createNoAccountFoundError","removeAccountContext","removeItem","allTokenKeys","accountId","removedCredentials","generateAccountId","removeIdToken","removeRefreshToken","accessTokenWithAuthSchemeEntity","kid","POP","trys","removeTokenBindingKey","createBindingKeyNotRemovedError","removeAppMetadata","readCacheRecord","request","cachedAccount","readAccountFromCache","cachedIdToken","cachedAccessToken","getAccessToken","cachedRefreshToken","getRefreshToken","cachedAppMetadata","readAppMetadataFromCache","generateAccountCacheKey","trace","idTokenFilter","idTokens","getIdTokensByFilter","numIdTokens","info","generateCredentialKey","idTokenKeys","idTokenKeyMatchesFilter","getIdTokenCredential","inputKey","scopes","createSearchScopes","authScheme","authenticationScheme","BEARER","sshKid","accessTokenKeys","accessTokens","numAccessTokens","keyMustContainAllScopes","asArray","i","getAccessTokensByFilter","familyRT","id","undefined","refreshTokenFilter","refreshTokenKeys","refreshTokens","refreshTokenKeyMatchesFilter","getRefreshTokenCredential","numRefreshTokens","appMetadataFilter","appMetadataEntries","Object","keys","numAppMetadata","createMultipleMatchingAppMetadataInCacheError","isAppMetadataFOCI","cloudMetadata","isNotAccessTokenCredential","entityScopeSet","containsScopeSet","CACHE_KEY","generateAuthorityMetadataCacheKey","authority","toObject","obj","json","propertyName","DefaultStorageClass","_super","apply","arguments","notImplErr","createUnexpectedError","setServerTelemetry","getServerTelemetry","setAuthorityMetadata","setThrottlingCache","getThrottlingCache","containsKey","clear","updateCredentialCacheKey"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/cache/CacheManager.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator, __assign, __extends } from '../_virtual/_tslib.js';\nimport { Separators, CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from './entities/AccountEntity.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { name, version } from '../packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\r\nvar CacheManager = /** @class */ (function () {\r\n    function CacheManager(clientId, cryptoImpl, logger) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n        this.commonLogger = logger.clone(name, version);\r\n    }\r\n    /**\r\n     * Returns all accounts in cache\r\n     */\r\n    CacheManager.prototype.getAllAccounts = function () {\r\n        var _this = this;\r\n        var allAccountKeys = this.getAccountKeys();\r\n        if (allAccountKeys.length < 1) {\r\n            return [];\r\n        }\r\n        var accountEntities = allAccountKeys.reduce(function (accounts, key) {\r\n            var entity = _this.getAccount(key);\r\n            if (!entity) {\r\n                return accounts;\r\n            }\r\n            accounts.push(entity);\r\n            return accounts;\r\n        }, []);\r\n        if (accountEntities.length < 1) {\r\n            return [];\r\n        }\r\n        else {\r\n            var allAccounts = accountEntities.map(function (accountEntity) {\r\n                return _this.getAccountInfoFromEntity(accountEntity);\r\n            });\r\n            return allAccounts;\r\n        }\r\n    };\r\n    /**\r\n     * Gets accountInfo object based on provided filters\r\n     */\r\n    CacheManager.prototype.getAccountInfoFilteredBy = function (accountFilter) {\r\n        var allAccounts = this.getAccountsFilteredBy(accountFilter);\r\n        if (allAccounts.length > 0) {\r\n            return this.getAccountInfoFromEntity(allAccounts[0]);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    CacheManager.prototype.getAccountInfoFromEntity = function (accountEntity) {\r\n        var accountInfo = accountEntity.getAccountInfo();\r\n        var idToken = this.getIdToken(accountInfo);\r\n        if (idToken) {\r\n            accountInfo.idToken = idToken.secret;\r\n            accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\r\n        }\r\n        return accountInfo;\r\n    };\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord\r\n     */\r\n    CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!cacheRecord) {\r\n                            throw ClientAuthError.createNullOrUndefinedCacheRecord();\r\n                        }\r\n                        if (!!cacheRecord.account) {\r\n                            this.setAccount(cacheRecord.account);\r\n                        }\r\n                        if (!!cacheRecord.idToken) {\r\n                            this.setIdTokenCredential(cacheRecord.idToken);\r\n                        }\r\n                        if (!!!cacheRecord.accessToken) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.saveAccessToken(cacheRecord.accessToken)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!!cacheRecord.refreshToken) {\r\n                            this.setRefreshTokenCredential(cacheRecord.refreshToken);\r\n                        }\r\n                        if (!!cacheRecord.appMetadata) {\r\n                            this.setAppMetadata(cacheRecord.appMetadata);\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.saveAccessToken = function (credential) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var accessTokenFilter, tokenKeys, currentScopes, removedAccessTokens;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        accessTokenFilter = {\r\n                            clientId: credential.clientId,\r\n                            credentialType: credential.credentialType,\r\n                            environment: credential.environment,\r\n                            homeAccountId: credential.homeAccountId,\r\n                            realm: credential.realm,\r\n                            tokenType: credential.tokenType,\r\n                            requestedClaimsHash: credential.requestedClaimsHash\r\n                        };\r\n                        tokenKeys = this.getTokenKeys();\r\n                        currentScopes = ScopeSet.fromString(credential.target);\r\n                        removedAccessTokens = [];\r\n                        tokenKeys.accessToken.forEach(function (key) {\r\n                            if (!_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\r\n                                return;\r\n                            }\r\n                            var tokenEntity = _this.getAccessTokenCredential(key);\r\n                            if (tokenEntity && _this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\r\n                                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                                    removedAccessTokens.push(_this.removeAccessToken(key));\r\n                                }\r\n                            }\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedAccessTokens)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.setAccessTokenCredential(credential);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\r\n        var _this = this;\r\n        var allAccountKeys = this.getAccountKeys();\r\n        var matchingAccounts = [];\r\n        allAccountKeys.forEach(function (cacheKey) {\r\n            if (!_this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {\r\n                // Don't parse value if the key doesn't match the account filters\r\n                return;\r\n            }\r\n            var entity = _this.getAccount(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.homeAccountId && !_this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.localAccountId && !_this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.username && !_this.matchUsername(entity, accountFilter.username)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.environment && !_this.matchEnvironment(entity, accountFilter.environment)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.realm && !_this.matchRealm(entity, accountFilter.realm)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.nativeAccountId && !_this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\r\n                return;\r\n            }\r\n            matchingAccounts.push(entity);\r\n        });\r\n        return matchingAccounts;\r\n    };\r\n    /**\r\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n     * @param key\r\n     * @param homeAccountId\r\n     * @param tenantId\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.isAccountKey = function (key, homeAccountId, tenantId) {\r\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\r\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\r\n            return false;\r\n        }\r\n        if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\r\n            return false;\r\n        }\r\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\r\n            return false;\r\n        }\r\n        // Do not check environment as aliasing can cause false negatives\r\n        return true;\r\n    };\r\n    /**\r\n     * Returns true if the given key matches our credential key schema.\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isCredentialKey = function (key) {\r\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\r\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\r\n            return false;\r\n        }\r\n        var lowerCaseKey = key.toLowerCase();\r\n        // Credential keys must indicate what credential type they represent\r\n        if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\r\n            // Refresh tokens must contain the client id or family id\r\n            var clientIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + this.clientId + Separators.CACHE_KEY_SEPARATOR;\r\n            var familyIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + THE_FAMILY_ID + Separators.CACHE_KEY_SEPARATOR;\r\n            if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\r\n            // Tokens must contain the clientId\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.credentialMatchesFilter = function (entity, filter) {\r\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */\r\n        if ((typeof filter.homeAccountId === \"string\") && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\r\n            return false;\r\n        }\r\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\r\n            return false;\r\n        }\r\n        if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\r\n            return false;\r\n        }\r\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */\r\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\r\n            return false;\r\n        }\r\n        // If request OR cached entity has requested Claims Hash, check if they match\r\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\r\n            // Don't match if either is undefined or they are different\r\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\r\n                return false;\r\n            }\r\n        }\r\n        // Access Token with Auth Scheme specific matching\r\n        if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\r\n            if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\r\n                return false;\r\n            }\r\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\r\n            if (filter.tokenType === AuthenticationScheme.SSH) {\r\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\r\n        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\r\n    };\r\n    /**\r\n     * Support function to help match appMetadata\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingAppMetadata = {};\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!_this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAppMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!clientId && !_this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n            matchingAppMetadata[cacheKey] = entity;\r\n        });\r\n        return matchingAppMetadata;\r\n    };\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getAuthorityMetadataKeys();\r\n        var matchedEntity = null;\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAuthorityMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n            matchedEntity = entity;\r\n        });\r\n        return matchedEntity;\r\n    };\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    CacheManager.prototype.removeAllAccounts = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var allAccountKeys, removedAccounts;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        allAccountKeys = this.getAccountKeys();\r\n                        removedAccounts = [];\r\n                        allAccountKeys.forEach(function (cacheKey) {\r\n                            removedAccounts.push(_this.removeAccount(cacheKey));\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedAccounts)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccount = function (accountKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var account;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        account = this.getAccount(accountKey);\r\n                        if (!account) {\r\n                            throw ClientAuthError.createNoAccountFoundError();\r\n                        }\r\n                        return [4 /*yield*/, this.removeAccountContext(account)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.removeItem(accountKey);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccountContext = function (account) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var allTokenKeys, accountId, removedCredentials;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        allTokenKeys = this.getTokenKeys();\r\n                        accountId = account.generateAccountId();\r\n                        removedCredentials = [];\r\n                        allTokenKeys.idToken.forEach(function (key) {\r\n                            if (key.indexOf(accountId) === 0) {\r\n                                _this.removeIdToken(key);\r\n                            }\r\n                        });\r\n                        allTokenKeys.accessToken.forEach(function (key) {\r\n                            if (key.indexOf(accountId) === 0) {\r\n                                removedCredentials.push(_this.removeAccessToken(key));\r\n                            }\r\n                        });\r\n                        allTokenKeys.refreshToken.forEach(function (key) {\r\n                            if (key.indexOf(accountId) === 0) {\r\n                                _this.removeRefreshToken(key);\r\n                            }\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedCredentials)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.removeAccessToken = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var credential, accessTokenWithAuthSchemeEntity, kid;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        credential = this.getAccessTokenCredential(key);\r\n                        if (!credential) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        if (!(credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3 /*break*/, 4];\r\n                        if (!(credential.tokenType === AuthenticationScheme.POP)) return [3 /*break*/, 4];\r\n                        accessTokenWithAuthSchemeEntity = credential;\r\n                        kid = accessTokenWithAuthSchemeEntity.keyId;\r\n                        if (!kid) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.cryptoImpl.removeTokenBindingKey(kid)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a.sent();\r\n                        throw ClientAuthError.createBindingKeyNotRemovedError();\r\n                    case 4: return [2 /*return*/, this.removeItem(key)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    CacheManager.prototype.removeAppMetadata = function () {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            if (_this.isAppMetadata(cacheKey)) {\r\n                _this.removeItem(cacheKey);\r\n            }\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * Retrieve the cached credentials into a cacherecord\r\n     * @param account\r\n     * @param clientId\r\n     * @param scopes\r\n     * @param environment\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.readCacheRecord = function (account, request, environment) {\r\n        var tokenKeys = this.getTokenKeys();\r\n        var cachedAccount = this.readAccountFromCache(account);\r\n        var cachedIdToken = this.getIdToken(account, tokenKeys);\r\n        var cachedAccessToken = this.getAccessToken(account, request, tokenKeys);\r\n        var cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);\r\n        var cachedAppMetadata = this.readAppMetadataFromCache(environment);\r\n        if (cachedAccount && cachedIdToken) {\r\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\r\n        }\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    };\r\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.readAccountFromCache = function (account) {\r\n        var accountKey = AccountEntity.generateAccountCacheKey(account);\r\n        return this.getAccount(accountKey);\r\n    };\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param inputRealm\r\n     */\r\n    CacheManager.prototype.getIdToken = function (account, tokenKeys) {\r\n        var _this = this;\r\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\r\n        var idTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.clientId,\r\n            realm: account.tenantId,\r\n        };\r\n        var idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\r\n        var numIdTokens = idTokens.length;\r\n        if (numIdTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\r\n            return null;\r\n        }\r\n        else if (numIdTokens > 1) {\r\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple id tokens found, clearing them\");\r\n            idTokens.forEach(function (idToken) {\r\n                _this.removeIdToken(idToken.generateCredentialKey());\r\n            });\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.getIdTokensByFilter = function (filter, tokenKeys) {\r\n        var _this = this;\r\n        var idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\r\n        var idTokens = [];\r\n        idTokenKeys.forEach(function (key) {\r\n            if (!_this.idTokenKeyMatchesFilter(key, __assign({ clientId: _this.clientId }, filter))) {\r\n                return;\r\n            }\r\n            var idToken = _this.getIdTokenCredential(key);\r\n            if (idToken && _this.credentialMatchesFilter(idToken, filter)) {\r\n                idTokens.push(idToken);\r\n            }\r\n        });\r\n        return idTokens;\r\n    };\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.idTokenKeyMatchesFilter = function (inputKey, filter) {\r\n        var key = inputKey.toLowerCase();\r\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.removeIdToken = function (key) {\r\n        this.removeItem(key);\r\n    };\r\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.removeRefreshToken = function (key) {\r\n        this.removeItem(key);\r\n    };\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param scopes\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.getAccessToken = function (account, request, tokenKeys) {\r\n        var _this = this;\r\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\r\n        var scopes = ScopeSet.createSearchScopes(request.scopes);\r\n        var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        var credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n        var accessTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: this.clientId,\r\n            realm: account.tenantId,\r\n            target: scopes,\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n        };\r\n        var accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\r\n        var accessTokens = [];\r\n        accessTokenKeys.forEach(function (key) {\r\n            // Validate key\r\n            if (_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\r\n                var accessToken = _this.getAccessTokenCredential(key);\r\n                // Validate value\r\n                if (accessToken && _this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\r\n                    accessTokens.push(accessToken);\r\n                }\r\n            }\r\n        });\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\r\n            accessTokens.forEach(function (accessToken) {\r\n                _this.removeAccessToken(accessToken.generateCredentialKey());\r\n            });\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.accessTokenKeyMatchesFilter = function (inputKey, filter, keyMustContainAllScopes) {\r\n        var key = inputKey.toLowerCase();\r\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.target) {\r\n            var scopes = filter.target.asArray();\r\n            for (var i = 0; i < scopes.length; i++) {\r\n                if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache lookup a missing scope would be a cache miss\r\n                    return false;\r\n                }\r\n                else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.getAccessTokensByFilter = function (filter) {\r\n        var _this = this;\r\n        var tokenKeys = this.getTokenKeys();\r\n        var accessTokens = [];\r\n        tokenKeys.accessToken.forEach(function (key) {\r\n            if (!_this.accessTokenKeyMatchesFilter(key, filter, true)) {\r\n                return;\r\n            }\r\n            var accessToken = _this.getAccessTokenCredential(key);\r\n            if (accessToken && _this.credentialMatchesFilter(accessToken, filter)) {\r\n                accessTokens.push(accessToken);\r\n            }\r\n        });\r\n        return accessTokens;\r\n    };\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param familyRT\r\n     */\r\n    CacheManager.prototype.getRefreshToken = function (account, familyRT, tokenKeys) {\r\n        var _this = this;\r\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\r\n        var id = familyRT ? THE_FAMILY_ID : undefined;\r\n        var refreshTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: this.clientId,\r\n            familyId: id,\r\n        };\r\n        var refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\r\n        var refreshTokens = [];\r\n        refreshTokenKeys.forEach(function (key) {\r\n            // Validate key\r\n            if (_this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\r\n                var refreshToken = _this.getRefreshTokenCredential(key);\r\n                // Validate value\r\n                if (refreshToken && _this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\r\n                    refreshTokens.push(refreshToken);\r\n                }\r\n            }\r\n        });\r\n        var numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\r\n        return refreshTokens[0];\r\n    };\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.refreshTokenKeyMatchesFilter = function (inputKey, filter) {\r\n        var key = inputKey.toLowerCase();\r\n        if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        // If familyId is used, clientId is not in the key\r\n        if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    CacheManager.prototype.readAppMetadataFromCache = function (environment) {\r\n        var appMetadataFilter = {\r\n            environment: environment,\r\n            clientId: this.clientId,\r\n        };\r\n        var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });\r\n        var numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        }\r\n        else if (numAppMetadata > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\r\n        }\r\n        return appMetadataEntries[0];\r\n    };\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.isAppMetadataFOCI = function (environment) {\r\n        var appMetadata = this.readAppMetadataFromCache(environment);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    };\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\r\n        return !!((typeof entity.homeAccountId === \"string\") && (homeAccountId === entity.homeAccountId));\r\n    };\r\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.matchLocalAccountId = function (entity, localAccountId) {\r\n        return !!((typeof entity.localAccountId === \"string\") && (localAccountId === entity.localAccountId));\r\n    };\r\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.matchUsername = function (entity, username) {\r\n        return !!((typeof entity.username === \"string\") && (username.toLowerCase() === entity.username.toLowerCase()));\r\n    };\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    CacheManager.prototype.matchUserAssertionHash = function (entity, userAssertionHash) {\r\n        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\r\n    };\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    CacheManager.prototype.matchEnvironment = function (entity, environment) {\r\n        var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\r\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    };\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.matchClientId = function (entity, clientId) {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    };\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    CacheManager.prototype.matchFamilyId = function (entity, familyId) {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    };\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.matchRealm = function (entity, realm) {\r\n        return !!(entity.realm && realm === entity.realm);\r\n    };\r\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */\r\n    CacheManager.prototype.matchNativeAccountId = function (entity, nativeAccountId) {\r\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\r\n    };\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    CacheManager.prototype.matchTarget = function (entity, target) {\r\n        var isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\r\n        if (isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n        var entityScopeSet = ScopeSet.fromString(entity.target);\r\n        return entityScopeSet.containsScopeSet(target);\r\n    };\r\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    CacheManager.prototype.matchTokenType = function (entity, tokenType) {\r\n        return !!(entity.tokenType && entity.tokenType === tokenType);\r\n    };\r\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    CacheManager.prototype.matchKeyId = function (entity, keyId) {\r\n        return !!(entity.keyId && entity.keyId === keyId);\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAppMetadata = function (key) {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAuthorityMetadata = function (key) {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    };\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\r\n        return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\r\n    };\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    CacheManager.toObject = function (obj, json) {\r\n        for (var propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    };\r\n    return CacheManager;\r\n}());\r\nvar DefaultStorageClass = /** @class */ (function (_super) {\r\n    __extends(DefaultStorageClass, _super);\r\n    function DefaultStorageClass() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultStorageClass.prototype.setAccount = function () {\r\n        var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccount = function () {\r\n        var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.removeItem = function () {\r\n        var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.containsKey = function () {\r\n        var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getKeys = function () {\r\n        var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccountKeys = function () {\r\n        var notImplErr = \"Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getTokenKeys = function () {\r\n        var notImplErr = \"Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.clear = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    };\r\n    DefaultStorageClass.prototype.updateCredentialCacheKey = function () {\r\n        var notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    return DefaultStorageClass;\r\n}(CacheManager));\n\nexport { CacheManager, DefaultStorageClass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}