{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 client credential grant\r\n */\n\nvar ClientCredentialClient =\n/** @class */\nfunction (_super) {\n  __extends(ClientCredentialClient, _super);\n\n  function ClientCredentialClient(configuration, appTokenProvider) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.appTokenProvider = appTokenProvider;\n    return _this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n\n\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   */\n\n\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: Constants.EMPTY_STRING,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.appTokenProvider) return [3\n            /*break*/\n            , 2];\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            appTokenPropviderParameters = {\n              correlationId: request.correlationId,\n              tenantId: this.config.authOptions.authority.tenant,\n              scopes: request.scopes,\n              claims: request.claims\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.appTokenProvider(appTokenPropviderParameters)];\n\n          case 1:\n            appTokenProviderResult = _a.sent();\n            serverTokenResponse = {\n              access_token: appTokenProviderResult.accessToken,\n              expires_in: appTokenProviderResult.expiresInSeconds,\n              refresh_in: appTokenProviderResult.refreshInSeconds,\n              token_type: AuthenticationScheme.BEARER\n            };\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n\n          case 3:\n            response = _a.sent();\n            serverTokenResponse = response.body;\n            _a.label = 4;\n\n          case 4:\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(serverTokenResponse);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\n\n          case 5:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    } // Use clientAssertion from request, fallback to client assertion in base configuration\n\n\n    var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n\n    if (clientAssertion) {\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return ClientCredentialClient;\n}(BaseClient);\n\nexport { ClientCredentialClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","RequestParameterBuilder","ScopeSet","Constants","CredentialType","GrantType","CacheOutcome","AuthenticationScheme","ResponseHandler","TimeUtils","StringUtils","ClientAuthError","UrlString","ClientCredentialClient","_super","configuration","appTokenProvider","_this","call","prototype","acquireToken","request","cachedAuthenticationResult","_a","label","scopeSet","scopes","skipCache","executeTokenRequest","authority","sent","getCachedAuthenticationResult","_b","cachedAccessToken","_c","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","NO_CACHED_ACCESS_TOKEN","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","accessTokenFilter","homeAccountId","EMPTY_STRING","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","createSearchScopes","asArray","accessTokens","cacheManager","getAccessTokensByFilter","length","createMultipleMatchingTokensInCacheError","serverTokenResponse","reqTimestamp","appTokenPropviderParameters","appTokenProviderResult","queryParametersString","endpoint","requestBody","headers","thumbprint","response","responseHandler","tokenResponse","logger","info","correlationId","tenantId","claims","nowSeconds","access_token","expires_in","expiresInSeconds","refresh_in","refreshInSeconds","token_type","BEARER","createTokenQueryParameters","appendQueryString","tokenEndpoint","createTokenRequestBody","createTokenRequestHeaders","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","body","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","parameterBuilder","addClientId","addScopes","addGrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","isEmptyObj","clientCapabilities","addClaims","createQueryString"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/client/ClientCredentialClient.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nvar ClientCredentialClient = /** @class */ (function (_super) {\r\n    __extends(ClientCredentialClient, _super);\r\n    function ClientCredentialClient(configuration, appTokenProvider) {\r\n        var _this = _super.call(this, configuration) || this;\r\n        _this.appTokenProvider = appTokenProvider;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken) {\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: null,\r\n                                idToken: null,\r\n                                accessToken: cachedAccessToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request)];\r\n                    case 1: return [2 /*return*/, _c.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads access token from the cache\r\n     */\r\n    ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            homeAccountId: Constants.EMPTY_STRING,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\r\n        };\r\n        var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        }\r\n        else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.appTokenProvider) return [3 /*break*/, 2];\r\n                        this.logger.info(\"Using appTokenProvider extensibility.\");\r\n                        appTokenPropviderParameters = {\r\n                            correlationId: request.correlationId,\r\n                            tenantId: this.config.authOptions.authority.tenant,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.appTokenProvider(appTokenPropviderParameters)];\r\n                    case 1:\r\n                        appTokenProviderResult = _a.sent();\r\n                        serverTokenResponse = {\r\n                            access_token: appTokenProviderResult.accessToken,\r\n                            expires_in: appTokenProviderResult.expiresInSeconds,\r\n                            refresh_in: appTokenProviderResult.refreshInSeconds,\r\n                            token_type: AuthenticationScheme.BEARER\r\n                        };\r\n                        return [3 /*break*/, 4];\r\n                    case 2:\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                    case 3:\r\n                        response = _a.sent();\r\n                        serverTokenResponse = response.body;\r\n                        _a.label = 4;\r\n                    case 4:\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(serverTokenResponse);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\r\n                    case 5:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        // Use clientAssertion from request, fallback to client assertion in base configuration\r\n        var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\r\n        if (clientAssertion) {\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return ClientCredentialClient;\r\n}(BaseClient));\n\nexport { ClientCredentialClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}