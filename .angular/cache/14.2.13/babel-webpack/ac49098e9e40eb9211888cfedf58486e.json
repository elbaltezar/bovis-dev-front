{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RegionDiscovery =\n/** @class */\nfunction () {\n  function RegionDiscovery(networkInterface, performanceClient, correlationId) {\n    this.networkInterface = networkInterface;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3\n            /*break*/\n            , 8];\n            options = RegionDiscovery.IMDS_OPTIONS;\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 6,, 7]);\n\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\n\n          case 2:\n            localIMDSVersionResponse = _e.sent();\n\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3\n            /*break*/\n            , 5];\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getCurrentVersion(options)];\n\n          case 3:\n            currentIMDSVersion = _e.sent();\n\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2\n              /*return*/\n              , null];\n            }\n\n            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(currentIMDSVersion, options)];\n\n          case 4:\n            currentIMDSVersionResponse = _e.sent();\n\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            _e.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            _e.sent();\n\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2\n            /*return*/\n            , null];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _e.label = 9;\n\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n\n            return [2\n            /*return*/\n            , autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n\n\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return [2\n        /*return*/\n        , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.getCurrentVersion = function (options) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\n\n          case 2:\n            response = _b.sent(); // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2\n              /*return*/\n              , response.body[\"newest-versions\"][0]];\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Options for the IMDS endpoint request\n\n\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      Metadata: \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\n\nexport { RegionDiscovery };","map":{"version":3,"names":["__awaiter","__generator","RegionDiscoverySources","ResponseCodes","Constants","PerformanceEvents","RegionDiscovery","networkInterface","performanceClient","correlationId","prototype","detectRegion","environmentRegion","regionDiscoveryMetadata","_a","_b","_c","_d","autodetectedRegionName","options","localIMDSVersionResponse","currentIMDSVersion","currentIMDSVersionResponse","_e","label","addQueueMeasurement","RegionDiscoveryDetectRegion","IMDS_OPTIONS","trys","push","setPreQueueTime","RegionDiscoveryGetRegionFromIMDS","getRegionFromIMDS","IMDS_VERSION","sent","status","httpSuccess","body","region_source","IMDS","httpBadRequest","RegionDiscoveryGetCurrentVersion","getCurrentVersion","FAILED_AUTO_DETECTION","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_TIMEOUT","response","length","headers","Metadata"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/authority/RegionDiscovery.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RegionDiscovery = /** @class */ (function () {\r\n    function RegionDiscovery(networkInterface, performanceClient, correlationId) {\r\n        this.networkInterface = networkInterface;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n                        autodetectedRegionName = environmentRegion;\r\n                        if (!!autodetectedRegionName) return [3 /*break*/, 8];\r\n                        options = RegionDiscovery.IMDS_OPTIONS;\r\n                        _e.label = 1;\r\n                    case 1:\r\n                        _e.trys.push([1, 6, , 7]);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\r\n                    case 2:\r\n                        localIMDSVersionResponse = _e.sent();\r\n                        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = localIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n                        return [4 /*yield*/, this.getCurrentVersion(options)];\r\n                    case 3:\r\n                        currentIMDSVersion = _e.sent();\r\n                        if (!currentIMDSVersion) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\r\n                    case 4:\r\n                        currentIMDSVersionResponse = _e.sent();\r\n                        if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        _e.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        _e.sent();\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return [2 /*return*/, null];\r\n                    case 7: return [3 /*break*/, 9];\r\n                    case 8:\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n                        _e.label = 9;\r\n                    case 9:\r\n                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n                        if (!autodetectedRegionName) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        }\r\n                        return [2 /*return*/, autodetectedRegionName || null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_b) {\r\n                (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.getCurrentVersion = function (options) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n                        if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                            return [2 /*return*/, response.body[\"newest-versions\"][0]];\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 3:\r\n                        _b.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Options for the IMDS endpoint request\r\n    RegionDiscovery.IMDS_OPTIONS = {\r\n        headers: {\r\n            Metadata: \"true\",\r\n        },\r\n    };\r\n    return RegionDiscovery;\r\n}());\n\nexport { RegionDiscovery };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}