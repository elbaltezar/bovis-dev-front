{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { MathUtils } from '../utils/MathUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar GuidGenerator =\n/** @class */\nfunction () {\n  function GuidGenerator(cryptoObj) {\n    this.cryptoObj = cryptoObj;\n  }\n  /*\r\n   * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n   * pseudo-random numbers.\r\n   * The algorithm is as follows:\r\n   *     Set the two most significant bits (bits 6 and 7) of the\r\n   *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n   *     Set the four most significant bits (bits 12 through 15) of the\r\n   *        time_hi_and_version field to the 4-bit version number from\r\n   *        Section 4.1.3. Version4\r\n   *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n   *     values.\r\n   * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n   * time-low               = 4hexOctet\r\n   * time-mid               = 2hexOctet\r\n   * time-high-and-version  = 2hexOctet\r\n   * clock-seq-and-reserved = hexOctet:\r\n   * clock-seq-low          = hexOctet\r\n   * node                   = 6hexOctet\r\n   * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n   * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n   * y values are 8, 9, A, B\r\n   */\n\n\n  GuidGenerator.prototype.generateGuid = function () {\n    try {\n      var buffer = new Uint8Array(16);\n      this.cryptoObj.getRandomValues(buffer); // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n\n      buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n\n      buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n\n      buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n\n      buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n\n      return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1]) + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3]) + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5]) + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7]) + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9]) + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11]) + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13]) + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\n    } catch (err) {\n      var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      var hex = \"0123456789abcdef\";\n      var r = 0;\n      var guidResponse = Constants.EMPTY_STRING;\n\n      for (var i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n\n          r |= 0x8; // set pos 3 to 1 as 1???\n\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n\n      return guidResponse;\n    }\n  };\n  /**\r\n   * verifies if a string is  GUID\r\n   * @param guid\r\n   */\n\n\n  GuidGenerator.prototype.isGuid = function (guid) {\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  };\n\n  return GuidGenerator;\n}();\n\nexport { GuidGenerator };","map":{"version":3,"names":["Constants","MathUtils","GuidGenerator","cryptoObj","prototype","generateGuid","buffer","Uint8Array","getRandomValues","decimalToHex","err","guidHolder","hex","r","guidResponse","EMPTY_STRING","i","Math","random","isGuid","guid","regexGuid","test"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/crypto/GuidGenerator.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { Constants } from '@azure/msal-common';\nimport { MathUtils } from '../utils/MathUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar GuidGenerator = /** @class */ (function () {\r\n    function GuidGenerator(cryptoObj) {\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n    /*\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n     * pseudo-random numbers.\r\n     * The algorithm is as follows:\r\n     *     Set the two most significant bits (bits 6 and 7) of the\r\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n     *     Set the four most significant bits (bits 12 through 15) of the\r\n     *        time_hi_and_version field to the 4-bit version number from\r\n     *        Section 4.1.3. Version4\r\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n     *     values.\r\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n     * time-low               = 4hexOctet\r\n     * time-mid               = 2hexOctet\r\n     * time-high-and-version  = 2hexOctet\r\n     * clock-seq-and-reserved = hexOctet:\r\n     * clock-seq-low          = hexOctet\r\n     * node                   = 6hexOctet\r\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n     * y values are 8, 9, A, B\r\n     */\r\n    GuidGenerator.prototype.generateGuid = function () {\r\n        try {\r\n            var buffer = new Uint8Array(16);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\r\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\r\n            return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])\r\n                + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])\r\n                + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])\r\n                + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\r\n        }\r\n        catch (err) {\r\n            var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\r\n            var hex = \"0123456789abcdef\";\r\n            var r = 0;\r\n            var guidResponse = Constants.EMPTY_STRING;\r\n            for (var i = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === \"x\") {\r\n                    guidResponse += hex[r];\r\n                }\r\n                else if (guidHolder[i] === \"y\") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                }\r\n                else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    };\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    GuidGenerator.prototype.isGuid = function (guid) {\r\n        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    };\r\n    return GuidGenerator;\r\n}());\n\nexport { GuidGenerator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}