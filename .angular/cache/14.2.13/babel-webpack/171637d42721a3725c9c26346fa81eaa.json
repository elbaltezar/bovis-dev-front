{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.astsAsyncMeasurement = undefined;\n    _this.activeSilentTokenRequests = new Map(); // Register listener functions\n\n    _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        atsMeasurement.addStaticFields({\n          cacheLookupPolicy: request.cacheLookupPolicy\n        });\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.addStaticFields({\n              accessTokenSize: result.accessToken.length,\n              idTokenSize: result.idToken.length\n            });\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache,\n              isNativeBroker: result.fromNativeBroker,\n              cacheLookupPolicy: request.cacheLookupPolicy,\n              requestId: result.requestId\n            });\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              errorCode: error.errorCode,\n              subErrorCode: error.subError,\n              success: false\n            });\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId); // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n\n          atsMeasurement.discardMeasurement();\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n\n  PublicClientApplication.prototype.trackPageVisibility = function () {\n    if (!this.astsAsyncMeasurement) {\n      return;\n    }\n\n    this.logger.info(\"Perf: Visibility change detected\");\n    this.astsAsyncMeasurement.increment({\n      visibilityChangeCount: 1\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({\n              visibilityChangeCount: 0\n            });\n            document.addEventListener(\"visibilitychange\", this.trackPageVisibility);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3\n            /*break*/\n            , 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n\n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2\n                    /*return*/\n                    , silentIframeClient.acquireToken(request)];\n                  }\n\n                  throw e;\n                });\n              });\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , silentCacheClient.initializeSilentRequest(request, account)];\n\n          case 2:\n            silentRequest_1 = _b.sent();\n            requestWithCLP_1 = __assign(__assign({}, request), {\n              // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n              cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            });\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\n              if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                throw cacheError;\n              } // block the reload if it occurred inside a hidden iframe\n\n\n              BrowserUtils.blockReloadInHiddenIframes();\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\n\n              _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);\n\n              return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\n                var isServerError = refreshTokenError instanceof ServerError;\n                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                var rtNotFound = refreshTokenError.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                var isInvalidGrantError = refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR;\n\n                if ((!isServerError || !isInvalidGrantError || isInteractionRequiredError || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken) && requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip && !rtNotFound) {\n                  throw refreshTokenError;\n                }\n\n                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n\n                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);\n\n                return _this.acquireTokenBySilentIframe(silentRequest_1);\n              });\n            });\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , result.then(function (response) {\n              var _a;\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              var _a;\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n              });\n              throw tokenRenewalError;\n            }).finally(function () {\n              document.removeEventListener(\"visibilitychange\", _this.trackPageVisibility);\n            })];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","PerformanceEvents","Constants","ServerError","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","DEFAULT_REQUEST","InteractionType","CacheLookupPolicy","ApiId","BrowserConstants","ClientApplication","EventType","BrowserAuthError","NativeAuthError","NativeMessageHandler","BrowserUtils","PublicClientApplication","_super","configuration","_this","call","astsAsyncMeasurement","undefined","activeSilentTokenRequests","Map","trackPageVisibility","bind","prototype","loginRedirect","request","correlationId","_a","getRequestCorrelationId","logger","verbose","acquireTokenRedirect","loginPopup","acquireTokenPopup","acquireTokenSilent","atsMeasurement","account","thumbprint","silentRequestKey","cachedResponse","response","performanceClient","startMeasurement","AcquireTokenSilent","addStaticFields","cacheLookupPolicy","preflightBrowserEnvironmentCheck","Silent","getActiveAccount","createNoAccountError","clientId","config","auth","authority","EMPTY_STRING","scopes","homeAccountIdentifier","homeAccountId","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","JSON","stringify","get","setPreQueueTime","AcquireTokenSilentAsync","acquireTokenSilentAsync","then","result","delete","accessTokenSize","accessToken","length","idTokenSize","idToken","endMeasurement","success","fromCache","isNativeBroker","fromNativeBroker","requestId","catch","error","errorCode","subErrorCode","subError","set","discardMeasurement","info","increment","visibilityChangeCount","silentRequest","silentCacheClient","silentRequest_1","requestWithCLP_1","_b","label","addQueueMeasurement","eventHandler","emitEvent","ACQUIRE_TOKEN_START","document","addEventListener","isNativeAvailable","nativeExtensionProvider","nativeAccountId","acquireTokenNative","acquireTokenSilent_silentFlow","e","silentIframeClient","isFatal","createSilentIframeClient","acquireToken","createSilentCacheClient","InitializeSilentRequest","initializeSilentRequest","sent","Default","AcquireTokenFromCache","acquireTokenFromCache","cacheError","AccessToken","blockReloadInHiddenIframes","ACQUIRE_TOKEN_NETWORK_START","AcquireTokenByRefreshToken","acquireTokenByRefreshToken","refreshTokenError","isServerError","isInteractionRequiredError","rtNotFound","noTokensFoundError","code","isInvalidGrantError","INVALID_GRANT_ERROR","AccessTokenAndRefreshToken","RefreshToken","Skip","AcquireTokenBySilentIframe","acquireTokenBySilentIframe","ACQUIRE_TOKEN_SUCCESS","tokenRenewalError","ACQUIRE_TOKEN_FAILURE","finally","removeEventListener"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/app/PublicClientApplication.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nvar PublicClientApplication = /** @class */ (function (_super) {\r\n    __extends(PublicClientApplication, _super);\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    function PublicClientApplication(configuration) {\r\n        var _this = _super.call(this, configuration) || this;\r\n        _this.astsAsyncMeasurement = undefined;\r\n        _this.activeSilentTokenRequests = new Map();\r\n        // Register listener functions\r\n        _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    PublicClientApplication.prototype.loginRedirect = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var correlationId;\r\n            return __generator(this, function (_a) {\r\n                correlationId = this.getRequestCorrelationId(request);\r\n                this.logger.verbose(\"loginRedirect called\", correlationId);\r\n                return [2 /*return*/, this.acquireTokenRedirect(__assign({ correlationId: correlationId }, (request || DEFAULT_REQUEST)))];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    PublicClientApplication.prototype.loginPopup = function (request) {\r\n        var correlationId = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginPopup called\", correlationId);\r\n        return this.acquireTokenPopup(__assign({ correlationId: correlationId }, (request || DEFAULT_REQUEST)));\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilent = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                correlationId = this.getRequestCorrelationId(request);\r\n                atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\r\n                atsMeasurement.addStaticFields({\r\n                    cacheLookupPolicy: request.cacheLookupPolicy\r\n                });\r\n                this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n                this.logger.verbose(\"acquireTokenSilent called\", correlationId);\r\n                account = request.account || this.getActiveAccount();\r\n                if (!account) {\r\n                    throw BrowserAuthError.createNoAccountError();\r\n                }\r\n                thumbprint = {\r\n                    clientId: this.config.auth.clientId,\r\n                    authority: request.authority || Constants.EMPTY_STRING,\r\n                    scopes: request.scopes,\r\n                    homeAccountIdentifier: account.homeAccountId,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                silentRequestKey = JSON.stringify(thumbprint);\r\n                cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n                if (typeof cachedResponse === \"undefined\") {\r\n                    this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\r\n                    this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\r\n                    response = this.acquireTokenSilentAsync(__assign(__assign({}, request), { correlationId: correlationId }), account)\r\n                        .then(function (result) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        atsMeasurement.addStaticFields({\r\n                            accessTokenSize: result.accessToken.length,\r\n                            idTokenSize: result.idToken.length\r\n                        });\r\n                        atsMeasurement.endMeasurement({\r\n                            success: true,\r\n                            fromCache: result.fromCache,\r\n                            isNativeBroker: result.fromNativeBroker,\r\n                            cacheLookupPolicy: request.cacheLookupPolicy,\r\n                            requestId: result.requestId,\r\n                        });\r\n                        return result;\r\n                    })\r\n                        .catch(function (error) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        atsMeasurement.endMeasurement({\r\n                            errorCode: error.errorCode,\r\n                            subErrorCode: error.subError,\r\n                            success: false\r\n                        });\r\n                        throw error;\r\n                    });\r\n                    this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n                    return [2 /*return*/, response];\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\r\n                    // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\r\n                    atsMeasurement.discardMeasurement();\r\n                    return [2 /*return*/, cachedResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PublicClientApplication.prototype.trackPageVisibility = function () {\r\n        if (!this.astsAsyncMeasurement) {\r\n            return;\r\n        }\r\n        this.logger.info(\"Perf: Visibility change detected\");\r\n        this.astsAsyncMeasurement.increment({\r\n            visibilityChangeCount: 1,\r\n        });\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n                        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n                        this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n                        (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({\r\n                            visibilityChangeCount: 0\r\n                        });\r\n                        document.addEventListener(\"visibilitychange\", this.trackPageVisibility);\r\n                        if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3 /*break*/, 1];\r\n                        this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\r\n                        silentRequest = __assign(__assign({}, request), { account: account });\r\n                        result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var silentIframeClient;\r\n                            return __generator(this, function (_a) {\r\n                                // If native token acquisition fails for availability reasons fallback to web flow\r\n                                if (e instanceof NativeAuthError && e.isFatal()) {\r\n                                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\r\n                                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\r\n                                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\r\n                                    return [2 /*return*/, silentIframeClient.acquireToken(request)];\r\n                                }\r\n                                throw e;\r\n                            });\r\n                        }); });\r\n                        return [3 /*break*/, 3];\r\n                    case 1:\r\n                        this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\r\n                        silentCacheClient = this.createSilentCacheClient(request.correlationId);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\r\n                        return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];\r\n                    case 2:\r\n                        silentRequest_1 = _b.sent();\r\n                        requestWithCLP_1 = __assign(__assign({}, request), { \r\n                            // set the request's CacheLookupPolicy to Default if it was not optionally passed in\r\n                            cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default });\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);\r\n                        result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\r\n                            if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\r\n                                throw cacheError;\r\n                            }\r\n                            // block the reload if it occurred inside a hidden iframe\r\n                            BrowserUtils.blockReloadInHiddenIframes();\r\n                            _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\r\n                            _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);\r\n                            return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\r\n                                var isServerError = refreshTokenError instanceof ServerError;\r\n                                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\r\n                                var rtNotFound = (refreshTokenError.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code);\r\n                                var isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\r\n                                if ((!isServerError ||\r\n                                    !isInvalidGrantError ||\r\n                                    isInteractionRequiredError ||\r\n                                    requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||\r\n                                    requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)\r\n                                    && (requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip)\r\n                                    && !rtNotFound) {\r\n                                    throw refreshTokenError;\r\n                                }\r\n                                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\r\n                                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);\r\n                                return _this.acquireTokenBySilentIframe(silentRequest_1);\r\n                            });\r\n                        });\r\n                        _b.label = 3;\r\n                    case 3: return [2 /*return*/, result.then(function (response) {\r\n                            var _a;\r\n                            _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\r\n                            (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\r\n                                success: true,\r\n                                fromCache: response.fromCache,\r\n                                isNativeBroker: response.fromNativeBroker,\r\n                                requestId: response.requestId\r\n                            });\r\n                            return response;\r\n                        }).catch(function (tokenRenewalError) {\r\n                            var _a;\r\n                            _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\r\n                            (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\r\n                                errorCode: tokenRenewalError.errorCode,\r\n                                subErrorCode: tokenRenewalError.subError,\r\n                                success: false\r\n                            });\r\n                            throw tokenRenewalError;\r\n                        }).finally(function () {\r\n                            document.removeEventListener(\"visibilitychange\", _this.trackPageVisibility);\r\n                        })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PublicClientApplication;\r\n}(ClientApplication));\n\nexport { PublicClientApplication };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}