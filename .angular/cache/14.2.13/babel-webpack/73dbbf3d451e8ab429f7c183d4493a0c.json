{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { ScopeSet } from './ScopeSet.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from './RequestValidator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RequestParameterBuilder =\n/** @class */\nfunction () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_type = token id_token\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseTypeForTokenAndIdToken = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.TOKEN_RESPONSE_TYPE + \" \" + Constants.ID_TOKEN_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * Add flag to indicate STS should attempt to use WAM if available\r\n   */\n\n\n  RequestParameterBuilder.prototype.addNativeBroker = function () {\n    this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n\n\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n\n\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n\n    if (libraryInfo.os) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n\n    if (libraryInfo.cpu) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  };\n  /**\r\n   * Add client telemetry parameters\r\n   * @param appTelemetry\r\n   */\n\n\n  RequestParameterBuilder.prototype.addApplicationTelemetry = function (appTelemetry) {\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appName) {\n      this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appVersion) {\n      this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n\n\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n\n\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    if (!StringUtils.isEmpty(clientAssertion)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    if (!StringUtils.isEmpty(clientAssertionType)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQParams\r\n   */\n\n\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQParams) {\n    var _this = this;\n\n    var sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n    Object.keys(sanitizedEQParams).forEach(function (key) {\n      _this.parameters.set(key, eQParams[key]);\n    });\n  };\n\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims; // Parse provided claims into JSON object or initialize empty object\n\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      } // Add xms_cc claim with provided clientCapabilities to access_token key\n\n\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n\n\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add SSH JWK and key ID to query params\r\n   */\n\n\n  RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {\n    if (!StringUtils.isEmpty(sshJwkString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n\n\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n\n\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {\n    this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n\n\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n\n  return RequestParameterBuilder;\n}();\n\nexport { RequestParameterBuilder };","map":{"version":3,"names":["__spreadArrays","AADServerParamKeys","Constants","ResponseMode","OIDC_DEFAULT_SCOPES","SSOTypes","HeaderNames","CLIENT_INFO","ClaimsRequestKeys","PasswordGrantConstants","AuthenticationScheme","ThrottlingConstants","ScopeSet","ClientConfigurationError","RequestValidator","StringUtils","RequestParameterBuilder","parameters","Map","prototype","addResponseTypeCode","set","RESPONSE_TYPE","encodeURIComponent","CODE_RESPONSE_TYPE","addResponseTypeForTokenAndIdToken","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","QUERY","addNativeBroker","NATIVE_BROKER","addScopes","scopes","addOidcScopes","requestScopes","scopeSet","SCOPE","printScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","validateRedirectUri","REDIRECT_URI","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","addClaims","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","addCorrelationId","correlationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","addApplicationTelemetry","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","addPrompt","prompt","validatePrompt","PROMPT","addState","state","isEmpty","STATE","addNonce","nonce","NONCE","addCodeChallengeParams","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","createInvalidCodeChallengeParamsError","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","addClientInfo","addExtraQueryParameters","eQParams","_this","sanitizedEQParams","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","POP","REQ_CNF","addSshJwk","sshJwkString","SSH","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","addThrottling","X_MS_LIB_CAPABILITY","X_MS_LIB_CAPABILITY_VALUE","addLogoutHint","logoutHint","LOGOUT_HINT","createQueryString","queryParameterArray","Array","value","push","join"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { ScopeSet } from './ScopeSet.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from './RequestValidator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RequestParameterBuilder = /** @class */ (function () {\r\n    function RequestParameterBuilder() {\r\n        this.parameters = new Map();\r\n    }\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseTypeCode = function () {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\r\n    };\r\n    /**\r\n     * add response_type = token id_token\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseTypeForTokenAndIdToken = function () {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.TOKEN_RESPONSE_TYPE + \" \" + Constants.ID_TOKEN_RESPONSE_TYPE));\r\n    };\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY));\r\n    };\r\n    /**\r\n     * Add flag to indicate STS should attempt to use WAM if available\r\n     */\r\n    RequestParameterBuilder.prototype.addNativeBroker = function () {\r\n        this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\r\n    };\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\r\n        if (addOidcScopes === void 0) { addOidcScopes = true; }\r\n        var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\r\n        var scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    };\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    RequestParameterBuilder.prototype.addClientId = function (clientId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    };\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    };\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    };\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\r\n    };\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    RequestParameterBuilder.prototype.addSid = function (sid) {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    };\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    };\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    };\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        if (libraryInfo.os) {\r\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        }\r\n        if (libraryInfo.cpu) {\r\n            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n        }\r\n    };\r\n    /**\r\n     * Add client telemetry parameters\r\n     * @param appTelemetry\r\n     */\r\n    RequestParameterBuilder.prototype.addApplicationTelemetry = function (appTelemetry) {\r\n        if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appName) {\r\n            this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\r\n        }\r\n        if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appVersion) {\r\n            this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\r\n        }\r\n    };\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    RequestParameterBuilder.prototype.addPrompt = function (prompt) {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\r\n    };\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    RequestParameterBuilder.prototype.addState = function (state) {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    };\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    RequestParameterBuilder.prototype.addNonce = function (nonce) {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    };\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        }\r\n        else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addDeviceCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    };\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    };\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    };\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\r\n        if (!StringUtils.isEmpty(clientAssertion)) {\r\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n        }\r\n    };\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\r\n        if (!StringUtils.isEmpty(clientAssertionType)) {\r\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n        }\r\n    };\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addGrantType = function (grantType) {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    };\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    RequestParameterBuilder.prototype.addClientInfo = function () {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    };\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQParams\r\n     */\r\n    RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQParams) {\r\n        var _this = this;\r\n        var sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\r\n        Object.keys(sanitizedEQParams).forEach(function (key) {\r\n            _this.parameters.set(key, eQParams[key]);\r\n        });\r\n    };\r\n    RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims;\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        }\r\n        else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n        return JSON.stringify(mergedClaims);\r\n    };\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    RequestParameterBuilder.prototype.addUsername = function (username) {\r\n        this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\r\n    };\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    RequestParameterBuilder.prototype.addPassword = function (password) {\r\n        this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\r\n    };\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    };\r\n    /**\r\n     * add SSH JWK and key ID to query params\r\n     */\r\n    RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {\r\n        if (!StringUtils.isEmpty(sshJwkString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\r\n        }\r\n    };\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */\r\n    RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    };\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    RequestParameterBuilder.prototype.addThrottling = function () {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    };\r\n    /**\r\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n     */\r\n    RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {\r\n        this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\r\n    };\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    RequestParameterBuilder.prototype.createQueryString = function () {\r\n        var queryParameterArray = new Array();\r\n        this.parameters.forEach(function (value, key) {\r\n            queryParameterArray.push(key + \"=\" + value);\r\n        });\r\n        return queryParameterArray.join(\"&\");\r\n    };\r\n    return RequestParameterBuilder;\r\n}());\n\nexport { RequestParameterBuilder };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}