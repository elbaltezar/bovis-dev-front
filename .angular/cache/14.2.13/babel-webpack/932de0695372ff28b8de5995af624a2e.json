{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, Constants, PerformanceEvents, AuthorizationCodeClient, Authority, AuthorityFactory, ResponseMode, StringUtils, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { version } from '../packageMetadata.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\n\nvar StandardInteractionClient =\n/** @class */\nfunction (_super) {\n  __extends(StandardInteractionClient, _super);\n\n  function StandardInteractionClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Generates an auth code request tied to the url request.\r\n   * @param request\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var generatedPkceParams, authCodeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generatePkceCodes()];\n\n          case 1:\n            generatedPkceParams = _a.sent();\n            authCodeRequest = __assign(__assign({}, request), {\n              redirectUri: request.redirectUri,\n              code: Constants.EMPTY_STRING,\n              codeVerifier: generatedPkceParams.verifier\n            });\n            request.codeChallenge = generatedPkceParams.challenge;\n            request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n            return [2\n            /*return*/\n            , authCodeRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer for the logout request.\r\n   * @param logoutRequest\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);\n\n    var validLogoutRequest = __assign({\n      correlationId: this.correlationId || this.browserCrypto.createNewGuid()\n    }, logoutRequest);\n    /**\r\n     * Set logout_hint to be login_hint from ID Token Claims if present\r\n     * and logoutHint attribute wasn't manually set in logout request\r\n     */\n\n\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\r\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n     * Otherwise, use passed uri, config, or current page.\r\n     */\n\n\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n\n    return validLogoutRequest;\n  };\n  /**\r\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n   * logout_hint in end session request.\r\n   * @param account\r\n   */\n\n\n  StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {\n    var idTokenClaims = account.idTokenClaims;\n\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n\n    return null;\n  };\n  /**\r\n   * Creates an Authorization Code Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId); // Create auth module.\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new AuthorizationCodeClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates a Client Configuration object with the given request authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var discoveredAuthority, logger;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];\n\n          case 1:\n            discoveredAuthority = _a.sent();\n            logger = this.config.system.loggerOptions;\n            return [2\n            /*return*/\n            , {\n              authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n              },\n              systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n              },\n              loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId\n              },\n              cacheOptions: {\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n              },\n              cryptoInterface: this.browserCrypto,\n              networkInterface: this.networkClient,\n              storageInterface: this.browserStorage,\n              serverTelemetryManager: serverTelemetryManager,\n              libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING\n              },\n              telemetry: this.config.telemetry\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * @param hash\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (serverParams, interactionType, requestCorrelationId) {\n    this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n\n    if (!serverParams.state) {\n      throw BrowserAuthError.createHashDoesNotContainStateError();\n    }\n\n    var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n\n    if (!platformStateObj) {\n      throw BrowserAuthError.createUnableToParseStateError();\n    }\n\n    if (platformStateObj.interactionType !== interactionType) {\n      throw BrowserAuthError.createStateInteractionTypeMismatchError();\n    }\n\n    this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n    return serverParams.state;\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var getAuthorityMeasurement, authorityOptions, userAuthority, builtAuthority;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\n            getAuthorityMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata,\n              skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n            };\n            userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n            builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n            this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId).then(function (result) {\n              getAuthorityMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              getAuthorityMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n   * @param request\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {\n    return __awaiter(this, void 0, void 0, function () {\n      var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\n            redirectUri = this.getRedirectUri(request.redirectUri);\n            browserState = {\n              interactionType: interactionType\n            };\n            state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n            _a = [{}];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            validatedRequest = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              redirectUri: redirectUri,\n              state: state,\n              nonce: request.nonce || this.browserCrypto.createNewGuid(),\n              responseMode: ResponseMode.FRAGMENT\n            }]);\n            account = request.account || this.browserStorage.getActiveAccount();\n\n            if (account) {\n              this.logger.verbose(\"Setting validated request account\", this.correlationId);\n              this.logger.verbosePii(\"Setting validated request account: \" + account.homeAccountId, this.correlationId);\n              validatedRequest.account = account;\n            } // Check for ADAL/MSAL v1 SSO\n\n\n            if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n              legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n\n              if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n              }\n            }\n\n            return [2\n            /*return*/\n            , validatedRequest];\n        }\n      });\n    });\n  };\n\n  return StandardInteractionClient;\n}(BaseInteractionClient);\n\nexport { StandardInteractionClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","UrlString","Constants","PerformanceEvents","AuthorizationCodeClient","Authority","AuthorityFactory","ResponseMode","StringUtils","ProtocolUtils","BaseInteractionClient","BrowserConstants","version","BrowserAuthError","BrowserProtocolUtils","BrowserUtils","StandardInteractionClient","_super","apply","arguments","prototype","initializeAuthorizationCodeRequest","request","generatedPkceParams","authCodeRequest","_a","label","performanceClient","addQueueMeasurement","StandardInteractionClientInitializeAuthorizationCodeRequest","correlationId","logger","verbose","browserCrypto","generatePkceCodes","sent","redirectUri","code","EMPTY_STRING","codeVerifier","verifier","codeChallenge","challenge","codeChallengeMethod","S256_CODE_CHALLENGE_METHOD","initializeLogoutRequest","logoutRequest","validLogoutRequest","createNewGuid","logoutHint","account","getLogoutHintFromIdTokenClaims","postLogoutRedirectUri","getAbsoluteUrl","getCurrentUri","config","auth","idTokenClaims","login_hint","createAuthCodeClient","serverTelemetryManager","authorityUrl","requestAzureCloudOptions","clientConfig","StandardInteractionClientCreateAuthCodeClient","setPreQueueTime","StandardInteractionClientGetClientConfiguration","getClientConfiguration","requestAuthority","discoveredAuthority","StandardInteractionClientGetDiscoveredAuthority","getDiscoveredAuthority","system","loggerOptions","authOptions","clientId","authority","clientCapabilities","systemOptions","tokenRenewalOffsetSeconds","preventCorsPreflight","loggerCallback","piiLoggingEnabled","logLevel","cacheOptions","claimsBasedCachingEnabled","cache","cryptoInterface","networkInterface","networkClient","storageInterface","browserStorage","libraryInfo","sku","MSAL_SKU","cpu","os","telemetry","validateAndExtractStateFromHash","serverParams","interactionType","requestCorrelationId","state","createHashDoesNotContainStateError","platformStateObj","extractBrowserRequestState","createUnableToParseStateError","createStateInteractionTypeMismatchError","getAuthorityMeasurement","authorityOptions","userAuthority","builtAuthority","_b","startMeasurement","protocolMode","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","generateAuthority","azureCloudOptions","AuthorityFactoryCreateDiscoveredInstance","createDiscoveredInstance","then","result","endMeasurement","success","catch","error","errorCode","subErrorCode","subError","initializeAuthorizationRequest","browserState","validatedRequest","legacyLoginHint","StandardInteractionClientInitializeAuthorizationRequest","getRedirectUri","setRequestState","InitializeBaseRequest","initializeBaseRequest","concat","nonce","responseMode","FRAGMENT","getActiveAccount","verbosePii","homeAccountId","isEmpty","loginHint","getLegacyLoginHint"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, Constants, PerformanceEvents, AuthorizationCodeClient, Authority, AuthorityFactory, ResponseMode, StringUtils, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { version } from '../packageMetadata.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\r\nvar StandardInteractionClient = /** @class */ (function (_super) {\r\n    __extends(StandardInteractionClient, _super);\r\n    function StandardInteractionClient() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Generates an auth code request tied to the url request.\r\n     * @param request\r\n     */\r\n    StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var generatedPkceParams, authCodeRequest;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n                        this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\r\n                        return [4 /*yield*/, this.browserCrypto.generatePkceCodes()];\r\n                    case 1:\r\n                        generatedPkceParams = _a.sent();\r\n                        authCodeRequest = __assign(__assign({}, request), { redirectUri: request.redirectUri, code: Constants.EMPTY_STRING, codeVerifier: generatedPkceParams.verifier });\r\n                        request.codeChallenge = generatedPkceParams.challenge;\r\n                        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\r\n                        return [2 /*return*/, authCodeRequest];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Initializer for the logout request.\r\n     * @param logoutRequest\r\n     */\r\n    StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {\r\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);\r\n        var validLogoutRequest = __assign({ correlationId: this.correlationId || this.browserCrypto.createNewGuid() }, logoutRequest);\r\n        /**\r\n         * Set logout_hint to be login_hint from ID Token Claims if present\r\n         * and logoutHint attribute wasn't manually set in logout request\r\n         */\r\n        if (logoutRequest) {\r\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\r\n            if (!logoutRequest.logoutHint) {\r\n                if (logoutRequest.account) {\r\n                    var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\r\n                    if (logoutHint) {\r\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\r\n                        validLogoutRequest.logoutHint = logoutHint;\r\n                    }\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\r\n                }\r\n            }\r\n            else {\r\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\r\n        }\r\n        /*\r\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n         * Otherwise, use passed uri, config, or current page.\r\n         */\r\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\r\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            }\r\n            else if (this.config.auth.postLogoutRedirectUri === null) {\r\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\r\n            }\r\n            else if (this.config.auth.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            }\r\n            else {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\r\n        }\r\n        return validLogoutRequest;\r\n    };\r\n    /**\r\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n     * logout_hint in end session request.\r\n     * @param account\r\n     */\r\n    StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {\r\n        var idTokenClaims = account.idTokenClaims;\r\n        if (idTokenClaims) {\r\n            if (idTokenClaims.login_hint) {\r\n                return idTokenClaims.login_hint;\r\n            }\r\n            else {\r\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Creates an Authorization Code Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var clientConfig;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\r\n                        // Create auth module.\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n                        return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];\r\n                    case 1:\r\n                        clientConfig = _a.sent();\r\n                        return [2 /*return*/, new AuthorizationCodeClient(clientConfig, this.performanceClient)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates a Client Configuration object with the given request authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var discoveredAuthority, logger;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n                        this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n                        return [4 /*yield*/, this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];\r\n                    case 1:\r\n                        discoveredAuthority = _a.sent();\r\n                        logger = this.config.system.loggerOptions;\r\n                        return [2 /*return*/, {\r\n                                authOptions: {\r\n                                    clientId: this.config.auth.clientId,\r\n                                    authority: discoveredAuthority,\r\n                                    clientCapabilities: this.config.auth.clientCapabilities\r\n                                },\r\n                                systemOptions: {\r\n                                    tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\r\n                                    preventCorsPreflight: true\r\n                                },\r\n                                loggerOptions: {\r\n                                    loggerCallback: logger.loggerCallback,\r\n                                    piiLoggingEnabled: logger.piiLoggingEnabled,\r\n                                    logLevel: logger.logLevel,\r\n                                    correlationId: this.correlationId\r\n                                },\r\n                                cacheOptions: {\r\n                                    claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\r\n                                },\r\n                                cryptoInterface: this.browserCrypto,\r\n                                networkInterface: this.networkClient,\r\n                                storageInterface: this.browserStorage,\r\n                                serverTelemetryManager: serverTelemetryManager,\r\n                                libraryInfo: {\r\n                                    sku: BrowserConstants.MSAL_SKU,\r\n                                    version: version,\r\n                                    cpu: Constants.EMPTY_STRING,\r\n                                    os: Constants.EMPTY_STRING\r\n                                },\r\n                                telemetry: this.config.telemetry\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param hash\r\n     * @param interactionType\r\n     */\r\n    StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (serverParams, interactionType, requestCorrelationId) {\r\n        this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\r\n        if (!serverParams.state) {\r\n            throw BrowserAuthError.createHashDoesNotContainStateError();\r\n        }\r\n        var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\r\n        if (!platformStateObj) {\r\n            throw BrowserAuthError.createUnableToParseStateError();\r\n        }\r\n        if (platformStateObj.interactionType !== interactionType) {\r\n            throw BrowserAuthError.createStateInteractionTypeMismatchError();\r\n        }\r\n        this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\r\n        return serverParams.state;\r\n    };\r\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getAuthorityMeasurement, authorityOptions, userAuthority, builtAuthority;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n                        this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\r\n                        getAuthorityMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n                        authorityOptions = {\r\n                            protocolMode: this.config.auth.protocolMode,\r\n                            knownAuthorities: this.config.auth.knownAuthorities,\r\n                            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                            authorityMetadata: this.config.auth.authorityMetadata,\r\n                            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\r\n                        };\r\n                        userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\r\n                        builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\r\n                        this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\r\n                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId)\r\n                                .then(function (result) {\r\n                                getAuthorityMeasurement.endMeasurement({\r\n                                    success: true,\r\n                                });\r\n                                return result;\r\n                            })\r\n                                .catch(function (error) {\r\n                                getAuthorityMeasurement.endMeasurement({\r\n                                    errorCode: error.errorCode,\r\n                                    subErrorCode: error.subError,\r\n                                    success: false\r\n                                });\r\n                                throw error;\r\n                            })];\r\n                    case 1: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n     * @param request\r\n     * @param interactionType\r\n     */\r\n    StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\r\n                        this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\r\n                        redirectUri = this.getRedirectUri(request.redirectUri);\r\n                        browserState = {\r\n                            interactionType: interactionType\r\n                        };\r\n                        state = ProtocolUtils.setRequestState(this.browserCrypto, (request && request.state) || Constants.EMPTY_STRING, browserState);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\r\n                        _a = [{}];\r\n                        return [4 /*yield*/, this.initializeBaseRequest(request)];\r\n                    case 1:\r\n                        validatedRequest = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), { redirectUri: redirectUri, state: state, nonce: request.nonce || this.browserCrypto.createNewGuid(), responseMode: ResponseMode.FRAGMENT }]);\r\n                        account = request.account || this.browserStorage.getActiveAccount();\r\n                        if (account) {\r\n                            this.logger.verbose(\"Setting validated request account\", this.correlationId);\r\n                            this.logger.verbosePii(\"Setting validated request account: \" + account.homeAccountId, this.correlationId);\r\n                            validatedRequest.account = account;\r\n                        }\r\n                        // Check for ADAL/MSAL v1 SSO\r\n                        if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\r\n                            legacyLoginHint = this.browserStorage.getLegacyLoginHint();\r\n                            if (legacyLoginHint) {\r\n                                validatedRequest.loginHint = legacyLoginHint;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, validatedRequest];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return StandardInteractionClient;\r\n}(BaseInteractionClient));\n\nexport { StandardInteractionClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}