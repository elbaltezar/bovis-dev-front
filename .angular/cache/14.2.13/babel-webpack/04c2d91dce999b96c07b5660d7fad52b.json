{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\n\nvar UrlString =\n/** @class */\nfunction () {\n  function UrlString(url) {\n    this._urlString = url;\n\n    if (StringUtils.isEmpty(this._urlString)) {\n      // Throws error if url is empty\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n\n    if (StringUtils.isEmpty(this.getHash())) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n\n  Object.defineProperty(UrlString.prototype, \"urlString\", {\n    get: function () {\n      return this._urlString;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Ensure urls are lower case and end with a / character.\r\n   * @param url\r\n   */\n\n  UrlString.canonicalizeUri = function (url) {\n    if (url) {\n      var lowerCaseUrl = url.toLowerCase();\n\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n\n      return lowerCaseUrl;\n    }\n\n    return url;\n  };\n  /**\r\n   * Throws if urlString passed is not a valid authority URI string.\r\n   */\n\n\n  UrlString.prototype.validateAsUri = function () {\n    // Attempts to parse url for uri components\n    var components;\n\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError.createUrlParseError(e);\n    } // Throw error if URI or path segments are not parseable.\n\n\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    } // Throw error if uri is insecure.\n\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n    }\n  };\n  /**\r\n   * Given a url and a query string return the url with provided query string appended\r\n   * @param url\r\n   * @param queryString\r\n   */\n\n\n  UrlString.appendQueryString = function (url, queryString) {\n    if (StringUtils.isEmpty(queryString)) {\n      return url;\n    }\n\n    return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\n  };\n  /**\r\n   * Returns a url with the hash removed\r\n   * @param url\r\n   */\n\n\n  UrlString.removeHashFromUrl = function (url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  };\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n\n\n  UrlString.prototype.replaceTenantPath = function (tenantId) {\n    var urlObject = this.getUrlComponents();\n    var pathArray = urlObject.PathSegments;\n\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  };\n  /**\r\n   * Returns the anchor part(#) of the URL\r\n   */\n\n\n  UrlString.prototype.getHash = function () {\n    return UrlString.parseHash(this.urlString);\n  };\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n\n\n  UrlString.prototype.getUrlComponents = function () {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"); // If url string does not match regEx, we throw an error\n\n    var match = this.urlString.match(regEx);\n\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    } // Url component object\n\n\n    var urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    var pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(function (val) {\n      return val && val.length > 0;\n    }); // remove empty elements\n\n    urlComponents.PathSegments = pathSegments;\n\n    if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n\n    return urlComponents;\n  };\n\n  UrlString.getDomainFromUrl = function (url) {\n    var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    var match = url.match(regEx);\n\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\n    }\n\n    return match[2];\n  };\n\n  UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      var url = new UrlString(baseUrl);\n      var baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n\n    return relativeUrl;\n  };\n  /**\r\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n   * @param hashString\r\n   */\n\n\n  UrlString.parseHash = function (hashString) {\n    var hashIndex1 = hashString.indexOf(\"#\");\n    var hashIndex2 = hashString.indexOf(\"#/\");\n\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Parses query string from given string. Returns empty string if no query symbol is found.\r\n   * @param queryString\r\n   */\n\n\n  UrlString.parseQueryString = function (queryString) {\n    var queryIndex1 = queryString.indexOf(\"?\");\n    var queryIndex2 = queryString.indexOf(\"/?\");\n\n    if (queryIndex2 > -1) {\n      return queryString.substring(queryIndex2 + 2);\n    } else if (queryIndex1 > -1) {\n      return queryString.substring(queryIndex1 + 1);\n    }\n\n    return Constants.EMPTY_STRING;\n  };\n\n  UrlString.constructAuthorityUriFromObject = function (urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  };\n  /**\r\n   * Returns URL hash as server auth code response object.\r\n   */\n\n\n  UrlString.getDeserializedHash = function (hash) {\n    // Check if given hash is empty\n    if (StringUtils.isEmpty(hash)) {\n      return {};\n    } // Strip the # symbol if present\n\n\n    var parsedHash = UrlString.parseHash(hash); // If # symbol was not present, above will return empty string, so give original hash value\n\n    var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash); // Check if deserialization didn't work\n\n    if (!deserializedHash) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n\n    return deserializedHash;\n  };\n  /**\r\n   * Returns URL query string as server auth code response object.\r\n   */\n\n\n  UrlString.getDeserializedQueryString = function (query) {\n    // Check if given query is empty\n    if (StringUtils.isEmpty(query)) {\n      return {};\n    } // Strip the ? symbol if present\n\n\n    var parsedQueryString = UrlString.parseQueryString(query); // If ? symbol was not present, above will return empty string, so give original query value\n\n    var deserializedQueryString = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString); // Check if deserialization didn't work\n\n    if (!deserializedQueryString) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\n    }\n\n    return deserializedQueryString;\n  };\n  /**\r\n   * Check if the hash of the URL string contains known properties\r\n   */\n\n\n  UrlString.hashContainsKnownProperties = function (hash) {\n    if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\n      // Hash doesn't contain key/value pairs\n      return false;\n    }\n\n    var parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  };\n\n  return UrlString;\n}();\n\nexport { UrlString };","map":{"version":3,"names":["ClientConfigurationError","ClientAuthError","StringUtils","AADAuthorityConstants","Constants","UrlString","url","_urlString","isEmpty","createUrlEmptyError","getHash","canonicalizeUri","Object","defineProperty","prototype","get","enumerable","configurable","lowerCaseUrl","toLowerCase","endsWith","slice","validateAsUri","components","getUrlComponents","e","createUrlParseError","HostNameAndPort","PathSegments","urlString","Protocol","createInsecureAuthorityUriError","appendQueryString","queryString","indexOf","removeHashFromUrl","split","replaceTenantPath","tenantId","urlObject","pathArray","length","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","RegExp","match","urlComponents","AbsolutePath","QueryString","pathSegments","filter","val","substring","getDomainFromUrl","getAbsoluteUrl","relativeUrl","baseUrl","FORWARD_SLASH","baseComponents","hashString","hashIndex1","hashIndex2","EMPTY_STRING","parseQueryString","queryIndex1","queryIndex2","join","getDeserializedHash","hash","parsedHash","deserializedHash","queryStringToObject","createHashNotDeserializedError","JSON","stringify","getDeserializedQueryString","query","parsedQueryString","deserializedQueryString","hashContainsKnownProperties","parameters","code","error_description","error","state"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/url/UrlString.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nvar UrlString = /** @class */ (function () {\r\n    function UrlString(url) {\r\n        this._urlString = url;\r\n        if (StringUtils.isEmpty(this._urlString)) {\r\n            // Throws error if url is empty\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        if (StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    Object.defineProperty(UrlString.prototype, \"urlString\", {\r\n        get: function () {\r\n            return this._urlString;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    UrlString.canonicalizeUri = function (url) {\r\n        if (url) {\r\n            var lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    UrlString.prototype.validateAsUri = function () {\r\n        // Attempts to parse url for uri components\r\n        var components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n    };\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    UrlString.appendQueryString = function (url, queryString) {\r\n        if (StringUtils.isEmpty(queryString)) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\r\n    };\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    UrlString.removeHashFromUrl = function (url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlString.prototype.replaceTenantPath = function (tenantId) {\r\n        var urlObject = this.getUrlComponents();\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    };\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlString.prototype.getHash = function () {\r\n        return UrlString.parseHash(this.urlString);\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlString.prototype.getUrlComponents = function () {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        var match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Url component object\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    };\r\n    UrlString.getDomainFromUrl = function (url) {\r\n        var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        var match = url.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\r\n        }\r\n        return match[2];\r\n    };\r\n    UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            var url = new UrlString(baseUrl);\r\n            var baseComponents = url.getUrlComponents();\r\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\r\n        }\r\n        return relativeUrl;\r\n    };\r\n    /**\r\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n     * @param hashString\r\n     */\r\n    UrlString.parseHash = function (hashString) {\r\n        var hashIndex1 = hashString.indexOf(\"#\");\r\n        var hashIndex2 = hashString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return hashString.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return hashString.substring(hashIndex1 + 1);\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    };\r\n    /**\r\n     * Parses query string from given string. Returns empty string if no query symbol is found.\r\n     * @param queryString\r\n     */\r\n    UrlString.parseQueryString = function (queryString) {\r\n        var queryIndex1 = queryString.indexOf(\"?\");\r\n        var queryIndex2 = queryString.indexOf(\"/?\");\r\n        if (queryIndex2 > -1) {\r\n            return queryString.substring(queryIndex2 + 2);\r\n        }\r\n        else if (queryIndex1 > -1) {\r\n            return queryString.substring(queryIndex1 + 1);\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    };\r\n    UrlString.constructAuthorityUriFromObject = function (urlObject) {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    };\r\n    /**\r\n     * Returns URL hash as server auth code response object.\r\n     */\r\n    UrlString.getDeserializedHash = function (hash) {\r\n        // Check if given hash is empty\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return {};\r\n        }\r\n        // Strip the # symbol if present\r\n        var parsedHash = UrlString.parseHash(hash);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    };\r\n    /**\r\n     * Returns URL query string as server auth code response object.\r\n     */\r\n    UrlString.getDeserializedQueryString = function (query) {\r\n        // Check if given query is empty\r\n        if (StringUtils.isEmpty(query)) {\r\n            return {};\r\n        }\r\n        // Strip the ? symbol if present\r\n        var parsedQueryString = UrlString.parseQueryString(query);\r\n        // If ? symbol was not present, above will return empty string, so give original query value\r\n        var deserializedQueryString = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedQueryString) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\r\n        }\r\n        return deserializedQueryString;\r\n    };\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    UrlString.hashContainsKnownProperties = function (hash) {\r\n        if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\r\n            // Hash doesn't contain key/value pairs\r\n            return false;\r\n        }\r\n        var parameters = UrlString.getDeserializedHash(hash);\r\n        return !!(parameters.code ||\r\n            parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state);\r\n    };\r\n    return UrlString;\r\n}());\n\nexport { UrlString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}