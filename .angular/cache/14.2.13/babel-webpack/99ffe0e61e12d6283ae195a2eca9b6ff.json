{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\n\nvar TimeUtils =\n/** @class */\nfunction () {\n  function TimeUtils() {}\n  /**\r\n   * return the current time in Unix time (seconds).\r\n   */\n\n\n  TimeUtils.nowSeconds = function () {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n  };\n  /**\r\n   * check if a token is expired based on given UTC time in seconds.\r\n   * @param expiresOn\r\n   */\n\n\n  TimeUtils.isTokenExpired = function (expiresOn, offset) {\n    // check for access token expiry\n    var expirationSec = Number(expiresOn) || 0;\n    var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset; // If current time + offset is greater than token expiration time, then token is expired.\n\n    return offsetCurrentTimeSec > expirationSec;\n  };\n  /**\r\n   * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n   * i.e. The system clock was turned back after acquiring the cached token\r\n   * @param cachedAt\r\n   * @param offset\r\n   */\n\n\n  TimeUtils.wasClockTurnedBack = function (cachedAt) {\n    var cachedAtSec = Number(cachedAt);\n    return cachedAtSec > TimeUtils.nowSeconds();\n  };\n  /**\r\n   * Waits for t number of milliseconds\r\n   * @param t number\r\n   * @param value T\r\n   */\n\n\n  TimeUtils.delay = function (t, value) {\n    return new Promise(function (resolve) {\n      return setTimeout(function () {\n        return resolve(value);\n      }, t);\n    });\n  };\n\n  return TimeUtils;\n}();\n\nexport { TimeUtils };","map":{"version":3,"names":["TimeUtils","nowSeconds","Math","round","Date","getTime","isTokenExpired","expiresOn","offset","expirationSec","Number","offsetCurrentTimeSec","wasClockTurnedBack","cachedAt","cachedAtSec","delay","t","value","Promise","resolve","setTimeout"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/utils/TimeUtils.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\r\nvar TimeUtils = /** @class */ (function () {\r\n    function TimeUtils() {\r\n    }\r\n    /**\r\n     * return the current time in Unix time (seconds).\r\n     */\r\n    TimeUtils.nowSeconds = function () {\r\n        // Date.getTime() returns in milliseconds.\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    };\r\n    /**\r\n     * check if a token is expired based on given UTC time in seconds.\r\n     * @param expiresOn\r\n     */\r\n    TimeUtils.isTokenExpired = function (expiresOn, offset) {\r\n        // check for access token expiry\r\n        var expirationSec = Number(expiresOn) || 0;\r\n        var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\r\n        // If current time + offset is greater than token expiration time, then token is expired.\r\n        return (offsetCurrentTimeSec > expirationSec);\r\n    };\r\n    /**\r\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n     * i.e. The system clock was turned back after acquiring the cached token\r\n     * @param cachedAt\r\n     * @param offset\r\n     */\r\n    TimeUtils.wasClockTurnedBack = function (cachedAt) {\r\n        var cachedAtSec = Number(cachedAt);\r\n        return cachedAtSec > TimeUtils.nowSeconds();\r\n    };\r\n    /**\r\n     * Waits for t number of milliseconds\r\n     * @param t number\r\n     * @param value T\r\n     */\r\n    TimeUtils.delay = function (t, value) {\r\n        return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });\r\n    };\r\n    return TimeUtils;\r\n}());\n\nexport { TimeUtils };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIA,SAAS;AAAG;AAAe,YAAY;EACvC,SAASA,SAAT,GAAqB,CACpB;EACD;AACJ;AACA;;;EACIA,SAAS,CAACC,UAAV,GAAuB,YAAY;IAC/B;IACA,OAAOC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,MAAlC,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACIL,SAAS,CAACM,cAAV,GAA2B,UAAUC,SAAV,EAAqBC,MAArB,EAA6B;IACpD;IACA,IAAIC,aAAa,GAAGC,MAAM,CAACH,SAAD,CAAN,IAAqB,CAAzC;IACA,IAAII,oBAAoB,GAAGX,SAAS,CAACC,UAAV,KAAyBO,MAApD,CAHoD,CAIpD;;IACA,OAAQG,oBAAoB,GAAGF,aAA/B;EACH,CAND;EAOA;AACJ;AACA;AACA;AACA;AACA;;;EACIT,SAAS,CAACY,kBAAV,GAA+B,UAAUC,QAAV,EAAoB;IAC/C,IAAIC,WAAW,GAAGJ,MAAM,CAACG,QAAD,CAAxB;IACA,OAAOC,WAAW,GAAGd,SAAS,CAACC,UAAV,EAArB;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;;;EACID,SAAS,CAACe,KAAV,GAAkB,UAAUC,CAAV,EAAaC,KAAb,EAAoB;IAClC,OAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;MAAE,OAAOC,UAAU,CAAC,YAAY;QAAE,OAAOD,OAAO,CAACF,KAAD,CAAd;MAAwB,CAAvC,EAAyCD,CAAzC,CAAjB;IAA+D,CAAhG,CAAP;EACH,CAFD;;EAGA,OAAOhB,SAAP;AACH,CAxC8B,EAA/B;;AA0CA,SAASA,SAAT"},"metadata":{},"sourceType":"module"}