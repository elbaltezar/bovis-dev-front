{"ast":null,"code":"/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceClient =\n/** @class */\nfunction (_super) {\n  __extends(BrowserPerformanceClient, _super);\n\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n\n    _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n\n  BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\n    var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    var incompleteMeasurements = [];\n\n    if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\n      rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\n        incompleteMeasurements.push(__assign({}, subMeasurement));\n      });\n    } // Clean up remaining marks for incomplete sub-measurements\n\n\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  };\n\n  BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n\n\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this; // Capture page visibilityState and then invoke start/end measurement\n\n\n    var startPageVisibility = this.getPageVisibility();\n\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        var res = inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n        return res;\n      },\n      discardMeasurement: function () {\n        inProgressEvent.discardMeasurement();\n\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    });\n  };\n  /**\r\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @returns\r\n   */\n\n\n  BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\n      return;\n    }\n\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\n      return;\n    }\n\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\r\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n     */\n\n    if (preQueueEvent) {\n      this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  };\n  /**\r\n   * Calculates and adds queue time measurement for given performance event.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n\n\n  BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\n      return;\n    }\n\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\n      return;\n    }\n\n    var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\n\n    if (!preQueueTime) {\n      return;\n    }\n\n    var currentTime = window.performance.now();\n\n    var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\n\n    return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\n  };\n\n  return BrowserPerformanceClient;\n}(PerformanceClient);\n\nexport { BrowserPerformanceClient };","map":{"version":3,"names":["__extends","__assign","PerformanceClient","BrowserCrypto","GuidGenerator","BrowserPerformanceMeasurement","BrowserPerformanceClient","_super","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","cryptoOptions","_this","call","browserCrypto","guidGenerator","prototype","startPerformanceMeasuremeant","measureName","correlationId","generateId","generateGuid","getPageVisibility","_a","document","visibilityState","toString","deleteIncompleteSubMeasurements","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","length","flushMeasurements","supportsBrowserPerformanceNow","window","performance","now","startMeasurement","startPageVisibility","endMeasurement","res","endPageVisibility","discardMeasurement","measurement","flushMeasurement","setPreQueueTime","eventName","trace","preQueueEvent","preQueueTimeByCorrelationId","name","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-browser/dist/telemetry/BrowserPerformanceClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.38.3 2023-10-27 */\n'use strict';\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar BrowserPerformanceClient = /** @class */ (function (_super) {\r\n    __extends(BrowserPerformanceClient, _super);\r\n    function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\r\n        var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\r\n        _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\r\n        _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\r\n        return _this;\r\n    }\r\n    BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\r\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\r\n    };\r\n    BrowserPerformanceClient.prototype.generateId = function () {\r\n        return this.guidGenerator.generateGuid();\r\n    };\r\n    BrowserPerformanceClient.prototype.getPageVisibility = function () {\r\n        var _a;\r\n        return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\r\n    };\r\n    BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\r\n        var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\r\n        var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\r\n        var incompleteMeasurements = [];\r\n        if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\r\n            rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\r\n                incompleteMeasurements.push(__assign({}, subMeasurement));\r\n            });\r\n        }\r\n        // Clean up remaining marks for incomplete sub-measurements\r\n        if (incompleteMeasurements.length > 0) {\r\n            BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\r\n        }\r\n    };\r\n    BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.now === \"function\";\r\n    };\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     * Also captures browser page visibilityState.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n     */\r\n    BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\r\n        var _this = this;\r\n        // Capture page visibilityState and then invoke start/end measurement\r\n        var startPageVisibility = this.getPageVisibility();\r\n        var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\r\n        return __assign(__assign({}, inProgressEvent), { endMeasurement: function (event) {\r\n                var res = inProgressEvent.endMeasurement(__assign({ startPageVisibility: startPageVisibility, endPageVisibility: _this.getPageVisibility() }, event));\r\n                _this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n                return res;\r\n            }, discardMeasurement: function () {\r\n                inProgressEvent.discardMeasurement();\r\n                _this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n                inProgressEvent.measurement.flushMeasurement();\r\n            } });\r\n    };\r\n    /**\r\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @returns\r\n     */\r\n    BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\r\n            return;\r\n        }\r\n        if (!correlationId) {\r\n            this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\r\n            return;\r\n        }\r\n        var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\r\n        /**\r\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n         */\r\n        if (preQueueEvent) {\r\n            this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\r\n            this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\r\n        }\r\n        this.preQueueTimeByCorrelationId.set(correlationId, { name: eventName, time: window.performance.now() });\r\n    };\r\n    /**\r\n     * Calculates and adds queue time measurement for given performance event.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\r\n            return;\r\n        }\r\n        if (!correlationId) {\r\n            this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\r\n            return;\r\n        }\r\n        var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\r\n        if (!preQueueTime) {\r\n            return;\r\n        }\r\n        var currentTime = window.performance.now();\r\n        var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\r\n        return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\r\n    };\r\n    return BrowserPerformanceClient;\r\n}(PerformanceClient));\n\nexport { BrowserPerformanceClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}