{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n */\n\nvar AccountEntity =\n/** @class */\nfunction () {\n  function AccountEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n\n\n  AccountEntity.prototype.generateAccountId = function () {\n    var accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n\n\n  AccountEntity.prototype.generateAccountKey = function () {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  };\n  /**\r\n   * returns the type of the cache (in this case account)\r\n   */\n\n\n  AccountEntity.prototype.generateType = function () {\n    switch (this.authorityType) {\n      case CacheAccountType.ADFS_ACCOUNT_TYPE:\n        return CacheType.ADFS;\n\n      case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n        return CacheType.MSA;\n\n      case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n        return CacheType.MSSTS;\n\n      case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n        return CacheType.GENERIC;\n\n      default:\n        {\n          throw ClientAuthError.createUnexpectedAccountTypeError();\n        }\n    }\n  };\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n\n\n  AccountEntity.prototype.getAccountInfo = function () {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims,\n      nativeAccountId: this.nativeAccountId\n    };\n  };\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n\n\n  AccountEntity.generateAccountCacheKey = function (accountInterface) {\n    var accountKey = [accountInterface.homeAccountId, accountInterface.environment || Constants.EMPTY_STRING, accountInterface.tenantId || Constants.EMPTY_STRING];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param clientInfo\r\n   * @param authority\r\n   * @param idToken\r\n   * @param policy\r\n   */\n\n\n  AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment, nativeAccountId) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var account = new AccountEntity();\n    account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    account.clientInfo = clientInfo;\n    account.homeAccountId = homeAccountId;\n    account.nativeAccountId = nativeAccountId;\n    var env = environment || authority && authority.getPreferredCache();\n\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n\n    account.environment = env; // non AAD scenarios can have empty realm\n\n    account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || Constants.EMPTY_STRING;\n\n    if (idToken) {\n      account.idTokenClaims = idToken.claims; // How do you account for MSA CID here?\n\n      account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || Constants.EMPTY_STRING;\n      /*\r\n       * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n       * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n       * policy is configured to return more than 1 email.\r\n       */\n\n      var preferredUsername = (_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username;\n      var email = ((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : null;\n      account.username = preferredUsername || email || Constants.EMPTY_STRING;\n      account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\n    }\n\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  };\n  /**\r\n   * Builds non-AAD/ADFS account.\r\n   * @param authority\r\n   * @param idToken\r\n   */\n\n\n  AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment) {\n    var _a, _b, _c, _d;\n\n    var account = new AccountEntity();\n    account.authorityType = authority && authority.authorityType === AuthorityType.Adfs ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = homeAccountId; // non AAD scenarios can have empty realm\n\n    account.realm = Constants.EMPTY_STRING;\n    var env = environment || authority && authority.getPreferredCache();\n\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n\n    if (idToken) {\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || Constants.EMPTY_STRING; // upn claim for most ADFS scenarios\n\n      account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || Constants.EMPTY_STRING;\n      account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || Constants.EMPTY_STRING;\n      account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\n    }\n\n    account.environment = env;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    /*\r\n     * add uniqueName to claims\r\n     * account.name = idToken.claims.uniqueName;\r\n     */\n\n    return account;\n  };\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n\n\n  AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\n    var _a;\n\n    var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING; // since ADFS does not have tid and does not set client_info\n\n    if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\n      return accountId;\n    } // for cases where there is clientInfo\n\n\n    if (serverClientInfo) {\n      try {\n        var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n\n        if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n          return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\n        }\n      } catch (e) {}\n    } // default to \"sub\" claim\n\n\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  AccountEntity.isAccountEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  };\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n\n\n  AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n\n    var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n\n    if (compareClaims) {\n      var accountAClaims = accountA.idTokenClaims || {};\n      var accountBClaims = accountB.idTokenClaims || {}; // issued at timestamp and nonce are expected to change each time a new id token is acquired\n\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n  };\n\n  return AccountEntity;\n}();\n\nexport { AccountEntity };","map":{"version":3,"names":["Separators","CacheAccountType","CacheType","Constants","buildClientInfo","StringUtils","ClientAuthError","AuthorityType","AccountEntity","prototype","generateAccountId","accountId","homeAccountId","environment","join","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","generateType","authorityType","ADFS_ACCOUNT_TYPE","ADFS","MSAV1_ACCOUNT_TYPE","MSA","MSSTS_ACCOUNT_TYPE","MSSTS","GENERIC_ACCOUNT_TYPE","GENERIC","createUnexpectedAccountTypeError","getAccountInfo","name","idTokenClaims","nativeAccountId","accountInterface","accountKey","EMPTY_STRING","createAccount","clientInfo","idToken","authority","cloudGraphHostName","msGraphHost","_a","_b","_c","_d","_e","_f","account","env","getPreferredCache","createInvalidCacheEnvironmentError","claims","tid","oid","sub","preferredUsername","preferred_username","email","emails","createGenericAccount","Adfs","upn","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","Dsts","isEmpty","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n */\r\nvar AccountEntity = /** @class */ (function () {\r\n    function AccountEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    AccountEntity.prototype.generateAccountId = function () {\r\n        var accountId = [this.homeAccountId, this.environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */\r\n    AccountEntity.prototype.generateAccountKey = function () {\r\n        return AccountEntity.generateAccountCacheKey({\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId\r\n        });\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case account)\r\n     */\r\n    AccountEntity.prototype.generateType = function () {\r\n        switch (this.authorityType) {\r\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\r\n                return CacheType.ADFS;\r\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\r\n                return CacheType.MSA;\r\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\r\n                return CacheType.MSSTS;\r\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\r\n                return CacheType.GENERIC;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedAccountTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    AccountEntity.prototype.getAccountInfo = function () {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            name: this.name,\r\n            idTokenClaims: this.idTokenClaims,\r\n            nativeAccountId: this.nativeAccountId\r\n        };\r\n    };\r\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */\r\n    AccountEntity.generateAccountCacheKey = function (accountInterface) {\r\n        var accountKey = [\r\n            accountInterface.homeAccountId,\r\n            accountInterface.environment || Constants.EMPTY_STRING,\r\n            accountInterface.tenantId || Constants.EMPTY_STRING,\r\n        ];\r\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param clientInfo\r\n     * @param authority\r\n     * @param idToken\r\n     * @param policy\r\n     */\r\n    AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment, nativeAccountId) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var account = new AccountEntity();\r\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        account.clientInfo = clientInfo;\r\n        account.homeAccountId = homeAccountId;\r\n        account.nativeAccountId = nativeAccountId;\r\n        var env = environment || (authority && authority.getPreferredCache());\r\n        if (!env) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || Constants.EMPTY_STRING;\r\n        if (idToken) {\r\n            account.idTokenClaims = idToken.claims;\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || Constants.EMPTY_STRING;\r\n            /*\r\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n             * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n             * policy is configured to return more than 1 email.\r\n             */\r\n            var preferredUsername = (_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username;\r\n            var email = ((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : null;\r\n            account.username = preferredUsername || email || Constants.EMPTY_STRING;\r\n            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\r\n        }\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        return account;\r\n    };\r\n    /**\r\n     * Builds non-AAD/ADFS account.\r\n     * @param authority\r\n     * @param idToken\r\n     */\r\n    AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment) {\r\n        var _a, _b, _c, _d;\r\n        var account = new AccountEntity();\r\n        account.authorityType = (authority &&\r\n            authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = homeAccountId;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = Constants.EMPTY_STRING;\r\n        var env = environment || authority && authority.getPreferredCache();\r\n        if (!env) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        if (idToken) {\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || Constants.EMPTY_STRING;\r\n            // upn claim for most ADFS scenarios\r\n            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || Constants.EMPTY_STRING;\r\n            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || Constants.EMPTY_STRING;\r\n            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\r\n        }\r\n        account.environment = env;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        /*\r\n         * add uniqueName to claims\r\n         * account.name = idToken.claims.uniqueName;\r\n         */\r\n        return account;\r\n    };\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\r\n        var _a;\r\n        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;\r\n        // since ADFS does not have tid and does not set client_info\r\n        if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\r\n            return accountId;\r\n        }\r\n        // for cases where there is clientInfo\r\n        if (serverClientInfo) {\r\n            try {\r\n                var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\r\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\r\n                    return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\r\n                }\r\n            }\r\n            catch (e) { }\r\n        }\r\n        // default to \"sub\" claim\r\n        logger.verbose(\"No client info in response\");\r\n        return accountId;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccountEntity.isAccountEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    };\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            var accountAClaims = (accountA.idTokenClaims || {});\r\n            var accountBClaims = (accountB.idTokenClaims || {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\r\n                (accountAClaims.nonce === accountBClaims.nonce);\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId) &&\r\n            (accountA.localAccountId === accountB.localAccountId) &&\r\n            (accountA.username === accountB.username) &&\r\n            (accountA.tenantId === accountB.tenantId) &&\r\n            (accountA.environment === accountB.environment) &&\r\n            (accountA.nativeAccountId === accountB.nativeAccountId) &&\r\n            claimsMatch;\r\n    };\r\n    return AccountEntity;\r\n}());\n\nexport { AccountEntity };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}