{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\n\nvar AuthToken =\n/** @class */\nfunction () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n\n\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils.decodeAuthToken(encodedToken); // token will be decoded to get the username\n\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload; // base64Decode() should throw an error if there is an issue\n\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  };\n  /**\r\n   * Determine if the token's max_age has transpired\r\n   */\n\n\n  AuthToken.checkMaxAge = function (authTime, maxAge) {\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */\n    var fiveMinuteSkew = 300000; // five minutes in milliseconds\n\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n      throw ClientAuthError.createMaxAgeTranspiredError();\n    }\n  };\n\n  return AuthToken;\n}();\n\nexport { AuthToken };","map":{"version":3,"names":["ClientAuthError","StringUtils","AuthToken","rawToken","crypto","isEmpty","createTokenNullOrEmptyError","claims","extractTokenClaims","encodedToken","decodedToken","decodeAuthToken","base64TokenPayload","JWSPayload","base64Decoded","base64Decode","JSON","parse","err","createTokenParsingError","checkMaxAge","authTime","maxAge","fiveMinuteSkew","Date","now","createMaxAgeTranspiredError"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/account/AuthToken.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\r\nvar AuthToken = /** @class */ (function () {\r\n    function AuthToken(rawToken, crypto) {\r\n        if (StringUtils.isEmpty(rawToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\r\n        }\r\n        this.rawToken = rawToken;\r\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\r\n    }\r\n    /**\r\n     * Extract token by decoding the rawToken\r\n     *\r\n     * @param encodedToken\r\n     */\r\n    AuthToken.extractTokenClaims = function (encodedToken, crypto) {\r\n        var decodedToken = StringUtils.decodeAuthToken(encodedToken);\r\n        // token will be decoded to get the username\r\n        try {\r\n            var base64TokenPayload = decodedToken.JWSPayload;\r\n            // base64Decode() should throw an error if there is an issue\r\n            var base64Decoded = crypto.base64Decode(base64TokenPayload);\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            throw ClientAuthError.createTokenParsingError(err);\r\n        }\r\n    };\r\n    /**\r\n     * Determine if the token's max_age has transpired\r\n     */\r\n    AuthToken.checkMaxAge = function (authTime, maxAge) {\r\n        /*\r\n         * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n         * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n         * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n         */\r\n        var fiveMinuteSkew = 300000; // five minutes in milliseconds\r\n        if ((maxAge === 0) || ((Date.now() - fiveMinuteSkew) > (authTime + maxAge))) {\r\n            throw ClientAuthError.createMaxAgeTranspiredError();\r\n        }\r\n    };\r\n    return AuthToken;\r\n}());\n\nexport { AuthToken };\n"],"mappings":"AAAA;AACA;;AACA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIC,SAAS;AAAG;AAAe,YAAY;EACvC,SAASA,SAAT,CAAmBC,QAAnB,EAA6BC,MAA7B,EAAqC;IACjC,IAAIH,WAAW,CAACI,OAAZ,CAAoBF,QAApB,CAAJ,EAAmC;MAC/B,MAAMH,eAAe,CAACM,2BAAhB,CAA4CH,QAA5C,CAAN;IACH;;IACD,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKI,MAAL,GAAcL,SAAS,CAACM,kBAAV,CAA6BL,QAA7B,EAAuCC,MAAvC,CAAd;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIF,SAAS,CAACM,kBAAV,GAA+B,UAAUC,YAAV,EAAwBL,MAAxB,EAAgC;IAC3D,IAAIM,YAAY,GAAGT,WAAW,CAACU,eAAZ,CAA4BF,YAA5B,CAAnB,CAD2D,CAE3D;;IACA,IAAI;MACA,IAAIG,kBAAkB,GAAGF,YAAY,CAACG,UAAtC,CADA,CAEA;;MACA,IAAIC,aAAa,GAAGV,MAAM,CAACW,YAAP,CAAoBH,kBAApB,CAApB;MACA,OAAOI,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAP;IACH,CALD,CAMA,OAAOI,GAAP,EAAY;MACR,MAAMlB,eAAe,CAACmB,uBAAhB,CAAwCD,GAAxC,CAAN;IACH;EACJ,CAZD;EAaA;AACJ;AACA;;;EACIhB,SAAS,CAACkB,WAAV,GAAwB,UAAUC,QAAV,EAAoBC,MAApB,EAA4B;IAChD;AACR;AACA;AACA;AACA;IACQ,IAAIC,cAAc,GAAG,MAArB,CANgD,CAMnB;;IAC7B,IAAKD,MAAM,KAAK,CAAZ,IAAoBE,IAAI,CAACC,GAAL,KAAaF,cAAd,GAAiCF,QAAQ,GAAGC,MAAnE,EAA6E;MACzE,MAAMtB,eAAe,CAAC0B,2BAAhB,EAAN;IACH;EACJ,CAVD;;EAWA,OAAOxB,SAAP;AACH,CAzC8B,EAA/B;;AA2CA,SAASA,SAAT"},"metadata":{},"sourceType":"module"}