{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\n\nvar CredentialEntity =\n/** @class */\nfunction () {\n  function CredentialEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n\n\n  CredentialEntity.prototype.generateAccountId = function () {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  };\n  /**\r\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n   */\n\n\n  CredentialEntity.prototype.generateCredentialId = function () {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n\n\n  CredentialEntity.prototype.generateTarget = function () {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  };\n  /**\r\n   * generates credential key\r\n   */\n\n\n  CredentialEntity.prototype.generateCredentialKey = function () {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\n  };\n  /**\r\n   * returns the type of the cache (in this case credential)\r\n   */\n\n\n  CredentialEntity.prototype.generateType = function () {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        return CacheType.ACCESS_TOKEN;\n\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n\n      default:\n        {\n          throw ClientAuthError.createUnexpectedCredentialTypeError();\n        }\n    }\n  };\n  /**\r\n   * generates credential key\r\n   * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n   */\n\n\n  CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\n    var credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target), this.generateClaimsHashForCacheKey(requestedClaimsHash), this.generateSchemeForCacheKey(tokenType)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * generates Account Id for keys\r\n   * @param homeAccountId\r\n   * @param environment\r\n   */\n\n\n  CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\n    var accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generates Credential Id for keys\r\n   * @param credentialType\r\n   * @param realm\r\n   * @param clientId\r\n   * @param familyId\r\n   */\n\n\n  CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\n    var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    var credentialId = [credentialType, clientOrFamilyId, realm || Constants.EMPTY_STRING];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n\n\n  CredentialEntity.generateTargetForCacheKey = function (scopes) {\n    return (scopes || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate requested claims key component as per schema: <requestedClaims>\r\n   */\n\n\n  CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {\n    return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate scheme key componenet as per schema: <scheme>\r\n   */\n\n\n  CredentialEntity.generateSchemeForCacheKey = function (tokenType) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    return tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\n  };\n\n  return CredentialEntity;\n}();\n\nexport { CredentialEntity };","map":{"version":3,"names":["CredentialType","CacheType","Separators","Constants","AuthenticationScheme","ClientAuthError","CredentialEntity","prototype","generateAccountId","generateAccountIdForCacheKey","homeAccountId","environment","generateCredentialId","generateCredentialIdForCacheKey","credentialType","clientId","realm","familyId","generateTarget","generateTargetForCacheKey","target","generateCredentialKey","generateCredentialCacheKey","tokenType","requestedClaimsHash","generateType","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","createUnexpectedCredentialTypeError","credentialKey","generateClaimsHashForCacheKey","generateSchemeForCacheKey","join","CACHE_KEY_SEPARATOR","toLowerCase","accountId","clientOrFamilyId","credentialId","EMPTY_STRING","scopes","BEARER"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\r\nvar CredentialEntity = /** @class */ (function () {\r\n    function CredentialEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    CredentialEntity.prototype.generateAccountId = function () {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    };\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    CredentialEntity.prototype.generateCredentialId = function () {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.prototype.generateTarget = function () {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    };\r\n    /**\r\n     * generates credential key\r\n     */\r\n    CredentialEntity.prototype.generateCredentialKey = function () {\r\n        return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    CredentialEntity.prototype.generateType = function () {\r\n        switch (this.credentialType) {\r\n            case CredentialType.ID_TOKEN:\r\n                return CacheType.ID_TOKEN;\r\n            case CredentialType.ACCESS_TOKEN:\r\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                return CacheType.ACCESS_TOKEN;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                return CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * generates credential key\r\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n     */\r\n    CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\r\n        var credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n            this.generateClaimsHashForCacheKey(requestedClaimsHash),\r\n            this.generateSchemeForCacheKey(tokenType)\r\n        ];\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\r\n        var accountId = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\r\n        var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN\r\n            ? familyId || clientId\r\n            : clientId;\r\n        var credentialId = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || Constants.EMPTY_STRING,\r\n        ];\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.generateTargetForCacheKey = function (scopes) {\r\n        return (scopes || Constants.EMPTY_STRING).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate requested claims key component as per schema: <requestedClaims>\r\n     */\r\n    CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {\r\n        return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate scheme key componenet as per schema: <scheme>\r\n     */\r\n    CredentialEntity.generateSchemeForCacheKey = function (tokenType) {\r\n        /*\r\n         * PoP Tokens and SSH certs include scheme in cache key\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        return (tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\r\n    };\r\n    return CredentialEntity;\r\n}());\n\nexport { CredentialEntity };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}