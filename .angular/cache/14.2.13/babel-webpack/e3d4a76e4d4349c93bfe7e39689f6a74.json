{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants, Separators } from '../../utils/Constants.js';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ServerTelemetryManager =\n/** @class */\nfunction () {\n  function ServerTelemetryManager(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\r\n   * API to add MSER Telemetry to request\r\n   */\n\n\n  ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\n    var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\n    var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var regionDiscoveryFields = this.getRegionDiscoveryFields();\n    var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to add MSER Telemetry for the last failed request\r\n   */\n\n\n  ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\n    var lastRequests = this.getLastRequests();\n    var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errorCount = lastRequests.errors.length; // Indicate whether this header contains all data or partial data\n\n    var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to cache token failures for MSER data capture\r\n   * @param error\r\n   */\n\n\n  ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\n    var lastRequests = this.getLastRequests();\n\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n\n      lastRequests.failedRequests.shift(); // correlationId\n\n      lastRequests.errors.shift();\n    }\n\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n    if (!StringUtils.isEmpty(error.subError)) {\n      lastRequests.errors.push(error.subError);\n    } else if (!StringUtils.isEmpty(error.errorCode)) {\n      lastRequests.errors.push(error.errorCode);\n    } else if (!!error && error.toString()) {\n      lastRequests.errors.push(error.toString());\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  };\n  /**\r\n   * Update server telemetry cache entry by incrementing cache hit counter\r\n   */\n\n\n  ServerTelemetryManager.prototype.incrementCacheHits = function () {\n    var lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  };\n  /**\r\n   * Get the server telemetry entity from cache or initialize a new one\r\n   */\n\n\n  ServerTelemetryManager.prototype.getLastRequests = function () {\n    var initialValue = new ServerTelemetryEntity();\n    var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  };\n  /**\r\n   * Remove server telemetry cache entry\r\n   */\n\n\n  ServerTelemetryManager.prototype.clearTelemetryCache = function () {\n    var lastRequests = this.getLastRequests();\n    var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var errorCount = lastRequests.errors.length;\n\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      var serverTelemEntity = new ServerTelemetryEntity();\n      serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n\n      serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  };\n  /**\r\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n   * @param serverTelemetryEntity\r\n   */\n\n\n  ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\n    var i;\n    var maxErrors = 0;\n    var dataSize = 0;\n    var errorCount = serverTelemetryEntity.errors.length;\n\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING; // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n\n    return maxErrors;\n  };\n  /**\r\n   * Get the region discovery fields\r\n   *\r\n   * @returns string\r\n   */\n\n\n  ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\n    var regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  };\n  /**\r\n   * Update the region discovery metadata\r\n   *\r\n   * @param regionDiscoveryMetadata\r\n   * @returns void\r\n   */\n\n\n  ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  };\n  /**\r\n   * Set cache outcome\r\n   */\n\n\n  ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  };\n\n  return ServerTelemetryManager;\n}();\n\nexport { ServerTelemetryManager };","map":{"version":3,"names":["SERVER_TELEM_CONSTANTS","CacheOutcome","Constants","Separators","ServerTelemetryEntity","StringUtils","ServerTelemetryManager","telemetryRequest","cacheManager","cacheOutcome","NO_CACHE_HIT","apiId","correlationId","wrapperSKU","EMPTY_STRING","wrapperVer","telemetryCacheKey","CACHE_KEY","CACHE_KEY_SEPARATOR","clientId","prototype","generateCurrentRequestHeaderValue","request","VALUE_SEPARATOR","platformFields","join","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","generateLastRequestHeaderValue","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","length","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","cacheFailedRequest","error","MAX_CACHED_ERRORS","shift","push","isEmpty","subError","errorCode","toString","UNKNOWN_ERROR","setServerTelemetry","incrementCacheHits","initialValue","getServerTelemetry","clearTelemetryCache","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","updateRegionDiscoveryMetadata","regionDiscoveryMetadata","region_used","region_source","region_outcome","setCacheOutcome"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants, Separators } from '../../utils/Constants.js';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ServerTelemetryManager = /** @class */ (function () {\r\n    function ServerTelemetryManager(telemetryRequest, cacheManager) {\r\n        this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\r\n        var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\r\n        var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errorCount = lastRequests.errors.length;\r\n        // Indicate whether this header contains all data or partial data\r\n        var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\r\n        var lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n        if (!StringUtils.isEmpty(error.subError)) {\r\n            lastRequests.errors.push(error.subError);\r\n        }\r\n        else if (!StringUtils.isEmpty(error.errorCode)) {\r\n            lastRequests.errors.push(error.errorCode);\r\n        }\r\n        else if (!!error && error.toString()) {\r\n            lastRequests.errors.push(error.toString());\r\n        }\r\n        else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return;\r\n    };\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    ServerTelemetryManager.prototype.incrementCacheHits = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return lastRequests.cacheHits;\r\n    };\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    ServerTelemetryManager.prototype.getLastRequests = function () {\r\n        var initialValue = new ServerTelemetryEntity();\r\n        var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\r\n        return lastRequests || initialValue;\r\n    };\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    ServerTelemetryManager.prototype.clearTelemetryCache = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey);\r\n        }\r\n        else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            var serverTelemEntity = new ServerTelemetryEntity();\r\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\r\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\r\n        var i;\r\n        var maxErrors = 0;\r\n        var dataSize = 0;\r\n        var errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\r\n            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\r\n            var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return maxErrors;\r\n    };\r\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */\r\n    ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\r\n        var regionDiscoveryFields = [];\r\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\r\n        return regionDiscoveryFields.join(\",\");\r\n    };\r\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    };\r\n    /**\r\n     * Set cache outcome\r\n     */\r\n    ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\r\n        this.cacheOutcome = cacheOutcome;\r\n    };\r\n    return ServerTelemetryManager;\r\n}());\n\nexport { ServerTelemetryManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}