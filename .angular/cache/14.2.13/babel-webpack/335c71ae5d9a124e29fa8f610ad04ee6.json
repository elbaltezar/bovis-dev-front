{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\n\nvar AuthorizationCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(AuthorizationCodeClient, _super);\n\n  function AuthorizationCodeClient(configuration, performanceClient) {\n    var _this = _super.call(this, configuration, performanceClient) || this; // Flag to indicate if client is for hybrid spa auth code redemption\n\n\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeUrlQueryString(request)];\n\n          case 1:\n            queryString = _c.sent();\n            return [2\n            /*return*/\n            , UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    var _a, _b, _c, _d, _e, _f;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, requestId, httpVerAuthority, responseHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!request || !request.code) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in auth-code client\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _g.sent();\n            requestId = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_REQUEST_ID];\n            httpVerAuthority = (_e = response.headers) === null || _e === void 0 ? void 0 : _e[HeaderNames.X_MS_HTTP_VERSION];\n\n            if (httpVerAuthority) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerAuthority: httpVerAuthority\n              });\n            }\n\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\n\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n\n\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null); // Deserialize hash fragment response parameters.\n\n    var hashUrlString = new UrlString(hashFragment); // Deserialize hash fragment response parameters.\n\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash()); // Get code response\n\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils); // throw when there is no auth code in the response\n\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n\n    var queryString = this.createLogoutUrlQueryString(logoutRequest); // Construct logout URI\n\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, ccsCredential, clientInfo, headers, thumbprint;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _c.sent();\n            ccsCredential = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n\n      var _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            } // Add scope array, parameter builder will add default scopes and dedupe\n\n\n            parameterBuilder.addScopes(request.scopes); // add code: user set, not validated\n\n            parameterBuilder.addAuthorizationCode(request.code); // Add library metadata\n\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            } // add code_verifier if passed\n\n\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _d.sent(); // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n\n            _d.label = 3;\n\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            ccsCred = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            } // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n\n\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            } // Add hybrid spa parameters if not already provided\n\n\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_c = {}, _c[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _c));\n            }\n\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes); // validate the redirectUri (to be a non null value)\n\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId); // add response_mode. If not passed in it defaults to query.\n\n            parameterBuilder.addResponseMode(request.responseMode); // add response_type = code\n\n            parameterBuilder.addResponseTypeCode(); // add library info parameters\n\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application); // add client_info=1\n\n            parameterBuilder.addClientInfo();\n\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            } // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n\n\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account); // If login_hint claim is present, use it over sid/username\n\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n\n            if (!request.nativeBroker) return [3\n            /*break*/\n            , 2]; // signal ests that this is a WAM call\n\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _b.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            _b.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n\n\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n\n  return AuthorizationCodeClient;\n}(BaseClient);\n\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","__spreadArrays","BaseClient","RequestParameterBuilder","Separators","AADServerParamKeys","AuthenticationScheme","GrantType","PromptValue","HeaderNames","ResponseHandler","StringUtils","ClientAuthError","UrlString","PopTokenGenerator","TimeUtils","buildClientInfo","buildClientInfoFromHomeAccountId","CcsCredentialType","ClientConfigurationError","RequestValidator","PerformanceEvents","AuthorizationCodeClient","_super","configuration","performanceClient","_this","call","includeRedirectUri","prototype","getAuthCodeUrl","request","_a","_b","queryString","_c","label","addQueueMeasurement","GetAuthCodeUrl","correlationId","setPreQueueTime","AuthClientCreateQueryString","createAuthCodeUrlQueryString","sent","appendQueryString","authority","authorizationEndpoint","acquireToken","authCodePayload","_d","_e","_f","atsMeasurement","reqTimestamp","response","requestId","httpVerAuthority","responseHandler","_g","code","createTokenRequestCannotBeMadeError","AuthClientAcquireToken","startMeasurement","logger","info","nowSeconds","AuthClientExecuteTokenRequest","executeTokenRequest","headers","X_MS_REQUEST_ID","X_MS_HTTP_VERSION","addStaticFields","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","HandleServerTokenResponse","handleServerTokenResponse","undefined","then","result","endMeasurement","success","catch","error","verbose","errorCode","subErrorCode","subError","handleFragmentResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","getLogoutUri","logoutRequest","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","queryParametersString","endpoint","requestBody","ccsCredential","clientInfo","thumbprint","AuthClientCreateTokenRequestBody","createTokenQueryParameters","tokenEndpoint","createTokenRequestBody","credential","uid","CLIENT_INFO_SEPARATOR","utid","type","HOME_ACCOUNT_ID","e","createTokenRequestHeaders","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","clientAssertion","popTokenGenerator","reqCnfData","ccsCred","addClientId","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","POP","PopTokenGenerateCnf","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","addExtraQueryParameters","enableSpaAuthorizationCode","RETURN_SPA_CODE","createQueryString","requestScopes","accountSid","accountLoginHintClaim","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","SELECT_ACCOUNT","sid","NONE","addSid","account","extractAccountSid","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","isEmpty","extraQueryParameters","nativeBroker","addNativeBroker","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nvar AuthorizationCodeClient = /** @class */ (function (_super) {\r\n    __extends(AuthorizationCodeClient, _super);\r\n    function AuthorizationCodeClient(configuration, performanceClient) {\r\n        var _this = _super.call(this, configuration, performanceClient) || this;\r\n        // Flag to indicate if client is for hybrid spa auth code redemption\r\n        _this.includeRedirectUri = true;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\r\n                    case 1:\r\n                        queryString = _c.sent();\r\n                        return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var atsMeasurement, reqTimestamp, response, requestId, httpVerAuthority, responseHandler;\r\n            var _this = this;\r\n            return __generator(this, function (_g) {\r\n                switch (_g.label) {\r\n                    case 0:\r\n                        if (!request || !request.code) {\r\n                            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n                        }\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\r\n                        atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\r\n                        this.logger.info(\"in acquireToken call in auth-code client\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _g.sent();\r\n                        requestId = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_REQUEST_ID];\r\n                        httpVerAuthority = (_e = response.headers) === null || _e === void 0 ? void 0 : _e[HeaderNames.X_MS_HTTP_VERSION];\r\n                        if (httpVerAuthority) {\r\n                            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\r\n                                httpVerAuthority: httpVerAuthority\r\n                            });\r\n                        }\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\r\n                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(function (result) {\r\n                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\r\n                                    success: true\r\n                                });\r\n                                return result;\r\n                            })\r\n                                .catch(function (error) {\r\n                                _this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\r\n                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\r\n                                    errorCode: error.errorCode,\r\n                                    subErrorCode: error.subError,\r\n                                    success: false\r\n                                });\r\n                                throw error;\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\r\n        // Handle responses.\r\n        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n        // Deserialize hash fragment response parameters.\r\n        var hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return __assign(__assign({}, serverParams), { \r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code });\r\n    };\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        var queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, requestBody, ccsCredential, clientInfo, headers, thumbprint;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                        return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _c.sent();\r\n                        ccsCredential = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCredential = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\r\n            var _c;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        /*\r\n                         * For hybrid spa flow, there will be a code but no verifier\r\n                         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n                         */\r\n                        if (!this.includeRedirectUri) {\r\n                            // Just validate\r\n                            RequestValidator.validateRedirectUri(request.redirectUri);\r\n                        }\r\n                        else {\r\n                            // Validate and include redirect uri\r\n                            parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        }\r\n                        // Add scope array, parameter builder will add default scopes and dedupe\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        // add code: user set, not validated\r\n                        parameterBuilder.addAuthorizationCode(request.code);\r\n                        // Add library metadata\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        // add code_verifier if passed\r\n                        if (request.codeVerifier) {\r\n                            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n                        }\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        reqCnfData = _d.sent();\r\n                        // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n                        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n                            if (request.sshJwk) {\r\n                                parameterBuilder.addSshJwk(request.sshJwk);\r\n                            }\r\n                            else {\r\n                                throw ClientConfigurationError.createMissingSshJwkError();\r\n                            }\r\n                        }\r\n                        _d.label = 3;\r\n                    case 3:\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        ccsCred = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCred = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            ccsCred = request.ccsCredential;\r\n                        }\r\n                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n                            switch (ccsCred.type) {\r\n                                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        if (request.tokenBodyParameters) {\r\n                            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\r\n                        }\r\n                        // Add hybrid spa parameters if not already provided\r\n                        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\r\n                            parameterBuilder.addExtraQueryParameters((_c = {},\r\n                                _c[AADServerParamKeys.RETURN_SPA_CODE] = \"1\",\r\n                                _c));\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\r\n                        parameterBuilder.addScopes(requestScopes);\r\n                        // validate the redirectUri (to be a non null value)\r\n                        parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        // add response_mode. If not passed in it defaults to query.\r\n                        parameterBuilder.addResponseMode(request.responseMode);\r\n                        // add response_type = code\r\n                        parameterBuilder.addResponseTypeCode();\r\n                        // add library info parameters\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n                        // add client_info=1\r\n                        parameterBuilder.addClientInfo();\r\n                        if (request.codeChallenge && request.codeChallengeMethod) {\r\n                            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n                        }\r\n                        if (request.prompt) {\r\n                            parameterBuilder.addPrompt(request.prompt);\r\n                        }\r\n                        if (request.domainHint) {\r\n                            parameterBuilder.addDomainHint(request.domainHint);\r\n                        }\r\n                        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n                        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n                            // AAD will throw if prompt=select_account is passed with an account hint\r\n                            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                                // SessionID is only used in silent calls\r\n                                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                                parameterBuilder.addSid(request.sid);\r\n                            }\r\n                            else if (request.account) {\r\n                                accountSid = this.extractAccountSid(request.account);\r\n                                accountLoginHintClaim = this.extractLoginHint(request.account);\r\n                                // If login_hint claim is present, use it over sid/username\r\n                                if (accountLoginHintClaim) {\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                                    parameterBuilder.addLoginHint(accountLoginHintClaim);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                                else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                                    /*\r\n                                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                                     * SessionId is only used in silent calls\r\n                                     */\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                                    parameterBuilder.addSid(accountSid);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                                else if (request.loginHint) {\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                                    parameterBuilder.addLoginHint(request.loginHint);\r\n                                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                                }\r\n                                else if (request.account.username) {\r\n                                    // Fallback to account username if provided\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                                    parameterBuilder.addLoginHint(request.account.username);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (request.loginHint) {\r\n                                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                                parameterBuilder.addLoginHint(request.loginHint);\r\n                                parameterBuilder.addCcsUpn(request.loginHint);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n                        }\r\n                        if (request.nonce) {\r\n                            parameterBuilder.addNonce(request.nonce);\r\n                        }\r\n                        if (request.state) {\r\n                            parameterBuilder.addState(request.state);\r\n                        }\r\n                        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        if (request.extraQueryParameters) {\r\n                            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n                        }\r\n                        if (!request.nativeBroker) return [3 /*break*/, 2];\r\n                        // signal ests that this is a WAM call\r\n                        parameterBuilder.addNativeBroker();\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        reqCnfData = _b.sent();\r\n                        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n                        _b.label = 2;\r\n                    case 2: return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n        if (request.logoutHint) {\r\n            parameterBuilder.addLogoutHint(request.logoutHint);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\r\n        var _a;\r\n        return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\r\n    };\r\n    AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\r\n        var _a;\r\n        return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\r\n    };\r\n    return AuthorizationCodeClient;\r\n}(BaseClient));\n\nexport { AuthorizationCodeClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}