{"ast":null,"code":"/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ThrottlingUtils =\n/** @class */\nfunction () {\n  function ThrottlingUtils() {}\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\n    return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\n  };\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\n    var _a;\n\n    var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    var value = cacheManager.getThrottlingCache(key);\n\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n\n      throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  };\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      var thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  };\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseStatus = function (response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  };\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseForRetryAfter = function (response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n\n    return false;\n  };\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n\n\n  ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\n    var time = throttleTime <= 0 ? 0 : throttleTime;\n    var currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  };\n\n  ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\n    var thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    var key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  };\n\n  return ThrottlingUtils;\n}();\n\nexport { ThrottlingUtils };","map":{"version":3,"names":["ThrottlingConstants","Constants","HeaderNames","ServerError","ThrottlingUtils","generateThrottlingStorageKey","thumbprint","THROTTLING_PREFIX","JSON","stringify","preProcess","cacheManager","_a","key","value","getThrottlingCache","throttleTime","Date","now","removeItem","errorCodes","join","EMPTY_STRING","errorMessage","subError","postProcess","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","removeThrottle","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["F:/Bovis/Front/bovis-dev/node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js"],"sourcesContent":["/*! @azure/msal-common v13.3.1 2023-10-27 */\n'use strict';\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ThrottlingUtils = /** @class */ (function () {\r\n    function ThrottlingUtils() {\r\n    }\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\r\n        return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\r\n        var _a;\r\n        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        var value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key);\r\n                return;\r\n            }\r\n            throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            var thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\r\n        }\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseStatus = function (response) {\r\n        return response.status === 429 || response.status >= 500 && response.status < 600;\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseForRetryAfter = function (response) {\r\n        if (response.headers) {\r\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\r\n        var time = throttleTime <= 0 ? 0 : throttleTime;\r\n        var currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    };\r\n    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\r\n        var thumbprint = {\r\n            clientId: clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: homeAccountIdentifier,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n        var key = this.generateThrottlingStorageKey(thumbprint);\r\n        cacheManager.removeItem(key);\r\n    };\r\n    return ThrottlingUtils;\r\n}());\n\nexport { ThrottlingUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}